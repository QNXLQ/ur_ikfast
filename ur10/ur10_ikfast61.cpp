/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-30 13:36:27.054217
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKsin(j[5]);
x1=IKsin(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=(x3*x4);
x6=((1.0)*x5);
x7=IKcos(j[1]);
x8=IKcos(j[2]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=(x10*x2);
x12=IKcos(j[3]);
x13=(x3*x8);
x14=((1.0)*x13);
x15=(x4*x7);
x16=((1.0)*x15);
x17=(x2*((x16+x14)));
x18=(((x12*x17))+((x1*((x11+(((-1.0)*(1.0)*x2*x6)))))));
x19=IKcos(j[5]);
x20=IKsin(j[4]);
x21=IKsin(j[0]);
x22=((1.0)*x21);
x23=(x20*x22);
x24=IKcos(j[4]);
x25=(x2*x5);
x26=(x12*((x25+(((-1.0)*(1.0)*x11)))));
x27=(x1*x17);
x28=(x24*((x27+x26)));
x29=((0.612)*x7);
x30=((0.5723)*x7*x8);
x31=((0.1157)*x5);
x32=((0.1157)*x9);
x33=((0.1157)*x13);
x34=((0.1157)*x15);
x35=(x22*x9);
x36=(((x13*x22))+((x15*x22)));
x37=(((x1*((x35+(((-1.0)*(1.0)*x22*x5))))))+((x12*x36)));
x38=(x2*x20);
x39=(x21*x5);
x40=(x12*((x39+(((-1.0)*(1.0)*x35)))));
x41=(x1*x36);
x42=(x24*((x40+x41)));
x43=(x2*x24);
x44=(x10+(((-1.0)*(1.0)*x6)));
x45=(((x1*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x14))))))+((x12*x44)));
x46=(x12*((x15+x13)));
x47=(x1*x44);
x48=((((-1.0)*(1.0)*x47))+(((-1.0)*(1.0)*x46)));
eerot[0]=(((x19*(((((-1.0)*(1.0)*x23))+x28))))+((x0*x18)));
eerot[1]=(((x0*((x23+(((-1.0)*(1.0)*x28))))))+((x18*x19)));
eerot[2]=((((-1.0)*(1.0)*x22*x24))+((x20*(((((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x26)))))));
IkReal x49=((1.0)*x2);
eetrans[0]=((((-1.0)*(0.0922)*x21*x24))+((x20*(((((-1.0)*(0.0922)*x26))+(((-1.0)*(0.0922)*x27))))))+((x2*x30))+(((-1.0)*(0.16394)*x21))+((x1*(((((-1.0)*x32*x49))+((x2*x31))))))+((x2*x29))+(((-1.0)*(0.5723)*x25))+((x12*(((((-1.0)*x33*x49))+(((-1.0)*x34*x49)))))));
eerot[3]=(((x19*((x38+x42))))+((x0*x37)));
eerot[4]=(((x0*(((((-1.0)*(1.0)*x38))+(((-1.0)*(1.0)*x42))))))+((x19*x37)));
eerot[5]=(((x20*(((((-1.0)*(1.0)*x40))+(((-1.0)*(1.0)*x41))))))+x43);
IkReal x50=((1.0)*x21);
eetrans[1]=(((x21*x29))+((x21*x30))+(((-1.0)*(0.5723)*x39))+((x12*(((((-1.0)*x33*x50))+(((-1.0)*x34*x50))))))+(((0.16394)*x2))+(((0.0922)*x43))+((x1*(((((-1.0)*x32*x50))+((x21*x31))))))+((x20*(((((-1.0)*(0.0922)*x41))+(((-1.0)*(0.0922)*x40)))))));
eerot[6]=(((x19*x24*((x46+x47))))+((x0*x45)));
eerot[7]=(((x0*x24*x48))+((x19*x45)));
eerot[8]=(x20*x48);
eetrans[2]=((0.1273)+(((-1.0)*(0.612)*x3))+((x1*((x34+x33))))+((x12*((x31+(((-1.0)*(1.0)*x32))))))+((x20*(((((-1.0)*(0.0922)*x47))+(((-1.0)*(0.0922)*x46))))))+(((-1.0)*(0.5723)*x15))+(((-1.0)*(0.5723)*x13)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-1.0)*(0.0922)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-1.0)*(0.0922)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1273)+pz+(((-1.0)*(0.0922)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*py);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x51)));
rxp0_1=((((-1.0)*r00*x52))+((px*r20)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x53)));
rxp2_0=((((-1.0)*r22*x51))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.1157)*r20);
IkReal x55=((-1.0)*x54);
IkReal x56=((0.2314)*npx);
IkReal x57=((-1.0)*(((1.0)*r20)));
IkReal x58=((-1.0)*(((1.0)*rxp0_2)));
IkReal x59=((0.1157)*r21);
IkReal x60=((-1.0)*x59);
IkReal x61=((0.2314)*npy);
IkReal x62=((-1.0)*(((1.0)*r21)));
IkReal x63=((-1.0)*(((1.0)*rxp1_2)));
IkReal x64=((-1.0)*(((1.0)*r22)));
IkReal x65=((0.1157)*r22);
IkReal x66=((-1.0)*(((1.0)*npz)));
IkReal x67=((-1.0)*(((1.0)*npx)));
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x56;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x57;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x58;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x56;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x57;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x58;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x61;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x61;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x65;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*(((1.0)*rxp2_2)));
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x66;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x65;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x63;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x63;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x59;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x57;
matrixinvcoeffs[133]=x67;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x54;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x57;
matrixinvcoeffs[151]=x67;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x66;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x65;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x66;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-1.0)*x65);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x62;
matrixinvcoeffs[204]=x59;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x63;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*(((1.0)*npy)));
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x59;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x67;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x57;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x58;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=((0.0021945811706)*r22);
IkReal x69=((0.0021945811706)*r21);
IkReal x70=((0.0021945811706)*r20);
IkReal x71=((0.32788)*npz*pz);
IkReal x72=((0.16394)*pp*r22);
IkReal x73=((0.32788)*npy*pz);
IkReal x74=((0.16394)*pp*r21);
IkReal x75=((0.32788)*npx*pz);
IkReal x76=((0.16394)*pp*r20);
IkReal x77=((((-1.0)*gclwh8_5*x70))+((gclwh6_5*x74))+((gclwh10_5*x71))+((gclwh6_5*x69))+(((-1.0)*gclwh8_5*x76))+((gclwh8_5*x75))+(((-1.0)*gclwh10_5*x68))+(((-1.0)*gclwh10_5*x72))+(((-1.0)*gclwh6_5*x73)));
IkReal x78=(gclwh10_12*r22);
IkReal x79=(gclwh12_14*rxp1_2);
IkReal x80=((0.037935716)*x79);
IkReal x81=(gclwh12_8*rxp1_2);
IkReal x82=(gclwh14_14*rxp0_2);
IkReal x83=((0.037935716)*x82);
IkReal x84=(gclwh14_8*rxp0_2);
IkReal x85=((0.037935716)*rxp2_2);
IkReal x86=(gclwh4_14*x85);
IkReal x87=(gclwh4_8*rxp2_2);
IkReal x88=(gclwh6_12*r21);
IkReal x89=(gclwh8_12*r20);
IkReal x90=(gclwh10_12*npz*pz);
IkReal x91=(gclwh10_12*pp*r22);
IkReal x92=(gclwh6_12*npy*pz);
IkReal x93=(gclwh6_12*pp*r21);
IkReal x94=(gclwh8_12*npx*pz);
IkReal x95=(gclwh8_12*pp*r20);
IkReal x96=(gclwh10_11*r22);
IkReal x97=((0.01338649)*x96);
IkReal x98=(gclwh12_11*rxp1_2);
IkReal x99=((0.2314)*x98);
IkReal x100=(gclwh12_3*rxp1_2);
IkReal x101=(gclwh14_11*rxp0_2);
IkReal x102=((0.2314)*x101);
IkReal x103=(gclwh14_3*rxp0_2);
IkReal x104=(gclwh4_11*rxp2_2);
IkReal x105=((0.2314)*x104);
IkReal x106=(gclwh4_3*rxp2_2);
IkReal x107=(gclwh6_11*r21);
IkReal x108=((0.01338649)*x107);
IkReal x109=(gclwh8_11*r20);
IkReal x110=((0.01338649)*x109);
IkReal x111=(pp*x96);
IkReal x112=(pp*x109);
IkReal x113=(gclwh10_11*npz*pz);
IkReal x114=((2.0)*x113);
IkReal x115=(gclwh6_11*npy*pz);
IkReal x116=((2.0)*x115);
IkReal x117=(pp*x107);
IkReal x118=(gclwh8_11*npx*pz);
IkReal x119=((2.0)*x118);
IkReal x120=((0.01338649)*pz);
IkReal x121=(gclwh10_2*r22);
IkReal x122=((0.2314)*pz);
IkReal x123=(gclwh12_2*rxp1_2);
IkReal x124=((0.2314)*pp);
IkReal x125=(gclwh14_2*rxp0_2);
IkReal x126=(gclwh4_2*rxp2_2);
IkReal x127=(gclwh6_2*r21);
IkReal x128=((0.01338649)*r20);
IkReal x129=(gclwh8_2*pz);
IkReal x130=(gclwh10_2*pp*r22);
IkReal x131=(pp*r20);
IkReal x132=((1.0)*pp*pz);
IkReal x133=pz*pz;
IkReal x134=((2.0)*npz*x133);
IkReal x135=((2.0)*npy*x133);
IkReal x136=((2.0)*npx*x133);
IkReal x137=((((-1.0)*gclwh8_2*x136))+((x128*x129))+((x122*x125))+(((0.02677298)*x87))+(((-1.0)*x122*x126))+(((-1.0)*x122*x123))+((x120*x121))+(((-1.0)*x127*x132))+(((-1.0)*gclwh10_2*x134))+(((-1.0)*x120*x127))+((x106*x124))+((pz*x130))+((gclwh6_2*x135))+(((-0.02677298)*x84))+((x129*x131))+(((0.02677298)*x81))+(((-1.0)*x103*x124))+((x100*x124)));
IkReal x138=((0.02677298)*x96);
IkReal x139=((0.4628)*x98);
IkReal x140=((0.4628)*x101);
IkReal x141=((0.4628)*x104);
IkReal x142=((0.02677298)*x107);
IkReal x143=((0.02677298)*x109);
IkReal x144=((4.0)*x113);
IkReal x145=((2.0)*x111);
IkReal x146=((4.0)*x115);
IkReal x147=((2.0)*x117);
IkReal x148=((4.0)*x118);
IkReal x149=((2.0)*x112);
IkReal x150=(x138+(((-1.0)*x139))+(((-1.0)*x142))+(((-1.0)*x148))+x149+x140+x145+x146+x143+(((-1.0)*x141))+(((-1.0)*x147))+(((-1.0)*x144)));
IkReal x151=((0.075871432)*x79);
IkReal x152=((0.075871432)*x82);
IkReal x153=(gclwh4_14*rxp2_2);
IkReal x154=((0.075871432)*x153);
IkReal x155=((((-1.0)*x154))+x152+(((-1.0)*x151)));
IkReal x156=((0.26486044)*rxp2_2);
IkReal x157=((0.015322176454)*r21);
IkReal x158=((0.015322176454)*r20);
IkReal x159=(gclwh10_2*npz*pz);
IkReal x160=((1.1446)*pp);
IkReal x161=((2.2892)*npy*pz);
IkReal x162=((2.2892)*npx);
IkReal x163=((1.1446)*pp*r20);
IkReal x164=(gclwh11_10*r22);
IkReal x165=((0.01338649)*x164);
IkReal x166=(gclwh13_1*rxp1_2);
IkReal x167=(gclwh13_10*rxp1_2);
IkReal x168=((0.2314)*x167);
IkReal x169=(gclwh15_1*rxp0_2);
IkReal x170=(gclwh15_10*rxp0_2);
IkReal x171=((0.2314)*x170);
IkReal x172=(gclwh5_1*rxp2_2);
IkReal x173=(gclwh5_10*rxp2_2);
IkReal x174=((0.2314)*x173);
IkReal x175=(gclwh7_10*r21);
IkReal x176=((0.01338649)*x175);
IkReal x177=(gclwh9_10*r20);
IkReal x178=((0.01338649)*x177);
IkReal x179=(pp*x175);
IkReal x180=(gclwh11_10*npz*pz);
IkReal x181=((2.0)*x180);
IkReal x182=(pp*x164);
IkReal x183=(gclwh7_10*npy*pz);
IkReal x184=((2.0)*x183);
IkReal x185=(gclwh9_10*npx*pz);
IkReal x186=((2.0)*x185);
IkReal x187=(pp*x177);
IkReal x188=(gclwh13_9*rxp1_2);
IkReal x189=(gclwh15_9*rxp0_2);
IkReal x190=(gclwh5_9*rxp2_2);
IkReal x191=(gclwh11_0*r22);
IkReal x192=(gclwh13_0*rxp1_2);
IkReal x193=(gclwh15_0*rxp0_2);
IkReal x194=(gclwh5_0*rxp2_2);
IkReal x195=(gclwh7_0*r21);
IkReal x196=(gclwh9_0*pz);
IkReal x197=(gclwh11_0*pp*r22);
IkReal x198=((((-0.02677298)*x189))+((x120*x191))+((pz*x197))+(((-1.0)*x124*x169))+(((0.02677298)*x188))+((x128*x196))+((x124*x166))+(((-1.0)*x132*x195))+((x124*x172))+(((-1.0)*x120*x195))+((x122*x193))+(((-1.0)*x122*x194))+((x131*x196))+((gclwh7_0*x135))+(((-1.0)*x122*x192))+(((0.02677298)*x190))+(((-1.0)*gclwh9_0*x136))+(((-1.0)*gclwh11_0*x134)));
IkReal x199=((((-1.0)*gclwh9_7*x76))+(((-1.0)*gclwh9_7*x70))+(((-1.0)*gclwh11_7*x68))+((gclwh7_7*x74))+(((-1.0)*gclwh7_7*x73))+((gclwh9_7*x75))+((gclwh7_7*x69))+((gclwh11_7*x71))+(((-1.0)*gclwh11_7*x72)));
IkReal x200=(gclwh11_13*r22);
IkReal x201=(gclwh13_15*rxp1_2);
IkReal x202=((0.037935716)*x201);
IkReal x203=(gclwh15_15*rxp0_2);
IkReal x204=((0.037935716)*x203);
IkReal x205=(gclwh5_15*x85);
IkReal x206=(gclwh7_13*r21);
IkReal x207=(gclwh9_13*r20);
IkReal x208=(gclwh11_13*npz*pz);
IkReal x209=(gclwh11_13*pp*r22);
IkReal x210=(gclwh7_13*npy*pz);
IkReal x211=(gclwh7_13*pp*r21);
IkReal x212=(gclwh9_13*npx*pz);
IkReal x213=(gclwh9_13*pp*r20);
IkReal x214=((0.075871432)*x201);
IkReal x215=((0.075871432)*x203);
IkReal x216=(gclwh5_15*rxp2_2);
IkReal x217=((0.075871432)*x216);
IkReal x218=((((-1.0)*x215))+x214+x217);
IkReal x219=(gclwh11_0*npz*pz);
IkReal x220=((0.02677298)*x164);
IkReal x221=((0.4628)*x167);
IkReal x222=((0.4628)*x170);
IkReal x223=((0.4628)*x173);
IkReal x224=((0.02677298)*x175);
IkReal x225=((0.02677298)*x177);
IkReal x226=((4.0)*x180);
IkReal x227=((2.0)*x182);
IkReal x228=((4.0)*x183);
IkReal x229=((2.0)*x179);
IkReal x230=((4.0)*x185);
IkReal x231=((2.0)*x187);
IkReal x232=((((-1.0)*x230))+(((-1.0)*x221))+(((-1.0)*x223))+(((-1.0)*x224))+(((-1.0)*x226))+(((-1.0)*x229))+x227+x220+x225+x222+x228+x231);
IkReal x233=((0.037935716)*rxp1_2);
IkReal x234=((0.037935716)*rxp0_2);
IkReal x235=((((-1.0)*gclwh6_5*x233))+((gclwh10_5*x85))+((gclwh8_5*x234)));
IkReal x236=(gclwh10_12*rxp2_2);
IkReal x237=(gclwh12_14*r21);
IkReal x238=((0.0021945811706)*x237);
IkReal x239=(gclwh12_8*r21);
IkReal x240=(gclwh14_14*r20);
IkReal x241=((0.0021945811706)*x240);
IkReal x242=(gclwh14_8*r20);
IkReal x243=(gclwh4_14*x68);
IkReal x244=(gclwh4_8*r22);
IkReal x245=(gclwh6_12*rxp1_2);
IkReal x246=(gclwh8_12*rxp0_2);
IkReal x247=(gclwh12_14*npy*pz);
IkReal x248=((0.32788)*x247);
IkReal x249=(gclwh12_14*pp*r21);
IkReal x250=((0.16394)*x249);
IkReal x251=(gclwh12_8*npy*pz);
IkReal x252=(gclwh12_8*pp*r21);
IkReal x253=(gclwh14_14*npx*pz);
IkReal x254=((0.32788)*x253);
IkReal x255=(gclwh14_14*pp*r20);
IkReal x256=((0.16394)*x255);
IkReal x257=(gclwh14_8*npx*pz);
IkReal x258=(gclwh14_8*pp*r20);
IkReal x259=(gclwh4_14*x71);
IkReal x260=(gclwh4_14*x72);
IkReal x261=(gclwh4_8*npz*pz);
IkReal x262=(gclwh4_8*pp*r22);
IkReal x263=(gclwh10_11*rxp2_2);
IkReal x264=((0.2314)*x263);
IkReal x265=(gclwh12_11*r21);
IkReal x266=((0.01338649)*x265);
IkReal x267=(gclwh12_3*r21);
IkReal x268=(gclwh14_11*r20);
IkReal x269=((0.01338649)*x268);
IkReal x270=(gclwh14_3*r20);
IkReal x271=(gclwh1_3*r20);
IkReal x272=(gclwh3_3*r21);
IkReal x273=(gclwh4_11*r22);
IkReal x274=((0.01338649)*x273);
IkReal x275=(gclwh4_3*r22);
IkReal x276=(gclwh6_11*rxp1_2);
IkReal x277=((0.2314)*x276);
IkReal x278=(gclwh8_11*rxp0_2);
IkReal x279=((0.2314)*x278);
IkReal x280=(pp*x268);
IkReal x281=(gclwh12_11*npy*pz);
IkReal x282=((2.0)*x281);
IkReal x283=(pp*x265);
IkReal x284=(gclwh12_3*npy*pz);
IkReal x285=(gclwh12_3*pp*r21);
IkReal x286=(gclwh14_11*npx*pz);
IkReal x287=((2.0)*x286);
IkReal x288=(gclwh14_3*npx*pz);
IkReal x289=(gclwh14_3*pp*r20);
IkReal x290=(gclwh1_3*npx*pz);
IkReal x291=(gclwh1_3*pp*r20);
IkReal x292=(gclwh3_3*npy*pz);
IkReal x293=(gclwh3_3*pp*r21);
IkReal x294=(gclwh4_11*npz*pz);
IkReal x295=((2.0)*x294);
IkReal x296=(pp*x273);
IkReal x297=(gclwh4_3*npz*pz);
IkReal x298=(gclwh4_3*pp*r22);
IkReal x299=(gclwh10_2*rxp2_2);
IkReal x300=(gclwh12_2*r21);
IkReal x301=(gclwh14_2*pz);
IkReal x302=(gclwh1_2*pz);
IkReal x303=(gclwh3_2*r21);
IkReal x304=(gclwh4_2*r22);
IkReal x305=((0.2314)*npz*pz);
IkReal x306=(gclwh6_2*rxp1_2);
IkReal x307=(gclwh8_2*rxp0_2);
IkReal x308=pp*pp;
IkReal x309=((2.0)*pp);
IkReal x310=((1.0)*pp*r20);
IkReal x311=((1.0)*x308);
IkReal x312=((((0.001548816893)*x244))+(((-1.0)*x302*x310))+(((-1.0)*x132*x304))+x122+(((-1.0)*x270*x311))+((x271*x308))+(((0.001548816893)*x239))+((gclwh3_2*x135))+(((-1.0)*gclwh14_2*x136))+((x275*x308))+(((-1.0)*x284*x309))+(((-1.0)*x122*x299))+(((-1.0)*x292*x309))+((x120*x303))+(((-1.0)*gclwh4_8*x305))+(((-1.0)*x120*x300))+((x128*x302))+((x288*x309))+(((-1.0)*x122*x307))+((gclwh4_2*x134))+((gclwh1_2*x136))+(((0.1157)*x262))+((x131*x301))+((x122*x306))+(((-0.001548816893)*x242))+((gclwh14_8*npx*x122))+(((-1.0)*x132*x300))+(((-1.0)*x132*x303))+(((-0.1157)*x258))+((gclwh12_2*x135))+(((-1.0)*gclwh12_8*npy*x122))+(((0.1157)*x252))+(((-1.0)*x297*x309))+(((-1.0)*x120*x304))+((x128*x301))+(((-1.0)*x290*x309))+((x267*x308))+((x272*x308)));
IkReal x313=((((-4.0)*x286))+(((-2.0)*x283))+(((2.0)*x280))+(((0.4628)*x276))+(((-2.0)*x296))+(((-0.02677298)*x265))+(((4.0)*x281))+(((-0.4628)*x263))+(((0.02677298)*x268))+(((-0.02677298)*x273))+(((4.0)*x294))+(((-0.4628)*x278)));
IkReal x314=((0.0043891623412)*r22);
IkReal x315=((0.65576)*npz*pz);
IkReal x316=((0.32788)*pp*r22);
IkReal x317=((((-0.32788)*x249))+((gclwh4_14*x315))+(((-0.0043891623412)*x237))+(((0.32788)*x255))+(((0.0043891623412)*x240))+(((-1.0)*gclwh4_14*x314))+(((-0.65576)*x253))+(((-1.0)*gclwh4_14*x316))+(((0.65576)*x247)));
IkReal x318=(gclwh12_2*npy*pz);
IkReal x319=(gclwh4_2*npz*pz);
IkReal x320=(gclwh0_1*r20);
IkReal x321=(gclwh11_10*rxp2_2);
IkReal x322=((0.2314)*x321);
IkReal x323=(gclwh13_1*r21);
IkReal x324=(gclwh13_10*r21);
IkReal x325=((0.01338649)*x324);
IkReal x326=(gclwh15_1*r20);
IkReal x327=(gclwh15_10*r20);
IkReal x328=((0.01338649)*x327);
IkReal x329=(gclwh2_1*r21);
IkReal x330=(gclwh5_1*r22);
IkReal x331=(gclwh5_10*r22);
IkReal x332=((0.01338649)*x331);
IkReal x333=(gclwh7_10*rxp1_2);
IkReal x334=((0.2314)*x333);
IkReal x335=(gclwh9_10*rxp0_2);
IkReal x336=((0.2314)*x335);
IkReal x337=(pp*x327);
IkReal x338=(gclwh0_1*npx*pz);
IkReal x339=(gclwh0_1*pp*r20);
IkReal x340=(gclwh13_1*npy*pz);
IkReal x341=(gclwh13_1*pp*r21);
IkReal x342=(gclwh13_10*npy*pz);
IkReal x343=((2.0)*x342);
IkReal x344=(pp*x324);
IkReal x345=(gclwh15_1*npx*pz);
IkReal x346=(gclwh15_1*pp*r20);
IkReal x347=(gclwh15_10*npx*pz);
IkReal x348=((2.0)*x347);
IkReal x349=(gclwh2_1*npy*pz);
IkReal x350=(gclwh2_1*pp*r21);
IkReal x351=(gclwh5_1*npz*pz);
IkReal x352=(gclwh5_1*pp*r22);
IkReal x353=(gclwh5_10*npz*pz);
IkReal x354=((2.0)*x353);
IkReal x355=(pp*x331);
IkReal x356=(gclwh13_9*r21);
IkReal x357=(gclwh15_9*r20);
IkReal x358=(gclwh5_9*r22);
IkReal x359=(gclwh0_0*pz);
IkReal x360=(gclwh13_0*r21);
IkReal x361=(gclwh13_9*pp*r21);
IkReal x362=(gclwh15_0*pz);
IkReal x363=(gclwh15_9*pp*r20);
IkReal x364=(gclwh2_0*r21);
IkReal x365=(gclwh5_0*r22);
IkReal x366=(gclwh5_9*pp*r22);
IkReal x367=(gclwh7_0*rxp1_2);
IkReal x368=(gclwh9_0*rxp0_2);
IkReal x369=(pp*pz);
IkReal x370=((((-0.1157)*x361))+x122+((x365*x369))+((x308*x329))+((x309*x340))+((gclwh13_9*npy*x122))+((gclwh0_0*x136))+((x360*x369))+(((0.1157)*x363))+((gclwh2_0*x135))+(((-0.001548816893)*x356))+(((-1.0)*x311*x323))+((x120*x364))+((x309*x351))+((gclwh11_0*rxp2_2*x122))+((x308*x326))+(((-1.0)*x310*x359))+(((-1.0)*x311*x330))+((x128*x359))+(((-1.0)*gclwh15_9*npx*x122))+(((-1.0)*gclwh5_0*x134))+((x122*x368))+(((0.001548816893)*x357))+(((-1.0)*gclwh13_0*x135))+((x120*x365))+(((-0.1157)*x366))+(((-1.0)*x132*x364))+(((-1.0)*x309*x338))+(((-1.0)*x128*x362))+(((-1.0)*x310*x362))+((gclwh15_0*x136))+((gclwh5_9*x305))+(((-1.0)*x309*x345))+((x308*x320))+(((-1.0)*x122*x367))+((x120*x360))+(((-0.001548816893)*x358))+(((-1.0)*x309*x349)));
IkReal x371=((((-1.0)*gclwh11_7*x85))+(((-1.0)*gclwh9_7*x234))+((gclwh7_7*x233)));
IkReal x372=(gclwh11_13*rxp2_2);
IkReal x373=(gclwh13_15*r21);
IkReal x374=((0.0021945811706)*x373);
IkReal x375=(gclwh15_15*r20);
IkReal x376=((0.0021945811706)*x375);
IkReal x377=(gclwh5_15*x68);
IkReal x378=(gclwh7_13*rxp1_2);
IkReal x379=(gclwh9_13*rxp0_2);
IkReal x380=(gclwh13_15*npy*pz);
IkReal x381=((0.32788)*x380);
IkReal x382=(gclwh13_15*pp*r21);
IkReal x383=((0.16394)*x382);
IkReal x384=(gclwh13_9*npy*pz);
IkReal x385=(gclwh15_15*npx*pz);
IkReal x386=((0.32788)*x385);
IkReal x387=(gclwh15_15*pp*r20);
IkReal x388=((0.16394)*x387);
IkReal x389=(gclwh15_9*npx*pz);
IkReal x390=(gclwh5_15*x71);
IkReal x391=(gclwh5_15*x72);
IkReal x392=(gclwh5_9*npz*pz);
IkReal x393=((0.031707240214)*r21);
IkReal x394=((0.031707240214)*r20);
IkReal x395=((4.7372)*npy*pz);
IkReal x396=((2.3686)*pp);
IkReal x397=((4.7372)*npx);
IkReal x398=((2.3686)*pp*r20);
IkReal x399=((0.001062887306)*r21);
IkReal x400=((0.001062887306)*r20);
IkReal x401=((0.1588)*npy*pz);
IkReal x402=((0.0794)*pp);
IkReal x403=((0.1588)*npx);
IkReal x404=((0.0794)*pp*r20);
op[0]=((((-0.015853620107)*x78))+(((-2.3686)*x92))+(((0.27404702)*x84))+(((2.3686)*x94))+(((-0.27404702)*x87))+(((-0.015853620107)*x89))+x86+x80+(((-1.0)*x83))+(((-1.1843)*x95))+(((-1.1843)*x91))+x77+(((1.1843)*x93))+(((-0.27404702)*x81))+(((2.3686)*x90))+(((0.015853620107)*x88)));
op[1]=(x137+x102+(((-1.0)*x117))+x97+(((-0.32767543328104)*x100))+(((0.32767543328104)*x103))+(((-0.32767543328104)*x106))+(((-1.0)*x114))+(((-1.0)*x108))+(((-1.0)*x99))+(((-1.0)*x119))+(((-1.0)*x105))+x112+x116+x111+x110);
op[2]=((-0.375291448)+x150);
op[3]=((((-0.2832336)*x84))+x155+(((0.2832336)*x81))+(((-1.0)*x127*x160))+(((-1.0)*x129*x162))+((gclwh6_2*x161))+((x121*x160))+(((0.26486044)*x125))+(((-1.0)*gclwh6_2*x157))+((gclwh8_2*x163))+(((-2.2892)*x159))+((gclwh8_2*x158))+(((0.2832336)*x87))+(((0.015322176454)*x121))+(((-1.0)*gclwh4_2*x156))+(((-0.26486044)*x123)));
op[4]=((((0.00918658)*x81))+(((0.000531443653)*x88))+(((-0.0794)*x92))+(((-0.000531443653)*x78))+(((0.0794)*x94))+(((-1.0)*x80))+(((-0.0397)*x91))+(((-1.0)*x86))+x83+(((-0.0397)*x95))+(((-0.000531443653)*x89))+(((0.00918658)*x87))+(((-0.00918658)*x84))+(((0.0794)*x90))+x77+(((0.0397)*x93)));
op[5]=(x137+x105+x108+(((-1.0)*x110))+(((-0.00348625472104)*x100))+(((-1.0)*x97))+(((-1.0)*x111))+x99+(((-0.00348625472104)*x106))+(((-1.0)*x116))+(((-1.0)*x102))+(((-1.0)*x112))+(((0.00348625472104)*x103))+x114+x119+x117);
op[6]=((((-1.0)*x171))+(((-1.0)*x182))+(((-1.0)*x178))+(((-1.0)*x187))+(((-0.32767543328104)*x172))+(((-1.0)*x184))+x179+x176+x174+x168+x198+(((0.32767543328104)*x169))+x181+x186+(((-0.32767543328104)*x166))+(((-1.0)*x165)));
op[7]=((((-2.3686)*x210))+(((1.1843)*x211))+(((-0.015853620107)*x200))+(((2.3686)*x208))+(((2.3686)*x212))+(((0.27404702)*x189))+(((-1.1843)*x213))+(((-0.27404702)*x188))+(((-1.1843)*x209))+(((-0.27404702)*x190))+x205+x202+(((-0.015853620107)*x207))+x199+(((-1.0)*x204))+(((0.015853620107)*x206)));
op[8]=((((-1.0)*gclwh7_0*x157))+((x160*x191))+((gclwh7_0*x161))+(((0.015322176454)*x191))+(((0.2832336)*x189))+(((-1.0)*x162*x196))+(((-0.26486044)*x192))+(((0.26486044)*x193))+((gclwh9_0*x158))+(((-0.2832336)*x188))+(((-1.0)*x160*x195))+x218+(((-0.2832336)*x190))+(((-2.2892)*x219))+((gclwh9_0*x163))+(((-1.0)*gclwh5_0*x156)));
op[9]=((-0.375291448)+x232);
op[10]=((((-1.0)*x174))+(((-1.0)*x168))+(((-0.00348625472104)*x172))+(((-1.0)*x186))+(((-0.00348625472104)*x166))+(((0.00348625472104)*x169))+(((-1.0)*x176))+(((-1.0)*x179))+x171+x178+x165+x198+(((-1.0)*x181))+x182+x184+x187);
op[11]=((((0.00918658)*x190))+(((0.0794)*x208))+(((-1.0)*x205))+(((-0.0397)*x209))+(((-1.0)*x202))+(((0.0397)*x211))+(((-0.000531443653)*x207))+(((-0.000531443653)*x200))+(((-0.0794)*x210))+(((0.0794)*x212))+x204+x199+(((0.00918658)*x188))+(((-0.00918658)*x189))+(((0.000531443653)*x206))+(((-0.0397)*x213)));
op[12]=((((-1.0)*x256))+(((-1.0)*x259))+(((-1.0)*x248))+x260+(((-1.1843)*x252))+x243+(((-2.3686)*x257))+(((-1.1843)*x262))+(((0.015853620107)*x242))+(((-0.27404702)*x245))+(((2.3686)*x251))+(((-0.015853620107)*x239))+x254+x250+(((0.27404702)*x246))+(((1.1843)*x258))+(((2.3686)*x261))+(((0.27404702)*x236))+(((-0.015853620107)*x244))+x235+x238+(((-1.0)*x241)));
op[13]=((-1.4294428136)+x295+(((-1.4026698336)*x285))+(((2.8321126472)*x297))+(((2.8321126472)*x290))+x269+(((0.0189560238153082)*x272))+(((-1.0)*x274))+(((-1.0)*x266))+(((-1.0)*x296))+x277+(((-1.4294428136)*x293))+(((-1.4294428136)*x291))+(((-1.4026698336)*x298))+(((-1.0)*x279))+(((-1.0)*x264))+(((-1.0)*x283))+(((-0.0189560238153082)*x267))+x312+(((2.8321126472)*x292))+(((-1.0)*x287))+(((-2.8321126472)*x288))+(((-0.0189560238153082)*x275))+(((1.4026698336)*x289))+x280+x282+(((0.0189560238153082)*x271))+(((2.8321126472)*x284))+(((0.0189560238153082)*x270)));
op[14]=((-0.1477860672)+x313);
op[15]=((((2.2892)*x319))+((gclwh1_2*x158))+(((1.224)*x262))+(((-2.448)*x251))+(((2.2892)*x318))+(((-0.015322176454)*x300))+(((-1.224)*x258))+((x162*x302))+(((-1.0)*x162*x301))+(((-0.26486044)*x299))+(((0.26486044)*x306))+(((-0.015322176454)*x304))+(((-1.0)*x160*x303))+(((2.448)*x257))+(((-1.0)*x160*x300))+(((-1.0)*x160*x304))+(((-0.26486044)*x307))+((gclwh14_2*x163))+(((0.01638506376)*x244))+(((-1.0)*gclwh1_2*x163))+x317+(((-2.448)*x261))+(((0.01638506376)*x239))+((gclwh14_2*x158))+((gclwh3_2*x161))+(((1.224)*x252))+((gclwh3_2*x157))+(((-0.01638506376)*x242)));
op[16]=((((0.00918658)*x246))+(((-1.0)*x250))+(((-1.0)*x260))+(((0.0794)*x257))+(((0.000531443653)*x244))+x248+x241+(((0.000531443653)*x239))+(((0.0397)*x252))+(((-1.0)*x243))+x256+x259+(((0.0397)*x262))+(((-0.0397)*x258))+(((-1.0)*x238))+(((-0.000531443653)*x242))+(((-0.0794)*x261))+(((-0.00918658)*x245))+(((-1.0)*x254))+(((0.00918658)*x236))+x235+(((-0.0794)*x251)));
op[17]=((0.0284524136)+(((0.000201679835612164)*x272))+(((-1.0)*x277))+x296+(((-1.0)*x295))+(((0.0301318472)*x292))+x264+x266+(((0.0301318472)*x284))+(((-1.0)*x269))+(((-0.0284524136)*x293))+(((-0.000201679835612164)*x275))+(((-0.0016794336)*x298))+x279+x274+(((0.0016794336)*x289))+(((-1.0)*x280))+(((0.0301318472)*x297))+(((-0.000201679835612164)*x267))+(((-0.0016794336)*x285))+x312+(((0.000201679835612164)*x271))+(((0.000201679835612164)*x270))+(((-1.0)*x282))+(((-0.0301318472)*x288))+(((-0.0284524136)*x291))+x287+x283+(((0.0301318472)*x290)));
op[18]=((1.4294428136)+(((2.8321126472)*x338))+(((0.0189560238153082)*x320))+(((-1.0)*x348))+(((0.0189560238153082)*x323))+(((-1.4026698336)*x346))+(((0.0189560238153082)*x329))+(((2.8321126472)*x349))+(((2.8321126472)*x345))+(((-1.0)*x332))+(((-1.0)*x344))+x354+(((-1.0)*x322))+(((-2.8321126472)*x351))+(((0.0189560238153082)*x330))+(((-1.0)*x325))+x334+x337+(((1.4026698336)*x352))+(((-1.0)*x336))+x328+(((-2.8321126472)*x340))+(((1.4026698336)*x341))+(((-1.0)*x355))+(((-1.4294428136)*x339))+x343+x370+(((-1.4294428136)*x350))+(((-0.0189560238153082)*x326)));
op[19]=((((-1.0)*x386))+x390+(((-1.0)*x374))+(((-2.3686)*x384))+(((-0.27404702)*x379))+(((1.1843)*x361))+(((-1.0)*x383))+(((2.3686)*x389))+(((0.27404702)*x378))+x388+x381+(((-0.27404702)*x372))+(((-2.3686)*x392))+(((0.015853620107)*x356))+(((1.1843)*x366))+(((-1.0)*x377))+(((-1.0)*x391))+x371+x376+(((-0.015853620107)*x357))+(((-1.1843)*x363))+(((0.015853620107)*x358)));
op[20]=((((0.26486044)*x368))+(((0.32788)*x387))+(((0.015322176454)*x365))+(((-2.448)*x384))+(((-1.0)*gclwh15_0*x158))+(((0.01638506376)*x358))+((gclwh5_15*x315))+(((-1.0)*gclwh13_0*x161))+(((-1.0)*gclwh15_0*x163))+((x162*x362))+(((-0.26486044)*x367))+(((-1.224)*x363))+((gclwh11_0*x156))+((x160*x365))+((gclwh0_0*x158))+(((0.65576)*x380))+(((-0.65576)*x385))+(((-1.0)*x160*x364))+((gclwh2_0*x161))+(((2.448)*x389))+(((-2.2892)*gclwh5_0*npz*pz))+(((-0.32788)*x382))+(((-1.0)*gclwh5_15*x316))+(((-0.0043891623412)*x373))+(((-1.0)*gclwh5_15*x314))+(((-1.0)*gclwh0_0*x163))+((x162*x359))+(((1.224)*x361))+(((0.0043891623412)*x375))+(((-0.01638506376)*x357))+(((1.224)*x366))+(((-2.448)*x392))+((x160*x360))+((gclwh2_0*x157))+((gclwh13_0*x157))+(((0.01638506376)*x356)));
op[21]=((-0.1477860672)+(((-4.0)*x353))+(((0.4628)*x335))+(((0.4628)*x321))+(((2.0)*x344))+(((4.0)*x347))+(((-0.02677298)*x327))+(((-0.4628)*x333))+(((-2.0)*x337))+(((-4.0)*x342))+(((0.02677298)*x324))+(((0.02677298)*x331))+(((2.0)*x355)));
op[22]=((-0.0284524136)+(((-0.0301318472)*x340))+(((0.000201679835612164)*x330))+(((-0.000201679835612164)*x326))+(((0.000201679835612164)*x320))+(((0.0301318472)*x349))+(((-0.0301318472)*x351))+(((0.000201679835612164)*x323))+(((-1.0)*x334))+(((-1.0)*x328))+(((-1.0)*x343))+(((-1.0)*x354))+(((0.0016794336)*x352))+x355+(((0.0301318472)*x345))+x336+x332+x325+x322+(((-0.0284524136)*x350))+(((0.000201679835612164)*x329))+(((0.0301318472)*x338))+(((0.0016794336)*x341))+(((-0.0016794336)*x346))+(((-0.0284524136)*x339))+x344+x348+x370+(((-1.0)*x337)));
op[23]=((((-1.0)*x388))+x391+(((-0.000531443653)*x356))+(((-0.0397)*x361))+(((-0.00918658)*x372))+(((0.0397)*x363))+(((0.00918658)*x378))+x386+x383+(((0.0794)*x384))+(((-1.0)*x381))+(((-1.0)*x390))+(((-0.00918658)*x379))+(((-0.0794)*x389))+(((0.0794)*x392))+(((-0.000531443653)*x358))+x371+x377+x374+(((0.000531443653)*x357))+(((-0.0397)*x366))+(((-1.0)*x376)));
op[24]=((-0.776616568)+x150);
op[25]=(((gclwh8_2*x398))+(((-4.7372)*x159))+(((-1.0)*x129*x397))+x155+(((0.031707240214)*x121))+(((2.3686)*x130))+(((-1.0)*gclwh6_2*x393))+(((-0.54809404)*x126))+(((-1.0)*x127*x396))+((gclwh6_2*x395))+(((-0.54809404)*x123))+(((0.54809404)*x125))+((gclwh8_2*x394)));
op[26]=((((0.151742864)*x82))+(((-0.151742864)*x153))+(((4.5784)*x92))+(((-4.5784)*x90))+(((-0.151742864)*x79))+(((0.030644352908)*x78))+(((-4.5784)*x94))+(((0.030644352908)*x89))+(((2.2892)*x95))+(((-0.030644352908)*x88))+(((2.2892)*x91))+(((-2.2892)*x93)));
op[27]=((((-8.0)*x115))+(((-0.05354596)*x96))+(((0.05354596)*x107))+(((-0.9256)*x101))+(((-4.0)*x112))+(((4.0)*x117))+(((8.0)*x113))+(((-4.0)*x111))+(((-0.05354596)*x109))+(((8.0)*x118))+(((0.9256)*x98))+(((0.9256)*x104)));
op[28]=((-0.026033672)+x139+x147+x148+x141+x142+x144+(((-1.0)*x146))+(((-1.0)*x140))+(((-1.0)*x145))+(((-1.0)*x138))+(((-1.0)*x149))+(((-1.0)*x143)));
op[29]=(((gclwh8_2*x404))+(((0.0794)*x130))+(((-1.0)*x129*x403))+x151+x154+(((-0.1588)*x159))+(((-1.0)*x152))+((gclwh8_2*x400))+(((0.001062887306)*x121))+(((-1.0)*x127*x402))+(((-0.01837316)*x123))+(((-1.0)*gclwh6_2*x399))+(((-0.01837316)*x126))+((gclwh6_2*x401))+(((0.01837316)*x125)));
op[30]=((((-1.0)*x195*x396))+(((-1.0)*x196*x397))+(((-1.0)*gclwh7_0*x393))+(((-0.54809404)*x194))+(((-0.54809404)*x192))+(((0.031707240214)*x191))+(((-4.7372)*x219))+(((0.54809404)*x193))+((gclwh9_0*x398))+((gclwh9_0*x394))+x218+(((2.3686)*x197))+((gclwh7_0*x395)));
op[31]=((-0.776616568)+x232);
op[32]=((((-8.0)*x185))+(((-8.0)*x180))+(((0.05354596)*x164))+(((4.0)*x187))+(((0.05354596)*x177))+(((-4.0)*x179))+(((-0.9256)*x173))+(((-0.05354596)*x175))+(((-0.9256)*x167))+(((4.0)*x182))+(((0.9256)*x170))+(((8.0)*x183)));
op[33]=((((-0.151742864)*x201))+(((-2.2892)*x211))+(((0.030644352908)*x207))+(((0.030644352908)*x200))+(((-0.151742864)*x216))+(((-0.030644352908)*x206))+(((-4.5784)*x212))+(((-4.5784)*x208))+(((4.5784)*x210))+(((2.2892)*x213))+(((2.2892)*x209))+(((0.151742864)*x203)));
op[34]=((((0.001062887306)*x191))+(((-1.0)*x214))+(((-1.0)*x196*x403))+((gclwh9_0*x400))+(((-0.1588)*x219))+(((-1.0)*x217))+(((-1.0)*x195*x402))+((gclwh9_0*x404))+(((0.0794)*x197))+x215+(((-0.01837316)*x192))+(((0.01837316)*x193))+(((-1.0)*gclwh7_0*x399))+(((-0.01837316)*x194))+((gclwh7_0*x401)));
op[35]=((-0.026033672)+(((-1.0)*x231))+(((-1.0)*x220))+(((-1.0)*x225))+(((-1.0)*x228))+(((-1.0)*x227))+x226+x221+x224+x223+x229+(((-1.0)*x222))+x230);
op[36]=((2.7513803328)+x313);
op[37]=((((-0.54809404)*x299))+((x302*x397))+(((4.7372)*x319))+((gclwh3_2*x395))+(((-0.031707240214)*x304))+(((4.7372)*x318))+(((-1.0)*x301*x397))+(((-0.031707240214)*x300))+((gclwh3_2*x393))+(((0.54809404)*x306))+(((-1.0)*gclwh1_2*x398))+x317+(((-0.54809404)*x307))+(((-1.0)*x303*x396))+(((-1.0)*x300*x396))+((gclwh14_2*x398))+((gclwh1_2*x394))+((gclwh14_2*x394))+(((-1.0)*x304*x396)));
IkReal x405=(gclwh10_12*rxp2_2);
IkReal x406=(gclwh12_14*r21);
IkReal x407=(gclwh14_14*r20);
IkReal x408=(gclwh4_14*r22);
IkReal x409=(gclwh6_12*rxp1_2);
IkReal x410=(gclwh8_12*rxp0_2);
IkReal x411=(gclwh12_14*npy*pz);
IkReal x412=(gclwh12_14*pp*r21);
IkReal x413=(gclwh14_14*npx*pz);
IkReal x414=(gclwh14_14*pp*r20);
IkReal x415=(gclwh4_14*npz*pz);
IkReal x416=(gclwh4_14*pp*r22);
IkReal x417=(gclwh10_11*rxp2_2);
IkReal x418=(gclwh12_11*r21);
IkReal x419=(gclwh14_11*r20);
IkReal x420=(gclwh4_11*r22);
IkReal x421=(gclwh6_11*rxp1_2);
IkReal x422=(gclwh8_11*rxp0_2);
IkReal x423=(gclwh12_11*npy*pz);
IkReal x424=(pp*x418);
IkReal x425=(gclwh14_11*npx*pz);
IkReal x426=(pp*x419);
IkReal x427=(gclwh4_11*npz*pz);
IkReal x428=(pp*x420);
IkReal x429=((((-0.4628)*x421))+(((-4.0)*x427))+(((4.0)*x425))+(((0.4628)*x422))+(((0.02677298)*x420))+(((-4.0)*x423))+(((0.02677298)*x418))+(((-2.0)*x426))+(((2.0)*x428))+(((0.4628)*x417))+(((2.0)*x424))+(((-0.02677298)*x419)));
IkReal x430=((((-0.65576)*x415))+(((0.32788)*x412))+(((0.0043891623412)*x408))+(((-0.65576)*x411))+(((0.32788)*x416))+(((0.0043891623412)*x406))+(((-0.32788)*x414))+(((0.65576)*x413))+(((-0.0043891623412)*x407)));
IkReal x431=(gclwh10_2*rxp2_2);
IkReal x432=(gclwh12_2*r21);
IkReal x433=(gclwh14_2*r20);
IkReal x434=(gclwh1_2*r20);
IkReal x435=(gclwh3_2*r21);
IkReal x436=((0.001062887306)*r22);
IkReal x437=((0.01837316)*rxp1_2);
IkReal x438=((0.01837316)*rxp0_2);
IkReal x439=(gclwh12_2*npy*pz);
IkReal x440=((0.0794)*pp);
IkReal x441=(gclwh14_2*npx*pz);
IkReal x442=(gclwh1_2*npx*pz);
IkReal x443=(gclwh3_2*npy*pz);
IkReal x444=((0.1588)*npz*pz);
IkReal x445=(gclwh4_2*r22);
IkReal x446=(gclwh0_0*r20);
IkReal x447=(gclwh11_0*rxp2_2);
IkReal x448=(gclwh13_0*r21);
IkReal x449=(gclwh13_15*r21);
IkReal x450=((0.0043891623412)*x449);
IkReal x451=(gclwh15_0*r20);
IkReal x452=(gclwh15_15*r20);
IkReal x453=((0.0043891623412)*x452);
IkReal x454=(gclwh2_0*r21);
IkReal x455=(gclwh5_0*r22);
IkReal x456=(gclwh5_15*r22);
IkReal x457=((0.0043891623412)*x456);
IkReal x458=(gclwh7_0*rxp1_2);
IkReal x459=(gclwh9_0*rxp0_2);
IkReal x460=(gclwh0_0*npx*pz);
IkReal x461=(gclwh0_0*pp*r20);
IkReal x462=(gclwh13_0*npy*pz);
IkReal x463=((2.3686)*pp);
IkReal x464=(gclwh13_15*npy*pz);
IkReal x465=((0.65576)*x464);
IkReal x466=(gclwh13_15*pp*r21);
IkReal x467=((0.32788)*x466);
IkReal x468=(gclwh15_0*npx*pz);
IkReal x469=(gclwh15_15*npx*pz);
IkReal x470=((0.65576)*x469);
IkReal x471=(gclwh15_15*pp*r20);
IkReal x472=((0.32788)*x471);
IkReal x473=(gclwh2_0*npy*pz);
IkReal x474=(gclwh5_15*npz*pz);
IkReal x475=((0.65576)*x474);
IkReal x476=(gclwh5_15*pp*r22);
IkReal x477=((0.32788)*x476);
IkReal x478=(gclwh11_10*rxp2_2);
IkReal x479=((0.4628)*x478);
IkReal x480=(gclwh13_10*r21);
IkReal x481=((0.02677298)*x480);
IkReal x482=(gclwh15_10*r20);
IkReal x483=((0.02677298)*x482);
IkReal x484=(gclwh5_10*r22);
IkReal x485=((0.02677298)*x484);
IkReal x486=(gclwh7_10*rxp1_2);
IkReal x487=((0.4628)*x486);
IkReal x488=(gclwh9_10*rxp0_2);
IkReal x489=((0.4628)*x488);
IkReal x490=(gclwh13_10*npy*pz);
IkReal x491=((4.0)*x490);
IkReal x492=(pp*x480);
IkReal x493=((2.0)*x492);
IkReal x494=(gclwh15_10*npx*pz);
IkReal x495=((4.0)*x494);
IkReal x496=(pp*x482);
IkReal x497=((2.0)*x496);
IkReal x498=(gclwh5_10*npz*pz);
IkReal x499=((4.0)*x498);
IkReal x500=(pp*x484);
IkReal x501=((2.0)*x500);
IkReal x502=(gclwh11_13*rxp2_2);
IkReal x503=(gclwh7_13*rxp1_2);
IkReal x504=(gclwh9_13*rxp0_2);
IkReal x505=(x470+x477+(((-1.0)*x475))+(((-1.0)*x453))+x450+x457+(((-1.0)*x472))+x467+(((-1.0)*x465)));
IkReal x506=((((-1.0)*x479))+(((-1.0)*x481))+(((-1.0)*x501))+(((-1.0)*x485))+(((-1.0)*x489))+(((-1.0)*x495))+x487+x483+(((-1.0)*x493))+x499+x497+x491);
IkReal x507=((0.0021945811706)*r22);
IkReal x508=((0.0021945811706)*r21);
IkReal x509=((0.0021945811706)*r20);
IkReal x510=((0.32788)*npz*pz);
IkReal x511=((0.16394)*pp*r22);
IkReal x512=((0.32788)*npy*pz);
IkReal x513=((0.16394)*pp*r21);
IkReal x514=((0.32788)*npx*pz);
IkReal x515=((0.16394)*pp*r20);
IkReal x516=x77;
IkReal x517=(gclwh10_12*r22);
IkReal x518=(gclwh12_14*rxp1_2);
IkReal x519=((0.037935716)*x518);
IkReal x520=(gclwh12_8*rxp1_2);
IkReal x521=(gclwh14_14*rxp0_2);
IkReal x522=((0.037935716)*x521);
IkReal x523=(gclwh14_8*rxp0_2);
IkReal x524=((0.037935716)*rxp2_2);
IkReal x525=(gclwh4_14*x524);
IkReal x526=(gclwh4_8*rxp2_2);
IkReal x527=(gclwh6_12*r21);
IkReal x528=(gclwh8_12*r20);
IkReal x529=(gclwh10_12*npz*pz);
IkReal x530=(gclwh10_12*pp*r22);
IkReal x531=(gclwh6_12*npy*pz);
IkReal x532=(gclwh6_12*pp*r21);
IkReal x533=(gclwh8_12*npx*pz);
IkReal x534=(gclwh8_12*pp*r20);
IkReal x535=(gclwh10_11*r22);
IkReal x536=((0.01338649)*x535);
IkReal x537=(gclwh12_11*rxp1_2);
IkReal x538=((0.2314)*x537);
IkReal x539=(gclwh12_3*rxp1_2);
IkReal x540=(gclwh14_11*rxp0_2);
IkReal x541=((0.2314)*x540);
IkReal x542=(gclwh14_3*rxp0_2);
IkReal x543=(gclwh4_11*rxp2_2);
IkReal x544=((0.2314)*x543);
IkReal x545=(gclwh4_3*rxp2_2);
IkReal x546=(gclwh6_11*r21);
IkReal x547=((0.01338649)*x546);
IkReal x548=(gclwh8_11*r20);
IkReal x549=((0.01338649)*x548);
IkReal x550=(pp*x546);
IkReal x551=(gclwh10_11*npz*pz);
IkReal x552=((2.0)*x551);
IkReal x553=(pp*x535);
IkReal x554=(gclwh6_11*npy*pz);
IkReal x555=((2.0)*x554);
IkReal x556=(gclwh8_11*npx*pz);
IkReal x557=((2.0)*x556);
IkReal x558=(pp*x548);
IkReal x559=((0.01338649)*pz);
IkReal x560=(gclwh10_2*r22);
IkReal x561=((0.2314)*pz*rxp1_2);
IkReal x562=((0.2314)*pp);
IkReal x563=((0.2314)*pz*rxp0_2);
IkReal x564=((0.2314)*pz*rxp2_2);
IkReal x565=(gclwh6_2*r21);
IkReal x566=(gclwh8_2*r20);
IkReal x567=(pp*pz);
IkReal x568=((1.0)*pp*pz);
IkReal x569=pz*pz;
IkReal x570=((2.0)*npz*x569);
IkReal x571=((2.0)*npy*x569);
IkReal x572=((2.0)*npx*x569);
IkReal x573=((((-1.0)*gclwh12_2*x561))+((x560*x567))+(((-1.0)*x542*x562))+(((0.02677298)*x526))+(((-1.0)*x559*x565))+(((0.02677298)*x520))+(((-1.0)*gclwh8_2*x572))+(((-1.0)*x565*x568))+((x559*x566))+((x539*x562))+((x566*x567))+(((-0.02677298)*x523))+((gclwh14_2*x563))+(((-1.0)*gclwh10_2*x570))+((gclwh6_2*x571))+(((-1.0)*gclwh4_2*x564))+((x545*x562))+((x559*x560)));
IkReal x574=((0.015322176454)*r22);
IkReal x575=((0.26486044)*rxp1_2);
IkReal x576=((0.26486044)*rxp0_2);
IkReal x577=((0.075871432)*rxp2_2);
IkReal x578=((0.26486044)*rxp2_2);
IkReal x579=((0.015322176454)*r21);
IkReal x580=((0.015322176454)*r20);
IkReal x581=((2.2892)*npz*pz);
IkReal x582=((1.1446)*pp);
IkReal x583=((2.2892)*npy*pz);
IkReal x584=((2.2892)*npx*pz);
IkReal x585=(gclwh11_10*r22);
IkReal x586=((0.01338649)*x585);
IkReal x587=(gclwh13_1*rxp1_2);
IkReal x588=(gclwh13_10*rxp1_2);
IkReal x589=((0.2314)*x588);
IkReal x590=(gclwh15_1*rxp0_2);
IkReal x591=(gclwh15_10*rxp0_2);
IkReal x592=((0.2314)*x591);
IkReal x593=(gclwh5_1*rxp2_2);
IkReal x594=(gclwh5_10*rxp2_2);
IkReal x595=((0.2314)*x594);
IkReal x596=(gclwh7_10*r21);
IkReal x597=((0.01338649)*x596);
IkReal x598=(gclwh9_10*r20);
IkReal x599=((0.01338649)*x598);
IkReal x600=(pp*x585);
IkReal x601=(pp*x598);
IkReal x602=(gclwh11_10*npz*pz);
IkReal x603=((2.0)*x602);
IkReal x604=(gclwh7_10*npy*pz);
IkReal x605=((2.0)*x604);
IkReal x606=(pp*x596);
IkReal x607=(gclwh9_10*npx*pz);
IkReal x608=((2.0)*x607);
IkReal x609=(gclwh13_9*rxp1_2);
IkReal x610=(gclwh15_9*rxp0_2);
IkReal x611=(gclwh5_9*rxp2_2);
IkReal x612=(gclwh11_0*r22);
IkReal x613=(gclwh7_0*r21);
IkReal x614=(gclwh9_0*r20);
IkReal x615=((((-1.0)*x559*x613))+((gclwh15_0*x563))+(((-1.0)*gclwh13_0*x561))+(((-1.0)*gclwh11_0*x570))+(((0.02677298)*x609))+((x562*x593))+(((0.02677298)*x611))+((x559*x612))+(((-1.0)*gclwh5_0*x564))+((gclwh7_0*x571))+((x559*x614))+((x567*x614))+((x567*x612))+(((-0.02677298)*x610))+(((-1.0)*gclwh9_0*x572))+(((-1.0)*x568*x613))+(((-1.0)*x562*x590))+((x562*x587)));
IkReal x616=x199;
IkReal x617=(gclwh11_13*r22);
IkReal x618=(gclwh13_15*rxp1_2);
IkReal x619=((0.037935716)*x618);
IkReal x620=(gclwh15_15*rxp0_2);
IkReal x621=((0.037935716)*x620);
IkReal x622=(gclwh5_15*x524);
IkReal x623=(gclwh7_13*r21);
IkReal x624=(gclwh9_13*r20);
IkReal x625=(gclwh11_13*npz*pz);
IkReal x626=(gclwh11_13*pp*r22);
IkReal x627=(gclwh7_13*npy*pz);
IkReal x628=(gclwh7_13*pp*r21);
IkReal x629=(gclwh9_13*npx*pz);
IkReal x630=(gclwh9_13*pp*r20);
IkReal x631=((0.037935716)*rxp1_2);
IkReal x632=((0.037935716)*rxp0_2);
IkReal x633=x235;
IkReal x634=((0.0021945811706)*x406);
IkReal x635=(gclwh12_8*r21);
IkReal x636=((0.0021945811706)*x407);
IkReal x637=(gclwh14_8*r20);
IkReal x638=(gclwh4_14*x507);
IkReal x639=(gclwh4_8*r22);
IkReal x640=((0.32788)*x411);
IkReal x641=((0.16394)*x412);
IkReal x642=(gclwh12_8*npy*pz);
IkReal x643=(gclwh12_8*pp*r21);
IkReal x644=((0.32788)*x413);
IkReal x645=((0.16394)*x414);
IkReal x646=(gclwh14_8*npx*pz);
IkReal x647=(gclwh14_8*pp*r20);
IkReal x648=(gclwh4_14*x510);
IkReal x649=((0.16394)*x416);
IkReal x650=(gclwh4_8*npz*pz);
IkReal x651=(gclwh4_8*pp*r22);
IkReal x652=((0.2314)*x417);
IkReal x653=((0.01338649)*x418);
IkReal x654=(gclwh12_3*r21);
IkReal x655=((0.01338649)*x419);
IkReal x656=(gclwh14_3*r20);
IkReal x657=(gclwh1_3*r20);
IkReal x658=(gclwh3_3*r21);
IkReal x659=((0.01338649)*x420);
IkReal x660=(gclwh4_3*r22);
IkReal x661=((0.2314)*x421);
IkReal x662=((0.2314)*x422);
IkReal x663=((2.0)*x423);
IkReal x664=(gclwh12_3*npy*pz);
IkReal x665=(gclwh12_3*pp*r21);
IkReal x666=((2.0)*x425);
IkReal x667=(gclwh14_3*npx*pz);
IkReal x668=(gclwh14_3*pp*r20);
IkReal x669=(gclwh1_3*npx*pz);
IkReal x670=(gclwh1_3*pp*r20);
IkReal x671=(gclwh3_3*npy*pz);
IkReal x672=(gclwh3_3*pp*r21);
IkReal x673=((2.0)*x427);
IkReal x674=(gclwh4_3*npz*pz);
IkReal x675=(gclwh4_3*pp*r22);
IkReal x676=((0.2314)*pz);
IkReal x677=((0.2314)*npz*pz);
IkReal x678=pp*pp;
IkReal x679=((2.0)*pp);
IkReal x680=((1.0)*x678);
IkReal x681=(((gclwh6_2*x561))+((x667*x679))+(((-0.001548816893)*x637))+(((-1.0)*x435*x568))+(((-1.0)*gclwh4_8*x677))+((x433*x567))+((x658*x678))+(((-1.0)*x669*x679))+((gclwh3_2*x571))+(((-1.0)*x432*x568))+(((-1.0)*x445*x559))+(((-0.1157)*x647))+(((0.001548816893)*x635))+((x434*x559))+(((-1.0)*x671*x679))+(((-1.0)*x432*x559))+(((-1.0)*gclwh8_2*x563))+(((0.001548816893)*x639))+((x435*x559))+((x433*x559))+((gclwh14_8*npx*x676))+(((-1.0)*gclwh12_8*npy*x676))+((gclwh4_2*x570))+(((-1.0)*x656*x680))+(((0.1157)*x643))+((x660*x678))+(((-1.0)*x445*x568))+(((-1.0)*x664*x679))+(((-1.0)*gclwh14_2*x572))+((x654*x678))+(((-1.0)*x674*x679))+(((0.1157)*x651))+(((-1.0)*x434*x568))+(((-1.0)*x431*x676))+x676+((x657*x678))+((gclwh1_2*x572))+((gclwh12_2*x571)));
IkReal x682=(gclwh0_1*r20);
IkReal x683=((0.2314)*x478);
IkReal x684=(gclwh13_1*r21);
IkReal x685=((0.01338649)*x480);
IkReal x686=(gclwh15_1*r20);
IkReal x687=((0.01338649)*x482);
IkReal x688=(gclwh2_1*r21);
IkReal x689=(gclwh5_1*r22);
IkReal x690=((0.01338649)*x484);
IkReal x691=((0.2314)*x486);
IkReal x692=((0.2314)*x488);
IkReal x693=(gclwh0_1*npx*pz);
IkReal x694=(gclwh0_1*pp*r20);
IkReal x695=(gclwh13_1*npy*pz);
IkReal x696=(gclwh13_1*pp*r21);
IkReal x697=((2.0)*x490);
IkReal x698=(gclwh15_1*npx*pz);
IkReal x699=(gclwh15_1*pp*r20);
IkReal x700=((2.0)*x494);
IkReal x701=(gclwh2_1*npy*pz);
IkReal x702=(gclwh2_1*pp*r21);
IkReal x703=(gclwh5_1*npz*pz);
IkReal x704=(gclwh5_1*pp*r22);
IkReal x705=((2.0)*x498);
IkReal x706=(gclwh13_9*r21);
IkReal x707=(gclwh15_9*r20);
IkReal x708=(gclwh5_9*r22);
IkReal x709=(gclwh13_9*pp*r21);
IkReal x710=(gclwh15_9*pp*r20);
IkReal x711=(gclwh5_9*pp*r22);
IkReal x712=(((gclwh2_0*x571))+(((-0.001548816893)*x706))+(((-1.0)*x680*x689))+(((-1.0)*x679*x693))+(((-1.0)*x454*x568))+((x454*x559))+((gclwh0_0*x572))+((x455*x567))+(((-1.0)*x680*x684))+(((-1.0)*gclwh15_9*npx*x676))+((x678*x686))+(((-1.0)*x458*x676))+((x455*x559))+((gclwh5_9*x677))+((x678*x688))+((x448*x567))+(((-1.0)*gclwh13_0*x571))+(((-1.0)*x451*x568))+(((-1.0)*x679*x698))+((x447*x676))+((x459*x676))+(((0.1157)*x710))+((gclwh13_9*npy*x676))+((x446*x559))+((x448*x559))+(((-1.0)*x451*x559))+(((-1.0)*pz*x461))+((x679*x695))+((gclwh15_0*x572))+(((-0.1157)*x709))+((x678*x682))+x676+(((-0.1157)*x711))+(((-1.0)*gclwh5_0*x570))+((x679*x703))+(((-1.0)*x679*x701))+(((-0.001548816893)*x708))+(((0.001548816893)*x707)));
IkReal x713=x371;
IkReal x714=((0.0021945811706)*x449);
IkReal x715=((0.0021945811706)*x452);
IkReal x716=(gclwh5_15*x507);
IkReal x717=((0.32788)*x464);
IkReal x718=((0.16394)*x466);
IkReal x719=(gclwh13_9*npy*pz);
IkReal x720=((0.32788)*x469);
IkReal x721=((0.16394)*x471);
IkReal x722=(gclwh15_9*npx*pz);
IkReal x723=(gclwh5_15*x510);
IkReal x724=((0.16394)*x476);
IkReal x725=(gclwh5_9*npz*pz);
op[38]=((((-0.65576)*x412))+(((1.31152)*x415))+(((-0.52972088)*x410))+(((-0.0087783246824)*x408))+(((-0.52972088)*x405))+(((-0.0087783246824)*x406))+(((0.0087783246824)*x407))+(((1.31152)*x411))+(((-0.65576)*x416))+(((0.52972088)*x409))+(((0.65576)*x414))+(((-1.31152)*x413)));
op[39]=((-0.0805615456)+(((0.9256)*x422))+(((4.0)*x428))+(((-0.05354596)*x419))+(((4.0)*x424))+(((0.9256)*x417))+(((-0.9256)*x421))+(((0.05354596)*x418))+(((0.05354596)*x420))+(((-8.0)*x427))+(((-4.0)*x426))+(((8.0)*x425))+(((-8.0)*x423)));
op[40]=((0.0506004672)+x429);
op[41]=((((-1.0)*gclwh8_2*x438))+((gclwh4_2*x444))+(((0.1588)*x443))+((x433*x440))+(((-0.001062887306)*x432))+(((0.1588)*x439))+(((-0.1588)*x441))+(((0.1588)*x442))+(((-1.0)*x435*x440))+(((-1.0)*x432*x440))+(((0.001062887306)*x434))+(((0.001062887306)*x433))+(((0.001062887306)*x435))+(((-1.0)*gclwh4_2*x436))+x430+(((-0.01837316)*x431))+((gclwh6_2*x437))+(((-1.0)*x440*x445))+(((-1.0)*x434*x440)));
op[42]=(x472+x475+(((-1.0)*x470))+(((-2.3686)*x461))+(((-1.0)*x450))+(((0.031707240214)*x455))+(((4.7372)*x473))+(((0.031707240214)*x454))+(((-1.0)*x477))+((x448*x463))+(((-1.0)*x457))+(((-1.0)*x454*x463))+(((-1.0)*x451*x463))+(((0.031707240214)*x448))+(((-0.031707240214)*x451))+x453+(((-4.7372)*gclwh5_0*npz*pz))+(((-1.0)*x467))+(((4.7372)*x460))+(((-4.7372)*x462))+(((4.7372)*x468))+(((0.54809404)*x447))+(((0.031707240214)*x446))+((x455*x463))+x465+(((0.54809404)*x459))+(((-0.54809404)*x458)));
op[43]=((2.7513803328)+(((-1.0)*x491))+x479+(((-1.0)*x483))+(((-1.0)*x497))+x501+(((-1.0)*x499))+(((-1.0)*x487))+x489+x481+x485+x495+x493);
op[44]=((0.0805615456)+(((-8.0)*x498))+(((0.05354596)*x480))+(((0.9256)*x488))+(((8.0)*x494))+(((-8.0)*x490))+(((4.0)*x500))+(((-0.05354596)*x482))+(((-0.9256)*x486))+(((-4.0)*x496))+(((0.9256)*x478))+(((0.05354596)*x484))+(((4.0)*x492)));
op[45]=((((-1.31152)*x464))+(((0.65576)*x466))+(((1.31152)*x469))+(((-0.52972088)*x503))+(((0.0087783246824)*x449))+(((0.52972088)*x502))+(((-0.0087783246824)*x452))+(((0.0087783246824)*x456))+(((0.52972088)*x504))+(((-1.31152)*x474))+(((-0.65576)*x471))+(((0.65576)*x476)));
op[46]=((((-0.001062887306)*x451))+(((-1.0)*x440*x451))+(((0.1588)*x473))+x505+(((0.1588)*x460))+((gclwh9_0*x438))+(((0.01837316)*x447))+(((-0.1588)*x462))+((gclwh5_0*x436))+(((-1.0)*gclwh5_0*x444))+(((0.001062887306)*x446))+((x440*x448))+(((-1.0)*gclwh7_0*x437))+(((0.1588)*x468))+(((0.001062887306)*x448))+((x440*x455))+(((0.001062887306)*x454))+(((-1.0)*x440*x454))+(((-0.0794)*x461)));
op[47]=((0.0506004672)+x506);
op[48]=((((0.015853620107)*x517))+(((1.1843)*x534))+(((-1.1843)*x532))+(((-1.0)*x519))+(((2.3686)*x531))+(((-0.27404702)*x520))+(((-1.0)*x525))+(((-0.015853620107)*x527))+(((0.015853620107)*x528))+(((-0.27404702)*x526))+(((-2.3686)*x533))+(((0.27404702)*x523))+(((1.1843)*x530))+x516+(((-2.3686)*x529))+x522);
op[49]=(x538+(((-1.0)*x536))+x573+(((-1.0)*x549))+x550+x557+x552+(((-1.0)*x558))+(((-0.32767543328104)*x539))+(((-1.0)*x541))+(((0.32767543328104)*x542))+(((-1.0)*x553))+(((-1.0)*x555))+(((-0.32767543328104)*x545))+x544+x547);
op[50]=((0.375291448)+(((-0.02677298)*x535))+(((-2.0)*x553))+(((-0.02677298)*x548))+(((2.0)*x550))+(((-0.4628)*x540))+(((0.02677298)*x546))+(((0.4628)*x537))+(((4.0)*x551))+(((-2.0)*x558))+(((4.0)*x556))+(((0.4628)*x543))+(((-4.0)*x554)));
op[51]=(((gclwh4_2*x578))+(((-1.0)*gclwh14_2*x576))+(((-0.075871432)*x521))+(((-1.0)*gclwh10_2*x574))+(((-1.0)*x560*x582))+(((-0.2832336)*x523))+((gclwh4_14*x577))+((x565*x582))+(((0.2832336)*x520))+((gclwh6_2*x579))+((gclwh8_2*x584))+(((-1.0)*x566*x582))+(((0.2832336)*x526))+((gclwh10_2*x581))+(((-1.0)*gclwh6_2*x583))+(((-1.0)*gclwh8_2*x580))+(((0.075871432)*x518))+((gclwh12_2*x575)));
op[52]=((((-1.0)*x522))+(((-0.0794)*x533))+(((-0.00918658)*x523))+(((0.000531443653)*x517))+(((0.0397)*x534))+(((0.0794)*x531))+(((0.0397)*x530))+(((0.00918658)*x526))+x519+x516+(((0.00918658)*x520))+(((-0.0397)*x532))+(((0.000531443653)*x528))+(((-0.0794)*x529))+x525+(((-0.000531443653)*x527)));
op[53]=(x536+(((-0.00348625472104)*x539))+(((-0.00348625472104)*x545))+x573+(((-1.0)*x544))+(((-1.0)*x557))+x555+x558+x553+(((-1.0)*x550))+(((-1.0)*x552))+(((-1.0)*x547))+(((-1.0)*x538))+(((0.00348625472104)*x542))+x549+x541);
op[54]=(x615+(((-0.32767543328104)*x593))+(((0.32767543328104)*x590))+(((-1.0)*x603))+(((-1.0)*x606))+(((-1.0)*x589))+(((-0.32767543328104)*x587))+(((-1.0)*x597))+x586+(((-1.0)*x595))+x599+x592+(((-1.0)*x608))+x600+x601+x605);
op[55]=(x616+(((-1.0)*x622))+(((-2.3686)*x625))+(((-0.27404702)*x611))+(((-0.015853620107)*x623))+(((2.3686)*x627))+(((0.27404702)*x610))+x621+(((-1.1843)*x628))+(((-0.27404702)*x609))+(((0.015853620107)*x624))+(((-2.3686)*x629))+(((-1.0)*x619))+(((1.1843)*x626))+(((0.015853620107)*x617))+(((1.1843)*x630)));
op[56]=((((-1.0)*gclwh15_0*x576))+(((-0.2832336)*x611))+((gclwh9_0*x584))+((x582*x613))+(((-0.075871432)*x618))+(((-1.0)*gclwh5_15*x577))+(((-1.0)*x582*x614))+(((-1.0)*gclwh11_0*x574))+((gclwh13_0*x575))+((gclwh7_0*x579))+(((-1.0)*x582*x612))+((gclwh11_0*x581))+(((0.075871432)*x620))+((gclwh5_0*x578))+(((-1.0)*gclwh7_0*x583))+(((0.2832336)*x610))+(((-0.2832336)*x609))+(((-1.0)*gclwh9_0*x580)));
op[57]=((0.375291448)+(((-2.0)*x600))+(((-2.0)*x601))+(((0.4628)*x594))+(((0.4628)*x588))+(((-0.02677298)*x598))+(((-0.4628)*x591))+(((-0.02677298)*x585))+(((0.02677298)*x596))+(((-4.0)*x604))+(((4.0)*x607))+(((4.0)*x602))+(((2.0)*x606)));
op[58]=((((-1.0)*x592))+x615+(((-0.00348625472104)*x587))+(((-1.0)*x600))+(((-1.0)*x599))+(((-1.0)*x601))+(((0.00348625472104)*x590))+(((-0.00348625472104)*x593))+x589+x595+x597+x603+x608+x606+(((-1.0)*x605))+(((-1.0)*x586)));
op[59]=(x616+x619+(((0.00918658)*x611))+(((0.000531443653)*x617))+(((-0.00918658)*x610))+(((-1.0)*x621))+(((-0.0794)*x629))+x622+(((0.0794)*x627))+(((0.0397)*x630))+(((0.0397)*x626))+(((-0.0794)*x625))+(((-0.0397)*x628))+(((0.00918658)*x609))+(((0.000531443653)*x624))+(((-0.000531443653)*x623)));
op[60]=((((2.3686)*x642))+(((-2.3686)*x646))+(((-0.015853620107)*x639))+(((-1.0)*x644))+(((-0.015853620107)*x635))+(((-1.0)*x641))+(((0.015853620107)*x637))+(((-1.1843)*x643))+(((2.3686)*x650))+(((-0.27404702)*x410))+x633+x636+(((-1.0)*x638))+(((-0.27404702)*x405))+(((-1.1843)*x651))+(((-1.0)*x634))+x648+x640+x645+(((1.1843)*x647))+(((0.27404702)*x409))+(((-1.0)*x649)));
op[61]=((1.4294428136)+(((2.8321126472)*x671))+(((-0.0189560238153082)*x660))+(((2.8321126472)*x674))+(((-1.4026698336)*x665))+(((-2.8321126472)*x667))+(((0.0189560238153082)*x656))+(((-1.4026698336)*x675))+(((-1.4294428136)*x670))+(((-0.0189560238153082)*x654))+x428+x424+(((1.4026698336)*x668))+(((-1.0)*x661))+x659+x652+x653+(((-1.0)*x426))+(((-1.0)*x663))+(((-1.4294428136)*x672))+(((2.8321126472)*x669))+(((-1.0)*x673))+(((2.8321126472)*x664))+x666+x662+(((0.0189560238153082)*x657))+(((-1.0)*x655))+x681+(((0.0189560238153082)*x658)));
op[62]=((0.1477860672)+x429);
op[63]=((((0.015322176454)*x432))+(((-2.2892)*x439))+((x432*x582))+(((-2.448)*x650))+(((-0.015322176454)*x434))+(((2.2892)*x441))+(((-0.015322176454)*x435))+(((-1.0)*gclwh6_2*x575))+(((-1.0)*x433*x582))+(((-1.224)*x647))+((x435*x582))+(((1.224)*x643))+((x445*x582))+(((0.01638506376)*x635))+((x434*x582))+(((-0.015322176454)*x433))+((gclwh4_2*x574))+(((2.448)*x646))+(((0.01638506376)*x639))+(((1.224)*x651))+(((0.26486044)*x431))+((gclwh8_2*x576))+(((-0.01638506376)*x637))+(((-2.2892)*x442))+(((-2.448)*x642))+x430+(((-2.2892)*x443))+(((-1.0)*gclwh4_2*x581)));
op[64]=((((-0.0794)*x650))+(((-0.000531443653)*x637))+(((-1.0)*x645))+(((-0.00918658)*x410))+(((-0.0397)*x647))+(((0.00918658)*x409))+(((0.000531443653)*x635))+x638+x633+x634+(((-0.0794)*x642))+(((-1.0)*x636))+(((0.0397)*x643))+(((0.0397)*x651))+(((0.000531443653)*x639))+(((0.0794)*x646))+(((-0.00918658)*x405))+x649+x641+x644+(((-1.0)*x648))+(((-1.0)*x640)));
op[65]=((-0.0284524136)+(((-1.0)*x659))+(((-1.0)*x424))+(((0.0301318472)*x664))+(((-0.0016794336)*x665))+(((-1.0)*x652))+(((-1.0)*x666))+(((0.000201679835612164)*x658))+x426+(((-0.000201679835612164)*x660))+(((-0.000201679835612164)*x654))+(((-0.0016794336)*x675))+x655+(((-1.0)*x662))+(((0.0301318472)*x674))+(((0.000201679835612164)*x657))+(((-0.0284524136)*x672))+(((0.000201679835612164)*x656))+(((-1.0)*x653))+(((0.0301318472)*x671))+x663+x661+(((-0.0301318472)*x667))+(((-1.0)*x428))+x673+(((-0.0284524136)*x670))+(((0.0301318472)*x669))+x681+(((0.0016794336)*x668)));
op[66]=((-1.4294428136)+(((-2.8321126472)*x695))+(((2.8321126472)*x693))+(((1.4026698336)*x704))+(((2.8321126472)*x701))+(((-1.0)*x697))+(((-1.0)*x687))+(((1.4026698336)*x696))+x500+(((-1.0)*x691))+(((0.0189560238153082)*x684))+(((-1.4294428136)*x702))+(((0.0189560238153082)*x688))+x700+(((0.0189560238153082)*x682))+x712+(((-0.0189560238153082)*x686))+(((0.0189560238153082)*x689))+(((-1.4294428136)*x694))+x692+x690+(((-1.0)*x496))+(((2.8321126472)*x698))+x685+x683+x492+(((-1.0)*x705))+(((-2.8321126472)*x703))+(((-1.4026698336)*x699)));
op[67]=((((2.3686)*x722))+(((1.1843)*x711))+(((-1.0)*x721))+(((0.27404702)*x502))+(((-1.0)*x723))+(((-0.27404702)*x503))+(((1.1843)*x709))+(((-2.3686)*x719))+(((-1.1843)*x710))+(((-1.0)*x715))+x714+x716+x713+x718+(((-2.3686)*x725))+(((0.015853620107)*x706))+(((0.27404702)*x504))+(((-1.0)*x717))+(((0.015853620107)*x708))+(((-0.015853620107)*x707))+x720+x724);
op[68]=((((-1.0)*gclwh5_0*x574))+(((-0.26486044)*x447))+(((-0.015322176454)*x446))+(((-2.2892)*x473))+((gclwh7_0*x575))+(((0.01638506376)*x706))+(((0.015322176454)*x451))+x505+(((1.1446)*x461))+(((-2.448)*x719))+(((-1.224)*x710))+(((0.01638506376)*x708))+(((-2.448)*x725))+(((-2.2892)*x468))+(((1.224)*x709))+((x451*x582))+(((2.448)*x722))+(((-2.2892)*x460))+(((1.224)*x711))+(((-0.015322176454)*x454))+((x454*x582))+(((-1.0)*x455*x582))+((gclwh5_0*x581))+(((-0.015322176454)*x448))+(((-1.0)*x448*x582))+(((-1.0)*gclwh9_0*x576))+(((-0.01638506376)*x707))+(((2.2892)*x462)));
op[69]=((0.1477860672)+x506);
op[70]=((0.0284524136)+(((-0.0284524136)*x702))+(((-1.0)*x700))+(((-0.0301318472)*x695))+(((-1.0)*x692))+(((0.000201679835612164)*x684))+(((0.000201679835612164)*x682))+(((-1.0)*x685))+(((-1.0)*x690))+(((-1.0)*x492))+(((0.0301318472)*x698))+(((0.0301318472)*x693))+x705+(((-0.000201679835612164)*x686))+(((0.0016794336)*x696))+(((-0.0284524136)*x694))+x712+(((0.000201679835612164)*x688))+(((-0.0016794336)*x699))+(((0.0016794336)*x704))+(((0.000201679835612164)*x689))+x691+x697+(((0.0301318472)*x701))+(((-1.0)*x500))+(((-0.0301318472)*x703))+x687+x496+(((-1.0)*x683)));
op[71]=((((-0.0397)*x709))+(((0.0397)*x710))+(((-1.0)*x724))+(((-1.0)*x714))+(((-1.0)*x718))+(((-0.0794)*x722))+(((0.0794)*x719))+(((-0.000531443653)*x708))+x717+x715+x713+(((-0.0397)*x711))+(((-1.0)*x716))+(((0.0794)*x725))+(((0.00918658)*x502))+(((-0.000531443653)*x706))+(((-0.00918658)*x503))+(((0.00918658)*x504))+(((0.000531443653)*x707))+x723+x721+(((-1.0)*x720)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x726=htj1*htj1;
CheckValue<IkReal> x727=IKPowWithIntegerCheck(((1.0)+x726),-1);
if(!x727.valid){
continue;
}
cj1array[numsolutions]=((x727.value)*(((1.0)+(((-1.0)*x726)))));
CheckValue<IkReal> x728=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x728.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x728.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x729=htj2*htj2;
CheckValue<IkReal> x730=IKPowWithIntegerCheck(((1.0)+x729),-1);
if(!x730.valid){
continue;
}
cj2array[numsolutions]=((x730.value)*(((1.0)+(((-1.0)*x729)))));
CheckValue<IkReal> x731=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x731.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x731.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x732=htj3*htj3;
CheckValue<IkReal> x733=IKPowWithIntegerCheck(((1.0)+x732),-1);
if(!x733.valid){
continue;
}
cj3array[numsolutions]=((x733.value)*(((1.0)+(((-1.0)*x732)))));
CheckValue<IkReal> x734=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x734.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x734.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x735=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x735);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x735);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x736=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x736);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x736);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(r22,-1);
if(!x737.valid){
continue;
}
CheckValue<IkReal> x738=IKPowWithIntegerCheck(sj3,-1);
if(!x738.valid){
continue;
}
sj4array[0]=((x737.value)*(x738.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x739=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x739);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x739);
IkReal x740=(r10*sj3);
IkReal x741=(cj3*cj4*r11);
IkReal x742=(cj1*cj2*r01*sj4);
IkReal x743=(r01*sj1*sj2*sj4);
IkReal x744=(r00*sj3);
IkReal x745=(cj3*cj4*r01);
IkReal x746=(cj1*cj2*r11*sj4);
IkReal x747=(r11*sj1*sj2*sj4);
IkReal x748=(cj3*r12*sj4);
IkReal x749=(cj1*cj2*cj4*r02);
IkReal x750=(cj4*r02*sj1*sj2);
IkReal x751=((((-12.0)*x749))+(((-12.0)*x748))+(((12.0)*x750)));
IkReal x752=((4.0)*sj3);
IkReal x753=(r11*x752);
IkReal x754=((4.0)*cj3*cj4);
IkReal x755=(r10*x754);
IkReal x756=((4.0)*cj1*cj2*sj4);
IkReal x757=(r00*x756);
IkReal x758=((4.0)*sj1*sj2*sj4);
IkReal x759=(r00*x758);
IkReal x760=((((-1.0)*x755))+x753+x757+(((-1.0)*x759)));
IkReal x761=(cj3*r02*sj4);
IkReal x762=(cj1*cj2*cj4*r12);
IkReal x763=(cj4*r12*sj1*sj2);
IkReal x764=(r01*x752);
IkReal x765=(r00*x754);
IkReal x766=(r10*x756);
IkReal x767=(r10*x758);
IkReal x768=((((-1.0)*x765))+(((-1.0)*x766))+x764+x767);
IkReal x769=((((-12.0)*x761))+(((12.0)*x762))+(((-12.0)*x763)));
j5eval[0]=((IKabs(((((-8.0)*x745))+(((-8.0)*x744))+(((8.0)*x747))+(((-8.0)*x746)))))+(((0.5)*(IKabs(((((-1.0)*x753))+(((-1.0)*x757))+x759+x755+x751)))))+(IKabs(((((-8.0)*x741))+(((-8.0)*x740))+(((-8.0)*x743))+(((8.0)*x742)))))+(((0.5)*(IKabs(((((-4.0)*x763))+(((-4.0)*x761))+x768+(((4.0)*x762)))))))+(((0.5)*(IKabs((x769+x768)))))+(((0.5)*(IKabs((x760+x751)))))+(((0.5)*(IKabs(((((-16.0)*x740))+(((16.0)*x742))+(((-16.0)*x741))+(((-16.0)*x743)))))))+(((0.5)*(IKabs(((((-1.0)*x767))+x769+x765+x766+(((-1.0)*x764)))))))+(((0.5)*(IKabs(((((4.0)*x750))+x760+(((-4.0)*x749))+(((-4.0)*x748)))))))+(((0.5)*(IKabs(((((16.0)*x747))+(((-16.0)*x746))+(((-16.0)*x744))+(((-16.0)*x745))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x770=(cj3*r12*sj4);
IkReal x771=(cj1*cj2*cj4*r02);
IkReal x772=(cj4*r02*sj1*sj2);
IkReal x773=((((4.0)*x772))+(((-4.0)*x770))+(((-4.0)*x771)));
IkReal x774=((4.0)*r11*sj3);
IkReal x775=((((4.0)*r10))*((cj3*cj4)));
IkReal x776=((4.0)*r00);
IkReal x777=(cj1*cj2*sj4*x776);
IkReal x778=(sj1*sj2*sj4*x776);
IkReal x779=((((-1.0)*x775))+(((-1.0)*x778))+x777+x774);
IkReal x780=(r10*sj3);
IkReal x781=(cj3*cj4*r11);
IkReal x782=(cj1*cj2*r01*sj4);
IkReal x783=(r01*sj1*sj2*sj4);
IkReal x784=((((-8.0)*x783))+(((-8.0)*x781))+(((-8.0)*x780))+(((8.0)*x782)));
IkReal x785=((((12.0)*x772))+(((-12.0)*x771))+(((-12.0)*x770)));
IkReal x786=((((-1.0)*x774))+(((-1.0)*x777))+x778+x775);
op[0]=(x779+x773);
op[1]=x784;
op[2]=(x785+x779);
op[3]=((((16.0)*x782))+(((-16.0)*x783))+(((-16.0)*x780))+(((-16.0)*x781)));
op[4]=(x786+x785);
op[5]=x784;
op[6]=(x786+x773);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x787=((4.0)*r01*sj3);
IkReal x788=((((4.0)*r00))*((cj3*cj4)));
IkReal x789=((4.0)*r10);
IkReal x790=(cj1*cj2*sj4*x789);
IkReal x791=(sj1*sj2*sj4*x789);
IkReal x792=((((-1.0)*x787))+x788+(((-1.0)*x791))+x790);
IkReal x793=(cj3*r02*sj4);
IkReal x794=((-4.0)*x793);
IkReal x795=(cj1*cj2*cj4*r12);
IkReal x796=((4.0)*x795);
IkReal x797=(cj4*r12*sj1*sj2);
IkReal x798=((-4.0)*x797);
IkReal x799=(r00*sj3);
IkReal x800=(cj3*cj4*r01);
IkReal x801=(cj1*cj2*r11*sj4);
IkReal x802=(r11*sj1*sj2*sj4);
IkReal x803=((((-8.0)*x801))+(((-8.0)*x800))+(((8.0)*x802))+(((-8.0)*x799)));
IkReal x804=((((-12.0)*x797))+(((-12.0)*x793))+(((12.0)*x795)));
IkReal x805=(x787+(((-1.0)*x790))+(((-1.0)*x788))+x791);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x804+x805))))+((x803*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x805+x796+x794+x798))))+(((htj5*htj5*htj5)*(((((-16.0)*x799))+(((-16.0)*x800))+(((-16.0)*x801))+(((16.0)*x802))))))+(((htj5*htj5)*((x804+x792))))+((htj5*x803))+x796+x794+x798+x792);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x806=(sj4*sj5);
IkReal x807=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x807))+(((-1.0)*(1.0)*cj4*r02))+((r01*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x807))+(((-1.0)*r11*x806))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x807))+(((-1.0)*(1.0)*cj4*r02))+((r01*x806))))+IKsqr((((r10*x807))+(((-1.0)*r11*x806))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x807))+(((-1.0)*(1.0)*cj4*r02))+((r01*x806))), (((r10*x807))+(((-1.0)*r11*x806))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x808=IKcos(j0);
IkReal x809=((1.0)*cj4);
IkReal x810=(sj4*sj5);
IkReal x811=((1.0)*cj5*sj4);
IkReal x812=IKsin(j0);
IkReal x813=((1.0)*x812);
IkReal x814=((0.1157)*cj5);
IkReal x815=((0.1157)*sj5);
IkReal x816=((0.612)*cj1);
IkReal x817=((0.5723)*cj1*cj2);
IkReal x818=(sj1*sj2);
IkReal x819=(x808*x818);
IkReal x820=(x812*x818);
IkReal x821=(cj3*sj4);
IkReal x822=(cj5*sj3);
IkReal x823=(sj3*sj5);
IkReal x824=(cj3*cj4*sj5);
IkReal x825=(cj1*cj2);
IkReal x826=((1.0)*x808);
IkReal x827=((1.0)*cj3*cj4*cj5);
IkReal x828=(cj3*cj5);
IkReal x829=(cj3*sj5);
IkReal x830=((1.0)*sj3*sj4);
IkReal x831=(cj4*cj5*sj3);
IkReal x832=(cj1*sj2);
IkReal x833=(cj2*sj1);
IkReal x834=((1.0)*cj4*sj3*sj5);
evalcond[0]=(x808+((r11*x810))+(((-1.0)*r10*x811))+(((-1.0)*r12*x809)));
evalcond[1]=(((r01*x810))+(((-1.0)*x813))+(((-1.0)*r00*x811))+(((-1.0)*r02*x809)));
evalcond[2]=((((-1.0)*r00*x815))+(((-1.0)*(1.0)*px))+((x808*x817))+(((-0.5723)*x819))+(((-1.0)*r01*x814))+((x808*x816))+(((-0.16394)*x812)));
evalcond[3]=((((-0.5723)*x820))+(((-1.0)*r11*x814))+(((-1.0)*r10*x815))+(((-1.0)*(1.0)*py))+(((0.16394)*x808))+((x812*x816))+((x812*x817)));
evalcond[4]=(((r01*x824))+((r02*x821))+(((-1.0)*r00*x827))+x819+((r00*x823))+((r01*x822))+(((-1.0)*x825*x826)));
evalcond[5]=((((-1.0)*r10*x827))+((r11*x822))+((r11*x824))+((r12*x821))+x820+((r10*x823))+(((-1.0)*x813*x825)));
evalcond[6]=((((-1.0)*r02*x830))+(((-1.0)*r01*x834))+((r01*x828))+(((-1.0)*x826*x832))+((r00*x831))+(((-1.0)*x826*x833))+((r00*x829)));
evalcond[7]=((((-1.0)*r12*x830))+((r11*x828))+(((-1.0)*x813*x833))+(((-1.0)*x813*x832))+(((-1.0)*r11*x834))+((r10*x831))+((r10*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(cj3,-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(r22,-1);
if(!x836.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x835.value)*(x836.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x837=((1.0)*r22);
evalcond[0]=((-1.0)*x837*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x837*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x838=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x838);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x838);
IkReal x839=(r10*sj3);
IkReal x840=(cj3*cj4*r11);
IkReal x841=(cj1*cj2*r01*sj4);
IkReal x842=(r01*sj1*sj2*sj4);
IkReal x843=(r00*sj3);
IkReal x844=(cj3*cj4*r01);
IkReal x845=(cj1*cj2*r11*sj4);
IkReal x846=(r11*sj1*sj2*sj4);
IkReal x847=(cj3*r12*sj4);
IkReal x848=(cj1*cj2*cj4*r02);
IkReal x849=(cj4*r02*sj1*sj2);
IkReal x850=((((12.0)*x849))+(((-12.0)*x847))+(((-12.0)*x848)));
IkReal x851=((4.0)*sj3);
IkReal x852=(r11*x851);
IkReal x853=((4.0)*cj3*cj4);
IkReal x854=(r10*x853);
IkReal x855=((4.0)*cj1*cj2*sj4);
IkReal x856=(r00*x855);
IkReal x857=((4.0)*sj1*sj2*sj4);
IkReal x858=(r00*x857);
IkReal x859=((((-1.0)*x854))+x852+x856+(((-1.0)*x858)));
IkReal x860=(cj3*r02*sj4);
IkReal x861=(cj1*cj2*cj4*r12);
IkReal x862=(cj4*r12*sj1*sj2);
IkReal x863=(r01*x851);
IkReal x864=(r00*x853);
IkReal x865=(r10*x855);
IkReal x866=(r10*x857);
IkReal x867=((((-1.0)*x864))+(((-1.0)*x865))+x866+x863);
IkReal x868=((((-12.0)*x862))+(((-12.0)*x860))+(((12.0)*x861)));
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x852))+x858+x850+x854+(((-1.0)*x856)))))))+(((0.5)*(IKabs(((((-1.0)*x866))+x868+x865+x864+(((-1.0)*x863)))))))+(((0.5)*(IKabs(((((-16.0)*x845))+(((16.0)*x846))+(((-16.0)*x843))+(((-16.0)*x844)))))))+(((0.5)*(IKabs(((((-16.0)*x842))+(((16.0)*x841))+(((-16.0)*x840))+(((-16.0)*x839)))))))+(IKabs(((((8.0)*x841))+(((-8.0)*x840))+(((-8.0)*x842))+(((-8.0)*x839)))))+(((0.5)*(IKabs((x867+x868)))))+(IKabs(((((-8.0)*x843))+(((-8.0)*x845))+(((-8.0)*x844))+(((8.0)*x846)))))+(((0.5)*(IKabs(((((-4.0)*x848))+x859+(((4.0)*x849))+(((-4.0)*x847)))))))+(((0.5)*(IKabs((x867+(((-4.0)*x860))+(((4.0)*x861))+(((-4.0)*x862)))))))+(((0.5)*(IKabs((x859+x850))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x869=(cj3*r12*sj4);
IkReal x870=(cj1*cj2*cj4*r02);
IkReal x871=(cj4*r02*sj1*sj2);
IkReal x872=((((4.0)*x871))+(((-4.0)*x870))+(((-4.0)*x869)));
IkReal x873=((4.0)*r11*sj3);
IkReal x874=((((4.0)*r10))*((cj3*cj4)));
IkReal x875=((4.0)*r00);
IkReal x876=(cj1*cj2*sj4*x875);
IkReal x877=(sj1*sj2*sj4*x875);
IkReal x878=((((-1.0)*x874))+(((-1.0)*x877))+x873+x876);
IkReal x879=(r10*sj3);
IkReal x880=(cj3*cj4*r11);
IkReal x881=(cj1*cj2*r01*sj4);
IkReal x882=(r01*sj1*sj2*sj4);
IkReal x883=((((-8.0)*x880))+(((-8.0)*x879))+(((8.0)*x881))+(((-8.0)*x882)));
IkReal x884=((((12.0)*x871))+(((-12.0)*x870))+(((-12.0)*x869)));
IkReal x885=((((-1.0)*x876))+x877+x874+(((-1.0)*x873)));
op[0]=(x872+x878);
op[1]=x883;
op[2]=(x884+x878);
op[3]=((((16.0)*x881))+(((-16.0)*x880))+(((-16.0)*x882))+(((-16.0)*x879)));
op[4]=(x885+x884);
op[5]=x883;
op[6]=(x885+x872);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x886=((4.0)*r01*sj3);
IkReal x887=((((4.0)*r00))*((cj3*cj4)));
IkReal x888=((4.0)*r10);
IkReal x889=(cj1*cj2*sj4*x888);
IkReal x890=(sj1*sj2*sj4*x888);
IkReal x891=((((-1.0)*x886))+x889+x887+(((-1.0)*x890)));
IkReal x892=(cj3*r02*sj4);
IkReal x893=((-4.0)*x892);
IkReal x894=(cj1*cj2*cj4*r12);
IkReal x895=((4.0)*x894);
IkReal x896=(cj4*r12*sj1*sj2);
IkReal x897=((-4.0)*x896);
IkReal x898=(r00*sj3);
IkReal x899=(cj3*cj4*r01);
IkReal x900=(cj1*cj2*r11*sj4);
IkReal x901=(r11*sj1*sj2*sj4);
IkReal x902=((((8.0)*x901))+(((-8.0)*x898))+(((-8.0)*x899))+(((-8.0)*x900)));
IkReal x903=((((-12.0)*x892))+(((-12.0)*x896))+(((12.0)*x894)));
IkReal x904=(x886+(((-1.0)*x887))+x890+(((-1.0)*x889)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x898))+(((-16.0)*x899))+(((16.0)*x901))+(((-16.0)*x900))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x904+x895+x897+x893))))+((htj5*x902))+((x902*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x904+x903))))+(((htj5*htj5)*((x903+x891))))+x895+x897+x891+x893);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x905=(sj4*sj5);
IkReal x906=(cj5*sj4);
if( IKabs((((r01*x905))+(((-1.0)*r00*x906))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x906))+(((-1.0)*r11*x905))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x905))+(((-1.0)*r00*x906))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr((((r10*x906))+(((-1.0)*r11*x905))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x905))+(((-1.0)*r00*x906))+(((-1.0)*(1.0)*cj4*r02))), (((r10*x906))+(((-1.0)*r11*x905))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x907=IKcos(j0);
IkReal x908=((1.0)*cj4);
IkReal x909=(sj4*sj5);
IkReal x910=((1.0)*cj5*sj4);
IkReal x911=IKsin(j0);
IkReal x912=((1.0)*x911);
IkReal x913=((0.1157)*cj5);
IkReal x914=((0.1157)*sj5);
IkReal x915=((0.612)*cj1);
IkReal x916=((0.5723)*cj1*cj2);
IkReal x917=(sj1*sj2);
IkReal x918=(x907*x917);
IkReal x919=(x911*x917);
IkReal x920=(cj3*sj4);
IkReal x921=(cj5*sj3);
IkReal x922=(sj3*sj5);
IkReal x923=(cj3*cj4*sj5);
IkReal x924=(cj1*cj2);
IkReal x925=((1.0)*x907);
IkReal x926=((1.0)*cj3*cj4*cj5);
IkReal x927=(cj3*cj5);
IkReal x928=(cj3*sj5);
IkReal x929=((1.0)*sj3*sj4);
IkReal x930=(cj4*cj5*sj3);
IkReal x931=(cj1*sj2);
IkReal x932=(cj2*sj1);
IkReal x933=((1.0)*cj4*sj3*sj5);
evalcond[0]=(x907+(((-1.0)*r12*x908))+(((-1.0)*r10*x910))+((r11*x909)));
evalcond[1]=(((r01*x909))+(((-1.0)*r00*x910))+(((-1.0)*r02*x908))+(((-1.0)*x912)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x913))+((x907*x916))+(((-1.0)*r00*x914))+(((-0.5723)*x918))+((x907*x915))+(((-0.16394)*x911)));
evalcond[3]=((((-1.0)*(1.0)*py))+((x911*x916))+(((-1.0)*r11*x913))+(((0.16394)*x907))+(((-1.0)*r10*x914))+(((-0.5723)*x919))+((x911*x915)));
evalcond[4]=((((-1.0)*r00*x926))+((r01*x923))+x918+((r00*x922))+(((-1.0)*x924*x925))+((r01*x921))+((r02*x920)));
evalcond[5]=(((r11*x923))+((r11*x921))+x919+((r10*x922))+((r12*x920))+(((-1.0)*r10*x926))+(((-1.0)*x912*x924)));
evalcond[6]=((((-1.0)*x925*x932))+(((-1.0)*x925*x931))+(((-1.0)*r02*x929))+((r00*x928))+((r00*x930))+(((-1.0)*r01*x933))+((r01*x927)));
evalcond[7]=(((r10*x928))+((r10*x930))+(((-1.0)*r12*x929))+(((-1.0)*r11*x933))+((r11*x927))+(((-1.0)*x912*x931))+(((-1.0)*x912*x932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x934=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x934);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x934);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x935=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x935);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x935);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x936=IKPowWithIntegerCheck(r22,-1);
if(!x936.valid){
continue;
}
CheckValue<IkReal> x937=IKPowWithIntegerCheck(sj3,-1);
if(!x937.valid){
continue;
}
sj4array[0]=((x936.value)*(x937.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x938=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x938);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x938);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x939=((4.0)*cj1*r01);
IkReal x940=(cj2*cj3*x939);
IkReal x941=(sj2*sj3*x939);
IkReal x942=((4.0)*r01*sj1);
IkReal x943=(cj2*sj3*x942);
IkReal x944=(cj3*sj2*x942);
IkReal x945=((4.0)*r00);
IkReal x946=(cj1*cj2*cj4*sj3*x945);
IkReal x947=(cj1*cj3*cj4*sj2*x945);
IkReal x948=(cj2*cj3*cj4*sj1*x945);
IkReal x949=(cj4*sj1*sj2*sj3*x945);
IkReal x950=((((-1.0)*x940))+(((-1.0)*x947))+(((-1.0)*x948))+(((-1.0)*x946))+x943+x941+x944+x949);
IkReal x951=(cj1*cj2*cj3*r00);
IkReal x952=(cj1*r00*sj2*sj3);
IkReal x953=(cj2*r00*sj1*sj3);
IkReal x954=(cj3*r00*sj1*sj2);
IkReal x955=(cj1*cj2*cj4*r01*sj3);
IkReal x956=(cj1*cj3*cj4*r01*sj2);
IkReal x957=(cj2*cj3*cj4*r01*sj1);
IkReal x958=(cj4*r01*sj1*sj2*sj3);
IkReal x959=((((8.0)*x951))+(((-8.0)*x957))+(((-8.0)*x955))+(((-8.0)*x953))+(((-8.0)*x954))+(((-8.0)*x952))+(((8.0)*x958))+(((-8.0)*x956)));
IkReal x960=((((-1.0)*x943))+(((-1.0)*x941))+(((-1.0)*x944))+(((-1.0)*x949))+x946+x947+x940+x948);
op[0]=x950;
op[1]=x959;
op[2]=x950;
op[3]=((((16.0)*x958))+(((-16.0)*x952))+(((-16.0)*x956))+(((-16.0)*x955))+(((16.0)*x951))+(((-16.0)*x957))+(((-16.0)*x954))+(((-16.0)*x953)));
op[4]=x960;
op[5]=x959;
op[6]=x960;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x961=(sj4*sj5);
IkReal x962=(cj5*sj4);
if( IKabs((((r01*x961))+(((-1.0)*r00*x962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x961))+((r10*x962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x961))+(((-1.0)*r00*x962))))+IKsqr(((((-1.0)*r11*x961))+((r10*x962))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x961))+(((-1.0)*r00*x962))), ((((-1.0)*r11*x961))+((r10*x962))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x963=IKcos(j0);
IkReal x964=(sj4*sj5);
IkReal x965=((1.0)*cj5*sj4);
IkReal x966=IKsin(j0);
IkReal x967=((1.0)*x966);
IkReal x968=(cj5*sj3);
IkReal x969=(sj3*sj5);
IkReal x970=(sj1*sj2);
IkReal x971=(x963*x970);
IkReal x972=(cj3*cj4*sj5);
IkReal x973=(cj1*cj2);
IkReal x974=((1.0)*x963);
IkReal x975=((1.0)*cj3*cj4*cj5);
IkReal x976=(x966*x970);
IkReal x977=(cj3*cj5);
IkReal x978=(cj3*sj5);
IkReal x979=(cj4*cj5*sj3);
IkReal x980=(cj1*sj2);
IkReal x981=(cj2*sj1);
IkReal x982=((1.0)*cj4*sj3*sj5);
IkReal x983=((0.1157)*cj5);
IkReal x984=((0.1157)*sj5);
IkReal x985=((0.612)*cj1);
IkReal x986=((0.5723)*cj1*cj2);
evalcond[0]=(((r11*x964))+(((-1.0)*r10*x965))+x963);
evalcond[1]=(((r01*x964))+(((-1.0)*r00*x965))+(((-1.0)*x967)));
evalcond[2]=((((-1.0)*x973*x974))+((r01*x972))+(((-1.0)*r00*x975))+x971+((r00*x969))+((r01*x968)));
evalcond[3]=((((-1.0)*r10*x975))+(((-1.0)*x967*x973))+((r10*x969))+x976+((r11*x972))+((r11*x968)));
evalcond[4]=(((r00*x979))+((r00*x978))+(((-1.0)*r01*x982))+((r01*x977))+(((-1.0)*x974*x981))+(((-1.0)*x974*x980)));
evalcond[5]=((((-1.0)*x967*x981))+(((-1.0)*r11*x982))+(((-1.0)*x967*x980))+((r11*x977))+((r10*x979))+((r10*x978)));
evalcond[6]=(((x963*x985))+(((-1.0)*(1.0)*px))+((x963*x986))+(((-0.5723)*x971))+(((-1.0)*r01*x983))+(((-1.0)*r00*x984))+(((-0.16394)*x966)));
evalcond[7]=((((-1.0)*(1.0)*py))+((x966*x985))+(((0.16394)*x963))+(((-0.5723)*x976))+((x966*x986))+(((-1.0)*r10*x984))+(((-1.0)*r11*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x987=IKPowWithIntegerCheck(cj3,-1);
if(!x987.valid){
continue;
}
CheckValue<IkReal> x988=IKPowWithIntegerCheck(r22,-1);
if(!x988.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x987.value)*(x988.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x989=((1.0)*r22);
evalcond[0]=((-1.0)*x989*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x989*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x990=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x990);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x990);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x991=((4.0)*cj1*r01);
IkReal x992=(cj2*cj3*x991);
IkReal x993=(sj2*sj3*x991);
IkReal x994=((4.0)*r01*sj1);
IkReal x995=(cj2*sj3*x994);
IkReal x996=(cj3*sj2*x994);
IkReal x997=((4.0)*r00);
IkReal x998=(cj1*cj2*cj4*sj3*x997);
IkReal x999=(cj1*cj3*cj4*sj2*x997);
IkReal x1000=(cj2*cj3*cj4*sj1*x997);
IkReal x1001=(cj4*sj1*sj2*sj3*x997);
IkReal x1002=((((-1.0)*x992))+(((-1.0)*x999))+(((-1.0)*x998))+x1001+x996+x995+x993+(((-1.0)*x1000)));
IkReal x1003=(cj1*cj2*cj3*r00);
IkReal x1004=(cj1*r00*sj2*sj3);
IkReal x1005=(cj2*r00*sj1*sj3);
IkReal x1006=(cj3*r00*sj1*sj2);
IkReal x1007=(cj1*cj2*cj4*r01*sj3);
IkReal x1008=(cj1*cj3*cj4*r01*sj2);
IkReal x1009=(cj2*cj3*cj4*r01*sj1);
IkReal x1010=(cj4*r01*sj1*sj2*sj3);
IkReal x1011=((((-8.0)*x1008))+(((8.0)*x1010))+(((-8.0)*x1007))+(((-8.0)*x1004))+(((-8.0)*x1009))+(((8.0)*x1003))+(((-8.0)*x1005))+(((-8.0)*x1006)));
IkReal x1012=((((-1.0)*x993))+(((-1.0)*x1001))+x1000+(((-1.0)*x995))+x998+x999+x992+(((-1.0)*x996)));
op[0]=x1002;
op[1]=x1011;
op[2]=x1002;
op[3]=((((-16.0)*x1007))+(((-16.0)*x1008))+(((-16.0)*x1009))+(((16.0)*x1003))+(((-16.0)*x1004))+(((16.0)*x1010))+(((-16.0)*x1006))+(((-16.0)*x1005)));
op[4]=x1012;
op[5]=x1011;
op[6]=x1012;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1013=(sj4*sj5);
IkReal x1014=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1014))+((r01*x1013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1013))+((r10*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1014))+((r01*x1013))))+IKsqr(((((-1.0)*r11*x1013))+((r10*x1014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1014))+((r01*x1013))), ((((-1.0)*r11*x1013))+((r10*x1014))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1015=IKcos(j0);
IkReal x1016=(sj4*sj5);
IkReal x1017=((1.0)*cj5*sj4);
IkReal x1018=IKsin(j0);
IkReal x1019=((1.0)*x1018);
IkReal x1020=(cj5*sj3);
IkReal x1021=(sj3*sj5);
IkReal x1022=(sj1*sj2);
IkReal x1023=(x1015*x1022);
IkReal x1024=(cj3*cj4*sj5);
IkReal x1025=(cj1*cj2);
IkReal x1026=((1.0)*x1015);
IkReal x1027=((1.0)*cj3*cj4*cj5);
IkReal x1028=(x1018*x1022);
IkReal x1029=(cj3*cj5);
IkReal x1030=(cj3*sj5);
IkReal x1031=(cj4*cj5*sj3);
IkReal x1032=(cj1*sj2);
IkReal x1033=(cj2*sj1);
IkReal x1034=((1.0)*cj4*sj3*sj5);
IkReal x1035=((0.1157)*cj5);
IkReal x1036=((0.1157)*sj5);
IkReal x1037=((0.612)*cj1);
IkReal x1038=((0.5723)*cj1*cj2);
evalcond[0]=(((r11*x1016))+(((-1.0)*r10*x1017))+x1015);
evalcond[1]=(((r01*x1016))+(((-1.0)*x1019))+(((-1.0)*r00*x1017)));
evalcond[2]=(((r01*x1020))+(((-1.0)*r00*x1027))+((r00*x1021))+((r01*x1024))+x1023+(((-1.0)*x1025*x1026)));
evalcond[3]=(((r10*x1021))+x1028+(((-1.0)*r10*x1027))+(((-1.0)*x1019*x1025))+((r11*x1020))+((r11*x1024)));
evalcond[4]=(((r00*x1030))+(((-1.0)*x1026*x1033))+(((-1.0)*r01*x1034))+((r00*x1031))+(((-1.0)*x1026*x1032))+((r01*x1029)));
evalcond[5]=((((-1.0)*x1019*x1033))+((r11*x1029))+((r10*x1031))+(((-1.0)*r11*x1034))+(((-1.0)*x1019*x1032))+((r10*x1030)));
evalcond[6]=((((-0.5723)*x1023))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1036))+((x1015*x1037))+(((-1.0)*r01*x1035))+((x1015*x1038))+(((-0.16394)*x1018)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x1035))+((x1018*x1038))+(((-1.0)*r10*x1036))+(((0.16394)*x1015))+(((-0.5723)*x1028))+((x1018*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1041 = IKatan2WithCheck(IkReal(((-1.0)*(((0.1157)*r21)))),IkReal(((-1.0)*(((0.1157)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1041.valid){
continue;
}
IkReal x1039=((-1.0)*(x1041.value));
if((((((0.01338649)*(r21*r21)))+(((0.01338649)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r21*r21)))+(((0.01338649)*(r20*r20)))))),-1);
if(!x1042.valid){
continue;
}
if( (((-1.0)*(x1042.value)*(((((-1.0)*(0.5723)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.5723)*cj2*sj1))+(((-1.0)*(0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1042.value)*(((((-1.0)*(0.5723)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.5723)*cj2*sj1))+(((-1.0)*(0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1040=IKasin(((-1.0)*(x1042.value)*(((((-1.0)*(0.5723)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.5723)*cj2*sj1))+(((-1.0)*(0.612)*sj1))))));
j5array[0]=(x1040+x1039);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1040))+x1039);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1043=(sj3*(r21*r21));
IkReal x1044=cj5*cj5;
IkReal x1045=((((-1.0)*(2.0)*cj5*r20*r21*sj3*sj5))+x1043+((sj3*(r22*r22)))+(((-1.0)*x1043*x1044))+((sj3*x1044*(r20*r20))));
j4eval[0]=x1045;
j4eval[1]=IKsign(x1045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1046=(cj3*(r21*r21));
IkReal x1047=cj5*cj5;
IkReal x1048=((((-1.0)*(2.0)*cj3*cj5*r20*r21*sj5))+((cj3*x1047*(r20*r20)))+x1046+((cj3*(r22*r22)))+(((-1.0)*x1046*x1047)));
j4eval[0]=x1048;
j4eval[1]=IKsign(x1048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1049=cj1*cj1;
IkReal x1050=cj2*cj2;
IkReal x1051=(cj1*sj1*sj2);
IkReal x1052=(cj2*x1049);
IkReal x1053=(cj1*cj2*sj1*sj2);
IkReal x1054=(x1049*x1050);
j0eval[0]=((7.53782248056064)+(((13.9323780843024)*x1054))+(((-14.8988561726246)*x1051))+(((-13.9323780843024)*x1053))+x1049+(((14.8988561726246)*x1052))+(((-6.96618904215118)*x1050)));
j0eval[1]=IKsign(((886009034.0)+(((-818818225.0)*x1050))+(((-1637636450.0)*x1053))+(((1751238000.0)*x1052))+(((-1751238000.0)*x1051))+(((1637636450.0)*x1054))+(((117541775.0)*x1049))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1055=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
IkReal x1056=((1.0)*cj5);
IkReal x1057=((1.0)*sj5);
j0eval[0]=x1055;
j0eval[1]=IKsign(x1055);
j0eval[2]=((IKabs(((((-1.0)*r10*x1057))+(((-1.0)*r11*x1056)))))+(IKabs(((((-1.0)*r01*x1056))+(((-1.0)*r00*x1057))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1058=r21*r21;
IkReal x1059=(r21*sj5);
IkReal x1060=cj5*cj5;
IkReal x1061=((((-1.0)*x1058*x1060))+((x1060*(r20*r20)))+x1058+(((-2.0)*cj5*r20*x1059))+(r22*r22));
IkReal x1062=(sj1*sj2);
IkReal x1063=((1.0)*cj1*cj2);
IkReal x1064=(cj5*r20);
j4eval[0]=x1061;
j4eval[1]=IKsign(x1061);
j4eval[2]=((IKabs(((((-1.0)*sj1*sj2*x1064))+((cj1*cj2*x1064))+(((-1.0)*x1059*x1063))+((x1059*x1062)))))+(IKabs((((r22*x1062))+(((-1.0)*r22*x1063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1065=(cj1*cj2);
IkReal x1066=(sj1*sj2);
IkReal x1067=((50000.0)*px);
IkReal x1068=((30600.0)*cj1);
IkReal x1069=(cj5*r01);
IkReal x1070=(r00*sj5);
IkReal x1071=((22830.0)*cj1*cj2);
IkReal x1072=((22830.0)*sj1*sj2);
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(((((8197.0)*x1066))+(((-8197.0)*x1065))),-1);
if(!x1073.valid){
continue;
}
CheckValue<IkReal> x1074=IKPowWithIntegerCheck(((((-1.0)*x1065))+x1066),-1);
if(!x1074.valid){
continue;
}
if( IKabs(((x1073.value)*(((((-1.0)*x1068*x1069))+(((-1.0)*x1068*x1070))+(((-1.0)*x1070*x1071))+((x1070*x1072))+((x1069*x1072))+(((-1.0)*x1066*x1067))+((x1065*x1067))+(((-1.0)*x1069*x1071)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1074.value)*(((((-1.0)*x1070))+(((-1.0)*x1069)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1073.value)*(((((-1.0)*x1068*x1069))+(((-1.0)*x1068*x1070))+(((-1.0)*x1070*x1071))+((x1070*x1072))+((x1069*x1072))+(((-1.0)*x1066*x1067))+((x1065*x1067))+(((-1.0)*x1069*x1071))))))+IKsqr(((x1074.value)*(((((-1.0)*x1070))+(((-1.0)*x1069))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1073.value)*(((((-1.0)*x1068*x1069))+(((-1.0)*x1068*x1070))+(((-1.0)*x1070*x1071))+((x1070*x1072))+((x1069*x1072))+(((-1.0)*x1066*x1067))+((x1065*x1067))+(((-1.0)*x1069*x1071))))), ((x1074.value)*(((((-1.0)*x1070))+(((-1.0)*x1069))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1075=(cj5*r01);
IkReal x1076=(r00*sj5);
IkReal x1077=IKcos(j0);
IkReal x1078=(sj1*sj2);
IkReal x1079=(x1077*x1078);
IkReal x1080=(cj1*cj2*x1077);
IkReal x1081=(cj5*r11);
IkReal x1082=(r10*sj5);
IkReal x1083=IKsin(j0);
IkReal x1084=(x1078*x1083);
IkReal x1085=(cj1*cj2*x1083);
IkReal x1086=((0.612)*cj1);
evalcond[0]=((((-1.0)*x1080))+x1076+x1079+x1075);
evalcond[1]=(x1081+x1082+x1084+(((-1.0)*x1085)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1157)*x1076))+(((-0.5723)*x1079))+(((-0.16394)*x1083))+(((0.5723)*x1080))+((x1077*x1086))+(((-0.1157)*x1075)));
evalcond[3]=((((-0.5723)*x1084))+(((-1.0)*(1.0)*py))+(((0.16394)*x1077))+(((-0.1157)*x1081))+((x1083*x1086))+(((-0.1157)*x1082))+(((0.5723)*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1087=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1087;
j4eval[1]=IKsign(x1087);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1088=((1.0)*cj5);
IkReal x1089=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1088)));
j4eval[0]=x1089;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1090=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1091=((1.0)*cj0);
IkReal x1092=((1.0)*sj0);
j4eval[0]=x1090;
j4eval[1]=((IKabs(((((-1.0)*r12*x1092))+(((-1.0)*r02*x1091)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1092))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1091))))));
j4eval[2]=IKsign(x1090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1093=((1.0)*cj0);
IkReal x1094=((1.0)*sj0);
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1093))+(((-1.0)*r12*x1094)))),IkReal(((((-1.0)*r11*sj5*x1094))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1095.value)))+(x1096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1097=IKcos(j4);
IkReal x1098=((1.0)*r22);
IkReal x1099=IKsin(j4);
IkReal x1100=(sj5*x1099);
IkReal x1101=((1.0)*cj5*x1099);
IkReal x1102=((1.0)*r12);
IkReal x1103=((1.0)*sj0);
IkReal x1104=((1.0)*r02);
IkReal x1105=(cj5*x1097);
IkReal x1106=((1.0)*sj5*x1097);
IkReal x1107=IKsin((j1+j2));
evalcond[0]=(((r21*x1100))+(((-1.0)*x1097*x1098))+(((-1.0)*r20*x1101)));
evalcond[1]=((((-1.0)*x1097*x1102))+cj0+((r11*x1100))+(((-1.0)*r10*x1101)));
evalcond[2]=((((-1.0)*x1097*x1104))+(((-1.0)*r00*x1101))+((r01*x1100))+(((-1.0)*x1103)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1098*x1099))+((r20*x1105))+((sj1*sj2))+(((-1.0)*r21*x1106)));
evalcond[4]=(((r00*x1105))+(((-1.0)*x1099*x1104))+(((-1.0)*r01*x1106))+(((-1.0)*cj0*x1107)));
evalcond[5]=((((-1.0)*x1103*x1107))+(((-1.0)*r11*x1106))+((r10*x1105))+(((-1.0)*x1099*x1102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1108=((1.0)*cj5);
CheckValue<IkReal> x1109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1108))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1109.value)))+(x1110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1111=IKcos(j4);
IkReal x1112=((1.0)*r22);
IkReal x1113=IKsin(j4);
IkReal x1114=(sj5*x1113);
IkReal x1115=((1.0)*cj5*x1113);
IkReal x1116=((1.0)*r12);
IkReal x1117=((1.0)*sj0);
IkReal x1118=((1.0)*r02);
IkReal x1119=(cj5*x1111);
IkReal x1120=((1.0)*sj5*x1111);
IkReal x1121=IKsin((j1+j2));
evalcond[0]=(((r21*x1114))+(((-1.0)*r20*x1115))+(((-1.0)*x1111*x1112)));
evalcond[1]=(((r11*x1114))+cj0+(((-1.0)*r10*x1115))+(((-1.0)*x1111*x1116)));
evalcond[2]=((((-1.0)*x1117))+((r01*x1114))+(((-1.0)*x1111*x1118))+(((-1.0)*r00*x1115)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1119))+(((-1.0)*x1112*x1113))+(((-1.0)*r21*x1120))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r01*x1120))+(((-1.0)*x1113*x1118))+(((-1.0)*cj0*x1121))+((r00*x1119)));
evalcond[5]=((((-1.0)*r11*x1120))+((r10*x1119))+(((-1.0)*x1117*x1121))+(((-1.0)*x1113*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1122=((1.0)*sj0);
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1122)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1123.value)))+(x1124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j4);
IkReal x1126=((1.0)*r22);
IkReal x1127=IKsin(j4);
IkReal x1128=(sj5*x1127);
IkReal x1129=((1.0)*cj5*x1127);
IkReal x1130=((1.0)*r12);
IkReal x1131=((1.0)*sj0);
IkReal x1132=((1.0)*r02);
IkReal x1133=(cj5*x1125);
IkReal x1134=((1.0)*sj5*x1125);
IkReal x1135=IKsin((j1+j2));
evalcond[0]=(((r21*x1128))+(((-1.0)*x1125*x1126))+(((-1.0)*r20*x1129)));
evalcond[1]=((((-1.0)*x1125*x1130))+(((-1.0)*r10*x1129))+cj0+((r11*x1128)));
evalcond[2]=((((-1.0)*x1131))+(((-1.0)*r00*x1129))+((r01*x1128))+(((-1.0)*x1125*x1132)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1134))+(((-1.0)*x1126*x1127))+((r20*x1133))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1127*x1132))+(((-1.0)*r01*x1134))+(((-1.0)*cj0*x1135))+((r00*x1133)));
evalcond[5]=(((r10*x1133))+(((-1.0)*r11*x1134))+(((-1.0)*x1131*x1135))+(((-1.0)*x1127*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1136=r21*r21;
IkReal x1137=(r21*sj5);
IkReal x1138=cj5*cj5;
IkReal x1139=(sj1*sj2);
IkReal x1140=((1.0)*cj1*cj2);
IkReal x1141=(cj5*r20);
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(IKsign((((x1138*(r20*r20)))+x1136+(r22*r22)+(((-1.0)*x1136*x1138))+(((-2.0)*cj5*r20*x1137)))),-1);
if(!x1142.valid){
continue;
}
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1140))+((r22*x1139)))),IkReal(((((-1.0)*x1137*x1140))+((cj1*cj2*x1141))+(((-1.0)*sj1*sj2*x1141))+((x1137*x1139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1142.value)))+(x1143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1144=IKcos(j4);
IkReal x1145=((1.0)*r22);
IkReal x1146=IKsin(j4);
IkReal x1147=(r21*sj5);
IkReal x1148=(cj5*r20);
evalcond[0]=((((-1.0)*x1144*x1145))+(((-1.0)*x1146*x1148))+((x1146*x1147)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1144*x1147))+((sj1*sj2))+(((-1.0)*x1145*x1146))+((x1144*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1149=(sj4*sj5);
IkReal x1150=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1150))+((r01*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1150))+(((-1.0)*r11*x1149))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1150))+((r01*x1149))))+IKsqr((((r10*x1150))+(((-1.0)*r11*x1149))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1150))+((r01*x1149))), (((r10*x1150))+(((-1.0)*r11*x1149))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1151=IKcos(j0);
IkReal x1152=((1.0)*cj4);
IkReal x1153=(sj4*sj5);
IkReal x1154=((1.0)*cj5*sj4);
IkReal x1155=IKsin(j0);
IkReal x1156=((1.0)*x1155);
IkReal x1157=(cj5*r01);
IkReal x1158=(r00*sj5);
IkReal x1159=(sj1*sj2);
IkReal x1160=(x1151*x1159);
IkReal x1161=(cj1*cj2);
IkReal x1162=((1.0)*x1151);
IkReal x1163=(cj5*r11);
IkReal x1164=(r10*sj5);
IkReal x1165=(x1155*x1159);
IkReal x1166=((1.0)*sj4);
IkReal x1167=(cj4*cj5);
IkReal x1168=((1.0)*cj4*sj5);
IkReal x1169=IKsin((j1+j2));
IkReal x1170=((0.612)*cj1);
IkReal x1171=((0.5723)*cj1*cj2);
evalcond[0]=(((r11*x1153))+x1151+(((-1.0)*r10*x1154))+(((-1.0)*r12*x1152)));
evalcond[1]=(((r01*x1153))+(((-1.0)*r02*x1152))+(((-1.0)*x1156))+(((-1.0)*r00*x1154)));
evalcond[2]=(x1158+x1157+x1160+(((-1.0)*x1161*x1162)));
evalcond[3]=((((-1.0)*x1156*x1161))+x1163+x1164+x1165);
evalcond[4]=((((-1.0)*r02*x1166))+((r00*x1167))+(((-1.0)*x1162*x1169))+(((-1.0)*r01*x1168)));
evalcond[5]=((((-1.0)*r12*x1166))+(((-1.0)*x1156*x1169))+(((-1.0)*r11*x1168))+((r10*x1167)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.16394)*x1155))+(((-0.1157)*x1157))+(((-0.1157)*x1158))+(((-0.5723)*x1160))+((x1151*x1171))+((x1151*x1170)));
evalcond[7]=((((0.16394)*x1151))+(((-1.0)*(1.0)*py))+(((-0.1157)*x1163))+((x1155*x1170))+((x1155*x1171))+(((-0.5723)*x1165))+(((-0.1157)*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1172=((1.0)*cj5);
IkReal x1173=((1.0)*sj5);
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1174.valid){
continue;
}
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1172))+(((-1.0)*r10*x1173)))),IkReal(((((-1.0)*r01*x1172))+(((-1.0)*r00*x1173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1174.value)))+(x1175.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1176=(cj5*r01);
IkReal x1177=(r00*sj5);
IkReal x1178=IKcos(j0);
IkReal x1179=(sj1*sj2);
IkReal x1180=(x1178*x1179);
IkReal x1181=(cj1*cj2*x1178);
IkReal x1182=(cj5*r11);
IkReal x1183=(r10*sj5);
IkReal x1184=IKsin(j0);
IkReal x1185=(x1179*x1184);
IkReal x1186=(cj1*cj2*x1184);
IkReal x1187=((0.612)*cj1);
evalcond[0]=((((-1.0)*x1181))+x1177+x1176+x1180);
evalcond[1]=((((-1.0)*x1186))+x1185+x1182+x1183);
evalcond[2]=((((-1.0)*(1.0)*px))+((x1178*x1187))+(((-0.1157)*x1176))+(((-0.16394)*x1184))+(((-0.1157)*x1177))+(((0.5723)*x1181))+(((-0.5723)*x1180)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1157)*x1183))+(((-0.5723)*x1185))+((x1184*x1187))+(((0.16394)*x1178))+(((-0.1157)*x1182))+(((0.5723)*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1188=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1188;
j4eval[1]=IKsign(x1188);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1189=((1.0)*cj5);
IkReal x1190=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1189)));
j4eval[0]=x1190;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1189))))));
j4eval[2]=IKsign(x1190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1191=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1192=((1.0)*cj0);
IkReal x1193=((1.0)*sj0);
j4eval[0]=x1191;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1193))+(((-1.0)*r01*sj5*x1192))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x1192))+(((-1.0)*r12*x1193))))));
j4eval[2]=IKsign(x1191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1194=((1.0)*cj0);
IkReal x1195=((1.0)*sj0);
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1196.valid){
continue;
}
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1195))+(((-1.0)*r02*x1194)))),IkReal(((((-1.0)*r01*sj5*x1194))+(((-1.0)*r11*sj5*x1195))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1196.value)))+(x1197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1198=IKcos(j4);
IkReal x1199=((1.0)*r22);
IkReal x1200=IKsin(j4);
IkReal x1201=(sj5*x1200);
IkReal x1202=((1.0)*cj5*x1200);
IkReal x1203=((1.0)*r12);
IkReal x1204=((1.0)*sj0);
IkReal x1205=((1.0)*r02);
IkReal x1206=(cj5*x1198);
IkReal x1207=((1.0)*sj5*x1198);
IkReal x1208=IKsin((j1+j2));
evalcond[0]=(((r21*x1201))+(((-1.0)*x1198*x1199))+(((-1.0)*r20*x1202)));
evalcond[1]=(((r11*x1201))+cj0+(((-1.0)*x1198*x1203))+(((-1.0)*r10*x1202)));
evalcond[2]=((((-1.0)*r00*x1202))+(((-1.0)*x1204))+(((-1.0)*x1198*x1205))+((r01*x1201)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1199*x1200))+((sj1*sj2))+((r20*x1206))+(((-1.0)*r21*x1207)));
evalcond[4]=((((-1.0)*cj0*x1208))+((r00*x1206))+(((-1.0)*r01*x1207))+(((-1.0)*x1200*x1205)));
evalcond[5]=((((-1.0)*x1204*x1208))+(((-1.0)*r11*x1207))+((r10*x1206))+(((-1.0)*x1200*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1209=((1.0)*cj5);
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1209))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1210.valid){
continue;
}
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1210.value)))+(x1211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1212=IKcos(j4);
IkReal x1213=((1.0)*r22);
IkReal x1214=IKsin(j4);
IkReal x1215=(sj5*x1214);
IkReal x1216=((1.0)*cj5*x1214);
IkReal x1217=((1.0)*r12);
IkReal x1218=((1.0)*sj0);
IkReal x1219=((1.0)*r02);
IkReal x1220=(cj5*x1212);
IkReal x1221=((1.0)*sj5*x1212);
IkReal x1222=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1216))+(((-1.0)*x1212*x1213))+((r21*x1215)));
evalcond[1]=((((-1.0)*r10*x1216))+(((-1.0)*x1212*x1217))+cj0+((r11*x1215)));
evalcond[2]=((((-1.0)*x1212*x1219))+(((-1.0)*r00*x1216))+(((-1.0)*x1218))+((r01*x1215)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1221))+(((-1.0)*x1213*x1214))+((sj1*sj2))+((r20*x1220)));
evalcond[4]=((((-1.0)*r01*x1221))+(((-1.0)*cj0*x1222))+(((-1.0)*x1214*x1219))+((r00*x1220)));
evalcond[5]=((((-1.0)*x1218*x1222))+(((-1.0)*x1214*x1217))+((r10*x1220))+(((-1.0)*r11*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1223=((1.0)*sj0);
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1224.valid){
continue;
}
CheckValue<IkReal> x1225 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1223)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1224.value)))+(x1225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j4);
IkReal x1227=((1.0)*r22);
IkReal x1228=IKsin(j4);
IkReal x1229=(sj5*x1228);
IkReal x1230=((1.0)*cj5*x1228);
IkReal x1231=((1.0)*r12);
IkReal x1232=((1.0)*sj0);
IkReal x1233=((1.0)*r02);
IkReal x1234=(cj5*x1226);
IkReal x1235=((1.0)*sj5*x1226);
IkReal x1236=IKsin((j1+j2));
evalcond[0]=(((r21*x1229))+(((-1.0)*r20*x1230))+(((-1.0)*x1226*x1227)));
evalcond[1]=(cj0+((r11*x1229))+(((-1.0)*r10*x1230))+(((-1.0)*x1226*x1231)));
evalcond[2]=(((r01*x1229))+(((-1.0)*x1232))+(((-1.0)*x1226*x1233))+(((-1.0)*r00*x1230)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1235))+((sj1*sj2))+(((-1.0)*x1227*x1228))+((r20*x1234)));
evalcond[4]=((((-1.0)*x1228*x1233))+(((-1.0)*r01*x1235))+(((-1.0)*cj0*x1236))+((r00*x1234)));
evalcond[5]=((((-1.0)*r11*x1235))+(((-1.0)*x1232*x1236))+((r10*x1234))+(((-1.0)*x1228*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1237=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1237;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1237);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1238=r21*r21;
IkReal x1239=(cj5*r20);
IkReal x1240=cj5*cj5;
IkReal x1241=(((x1240*(r20*r20)))+x1238+(((-2.0)*r21*sj5*x1239))+(r22*r22)+(((-1.0)*x1238*x1240)));
IkReal x1242=(cj1*cj2);
IkReal x1243=((1.0)*sj1*sj2);
IkReal x1244=(r21*sj5);
j4eval[0]=x1241;
j4eval[1]=IKsign(x1241);
j4eval[2]=((IKabs(((((-1.0)*x1243*x1244))+(((-1.0)*cj1*cj2*x1239))+((sj1*sj2*x1239))+((x1242*x1244)))))+(IKabs(((((-1.0)*r22*x1243))+((r22*x1242))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1245=(cj1*cj2);
IkReal x1246=(sj1*sj2);
IkReal x1247=((50000.0)*px);
IkReal x1248=((30600.0)*cj1);
IkReal x1249=(cj5*r01);
IkReal x1250=(r00*sj5);
IkReal x1251=((34400.0)*cj1*cj2);
IkReal x1252=((34400.0)*sj1*sj2);
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(((((-8197.0)*x1245))+(((8197.0)*x1246))),-1);
if(!x1253.valid){
continue;
}
CheckValue<IkReal> x1254=IKPowWithIntegerCheck(((((-1.0)*x1245))+x1246),-1);
if(!x1254.valid){
continue;
}
if( IKabs(((x1253.value)*((((x1250*x1251))+((x1248*x1250))+((x1249*x1251))+(((-1.0)*x1246*x1247))+(((-1.0)*x1249*x1252))+((x1245*x1247))+((x1248*x1249))+(((-1.0)*x1250*x1252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1254.value)*((x1250+x1249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1253.value)*((((x1250*x1251))+((x1248*x1250))+((x1249*x1251))+(((-1.0)*x1246*x1247))+(((-1.0)*x1249*x1252))+((x1245*x1247))+((x1248*x1249))+(((-1.0)*x1250*x1252))))))+IKsqr(((x1254.value)*((x1250+x1249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1253.value)*((((x1250*x1251))+((x1248*x1250))+((x1249*x1251))+(((-1.0)*x1246*x1247))+(((-1.0)*x1249*x1252))+((x1245*x1247))+((x1248*x1249))+(((-1.0)*x1250*x1252))))), ((x1254.value)*((x1250+x1249))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1255=(cj5*r01);
IkReal x1256=(r00*sj5);
IkReal x1257=IKcos(j0);
IkReal x1258=(sj1*sj2);
IkReal x1259=(x1257*x1258);
IkReal x1260=(cj1*cj2*x1257);
IkReal x1261=(cj5*r11);
IkReal x1262=(r10*sj5);
IkReal x1263=IKsin(j0);
IkReal x1264=(x1258*x1263);
IkReal x1265=(cj1*cj2*x1263);
IkReal x1266=((0.612)*cj1);
evalcond[0]=((((-1.0)*x1260))+x1259+(((-1.0)*x1255))+(((-1.0)*x1256)));
evalcond[1]=((((-1.0)*x1261))+(((-1.0)*x1262))+(((-1.0)*x1265))+x1264);
evalcond[2]=((((-0.5723)*x1259))+(((-1.0)*(1.0)*px))+(((0.5723)*x1260))+((x1257*x1266))+(((-0.16394)*x1263))+(((-0.1157)*x1256))+(((-0.1157)*x1255)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1157)*x1262))+(((-0.1157)*x1261))+(((-0.5723)*x1264))+((x1263*x1266))+(((0.16394)*x1257))+(((0.5723)*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1267=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1267;
j4eval[1]=IKsign(x1267);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1268=((1.0)*cj5);
IkReal x1269=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1268)));
j4eval[0]=x1269;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1268))))));
j4eval[2]=IKsign(x1269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1270=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1271=((1.0)*cj0);
IkReal x1272=((1.0)*sj0);
j4eval[0]=x1270;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1272))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1271)))))+(IKabs(((((-1.0)*r12*x1272))+(((-1.0)*r02*x1271))))));
j4eval[2]=IKsign(x1270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1273=((1.0)*cj0);
IkReal x1274=((1.0)*sj0);
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1273))+(((-1.0)*r12*x1274)))),IkReal(((((-1.0)*r01*sj5*x1273))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1275.value)))+(x1276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1277=IKcos(j4);
IkReal x1278=((1.0)*x1277);
IkReal x1279=IKsin(j4);
IkReal x1280=(r21*sj5);
IkReal x1281=(cj5*r20);
IkReal x1282=((1.0)*x1279);
IkReal x1283=(r11*sj5);
IkReal x1284=(cj5*r10);
IkReal x1285=((1.0)*sj0);
IkReal x1286=(r01*sj5);
IkReal x1287=(cj5*r00);
IkReal x1288=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1278))+(((-1.0)*x1281*x1282))+((x1279*x1280)));
evalcond[1]=((((-1.0)*r12*x1278))+cj0+((x1279*x1283))+(((-1.0)*x1282*x1284)));
evalcond[2]=((((-1.0)*x1282*x1287))+(((-1.0)*x1285))+((x1279*x1286))+(((-1.0)*r02*x1278)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1278*x1281))+((r22*x1279))+((x1277*x1280))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1278*x1287))+((x1277*x1286))+((r02*x1279))+(((-1.0)*cj0*x1288)));
evalcond[5]=(((x1277*x1283))+(((-1.0)*x1278*x1284))+((r12*x1279))+(((-1.0)*x1285*x1288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1289=((1.0)*cj5);
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1289)))),-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1290.value)))+(x1291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1292=IKcos(j4);
IkReal x1293=((1.0)*x1292);
IkReal x1294=IKsin(j4);
IkReal x1295=(r21*sj5);
IkReal x1296=(cj5*r20);
IkReal x1297=((1.0)*x1294);
IkReal x1298=(r11*sj5);
IkReal x1299=(cj5*r10);
IkReal x1300=((1.0)*sj0);
IkReal x1301=(r01*sj5);
IkReal x1302=(cj5*r00);
IkReal x1303=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1293))+(((-1.0)*x1296*x1297))+((x1294*x1295)));
evalcond[1]=((((-1.0)*r12*x1293))+(((-1.0)*x1297*x1299))+cj0+((x1294*x1298)));
evalcond[2]=((((-1.0)*x1297*x1302))+((x1294*x1301))+(((-1.0)*x1300))+(((-1.0)*r02*x1293)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r22*x1294))+((sj1*sj2))+((x1292*x1295))+(((-1.0)*x1293*x1296)));
evalcond[4]=(((r02*x1294))+(((-1.0)*x1293*x1302))+((x1292*x1301))+(((-1.0)*cj0*x1303)));
evalcond[5]=(((r12*x1294))+(((-1.0)*x1293*x1299))+((x1292*x1298))+(((-1.0)*x1300*x1303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1304=((1.0)*sj0);
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1305.valid){
continue;
}
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1304)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1305.value)))+(x1306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1307=IKcos(j4);
IkReal x1308=((1.0)*x1307);
IkReal x1309=IKsin(j4);
IkReal x1310=(r21*sj5);
IkReal x1311=(cj5*r20);
IkReal x1312=((1.0)*x1309);
IkReal x1313=(r11*sj5);
IkReal x1314=(cj5*r10);
IkReal x1315=((1.0)*sj0);
IkReal x1316=(r01*sj5);
IkReal x1317=(cj5*r00);
IkReal x1318=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1311*x1312))+((x1309*x1310))+(((-1.0)*r22*x1308)));
evalcond[1]=((((-1.0)*x1312*x1314))+cj0+((x1309*x1313))+(((-1.0)*r12*x1308)));
evalcond[2]=((((-1.0)*r02*x1308))+(((-1.0)*x1312*x1317))+(((-1.0)*x1315))+((x1309*x1316)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1308*x1311))+((r22*x1309))+((x1307*x1310))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1308*x1317))+((r02*x1309))+((x1307*x1316))+(((-1.0)*cj0*x1318)));
evalcond[5]=((((-1.0)*x1308*x1314))+((x1307*x1313))+(((-1.0)*x1315*x1318))+((r12*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1319=r21*r21;
IkReal x1320=(cj5*r20);
IkReal x1321=cj5*cj5;
IkReal x1322=(cj1*cj2);
IkReal x1323=((1.0)*sj1*sj2);
IkReal x1324=(r21*sj5);
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x1321*(r20*r20)))+(((-2.0)*r21*sj5*x1320))+(((-1.0)*x1319*x1321))+x1319)),-1);
if(!x1325.valid){
continue;
}
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal((((r22*x1322))+(((-1.0)*r22*x1323)))),IkReal(((((-1.0)*x1323*x1324))+((x1322*x1324))+(((-1.0)*cj1*cj2*x1320))+((sj1*sj2*x1320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1325.value)))+(x1326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1327=IKcos(j4);
IkReal x1328=((1.0)*x1327);
IkReal x1329=IKsin(j4);
IkReal x1330=(r21*sj5);
IkReal x1331=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1328))+(((-1.0)*x1329*x1331))+((x1329*x1330)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+((x1327*x1330))+((r22*x1329))+((sj1*sj2))+(((-1.0)*x1328*x1331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1332=(sj4*sj5);
IkReal x1333=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+((r01*x1332))+(((-1.0)*r00*x1333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1332))+((r10*x1333))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+((r01*x1332))+(((-1.0)*r00*x1333))))+IKsqr(((((-1.0)*r11*x1332))+((r10*x1333))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+((r01*x1332))+(((-1.0)*r00*x1333))), ((((-1.0)*r11*x1332))+((r10*x1333))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1334=IKcos(j0);
IkReal x1335=((1.0)*cj4);
IkReal x1336=(sj4*sj5);
IkReal x1337=((1.0)*cj5*sj4);
IkReal x1338=IKsin(j0);
IkReal x1339=((1.0)*x1338);
IkReal x1340=(cj5*r01);
IkReal x1341=(r00*sj5);
IkReal x1342=(sj1*sj2);
IkReal x1343=(x1334*x1342);
IkReal x1344=(cj1*cj2);
IkReal x1345=((1.0)*x1334);
IkReal x1346=(cj5*r11);
IkReal x1347=(r10*sj5);
IkReal x1348=(x1338*x1342);
IkReal x1349=(cj4*sj5);
IkReal x1350=((1.0)*cj4*cj5);
IkReal x1351=IKsin((j1+j2));
IkReal x1352=((0.612)*cj1);
IkReal x1353=((0.5723)*cj1*cj2);
evalcond[0]=(((r11*x1336))+(((-1.0)*r12*x1335))+x1334+(((-1.0)*r10*x1337)));
evalcond[1]=((((-1.0)*r00*x1337))+(((-1.0)*x1339))+(((-1.0)*r02*x1335))+((r01*x1336)));
evalcond[2]=((((-1.0)*x1340))+(((-1.0)*x1344*x1345))+(((-1.0)*x1341))+x1343);
evalcond[3]=((((-1.0)*x1339*x1344))+(((-1.0)*x1347))+(((-1.0)*x1346))+x1348);
evalcond[4]=((((-1.0)*r00*x1350))+((r02*sj4))+(((-1.0)*x1345*x1351))+((r01*x1349)));
evalcond[5]=(((r12*sj4))+(((-1.0)*x1339*x1351))+(((-1.0)*r10*x1350))+((r11*x1349)));
evalcond[6]=(((x1334*x1352))+(((-1.0)*(1.0)*px))+((x1334*x1353))+(((-0.16394)*x1338))+(((-0.5723)*x1343))+(((-0.1157)*x1340))+(((-0.1157)*x1341)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-0.1157)*x1346))+((x1338*x1353))+(((-0.5723)*x1348))+(((0.16394)*x1334))+((x1338*x1352))+(((-0.1157)*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1355.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1354.value)))+(x1355.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1356=(cj5*r01);
IkReal x1357=(r00*sj5);
IkReal x1358=IKcos(j0);
IkReal x1359=(sj1*sj2);
IkReal x1360=(x1358*x1359);
IkReal x1361=(cj1*cj2*x1358);
IkReal x1362=(cj5*r11);
IkReal x1363=(r10*sj5);
IkReal x1364=IKsin(j0);
IkReal x1365=(x1359*x1364);
IkReal x1366=(cj1*cj2*x1364);
IkReal x1367=((0.612)*cj1);
evalcond[0]=((((-1.0)*x1357))+(((-1.0)*x1361))+(((-1.0)*x1356))+x1360);
evalcond[1]=((((-1.0)*x1363))+(((-1.0)*x1362))+x1365+(((-1.0)*x1366)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x1358*x1367))+(((-0.1157)*x1357))+(((0.5723)*x1361))+(((-0.1157)*x1356))+(((-0.16394)*x1364))+(((-0.5723)*x1360)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.5723)*x1366))+(((-0.1157)*x1362))+(((0.16394)*x1358))+((x1364*x1367))+(((-0.1157)*x1363))+(((-0.5723)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1368=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1368;
j4eval[1]=IKsign(x1368);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1369=((1.0)*cj5);
IkReal x1370=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1369)));
j4eval[0]=x1370;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1369)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1371=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1372=((1.0)*cj0);
IkReal x1373=((1.0)*sj0);
j4eval[0]=x1371;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1373))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1372)))))+(IKabs(((((-1.0)*r12*x1373))+(((-1.0)*r02*x1372))))));
j4eval[2]=IKsign(x1371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1374=((1.0)*cj0);
IkReal x1375=((1.0)*sj0);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1375))+(((-1.0)*r02*x1374)))),IkReal(((((-1.0)*r01*sj5*x1374))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1375))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1378=IKcos(j4);
IkReal x1379=((1.0)*x1378);
IkReal x1380=IKsin(j4);
IkReal x1381=(r21*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=((1.0)*x1380);
IkReal x1384=(r11*sj5);
IkReal x1385=(cj5*r10);
IkReal x1386=((1.0)*sj0);
IkReal x1387=(r01*sj5);
IkReal x1388=(cj5*r00);
IkReal x1389=IKsin((j1+j2));
evalcond[0]=(((x1380*x1381))+(((-1.0)*x1382*x1383))+(((-1.0)*r22*x1379)));
evalcond[1]=((((-1.0)*r12*x1379))+cj0+((x1380*x1384))+(((-1.0)*x1383*x1385)));
evalcond[2]=((((-1.0)*x1386))+((x1380*x1387))+(((-1.0)*r02*x1379))+(((-1.0)*x1383*x1388)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r22*x1380))+((sj1*sj2))+(((-1.0)*x1379*x1382))+((x1378*x1381)));
evalcond[4]=((((-1.0)*cj0*x1389))+((x1378*x1387))+(((-1.0)*x1379*x1388))+((r02*x1380)));
evalcond[5]=((((-1.0)*x1386*x1389))+((x1378*x1384))+((r12*x1380))+(((-1.0)*x1379*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1390=((1.0)*cj5);
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1390)))),-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1390))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1391.value)))+(x1392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1393=IKcos(j4);
IkReal x1394=((1.0)*x1393);
IkReal x1395=IKsin(j4);
IkReal x1396=(r21*sj5);
IkReal x1397=(cj5*r20);
IkReal x1398=((1.0)*x1395);
IkReal x1399=(r11*sj5);
IkReal x1400=(cj5*r10);
IkReal x1401=((1.0)*sj0);
IkReal x1402=(r01*sj5);
IkReal x1403=(cj5*r00);
IkReal x1404=IKsin((j1+j2));
evalcond[0]=(((x1395*x1396))+(((-1.0)*x1397*x1398))+(((-1.0)*r22*x1394)));
evalcond[1]=((((-1.0)*r12*x1394))+((x1395*x1399))+cj0+(((-1.0)*x1398*x1400)));
evalcond[2]=((((-1.0)*x1398*x1403))+((x1395*x1402))+(((-1.0)*r02*x1394))+(((-1.0)*x1401)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1393*x1396))+(((-1.0)*x1394*x1397))+((sj1*sj2))+((r22*x1395)));
evalcond[4]=((((-1.0)*x1394*x1403))+((x1393*x1402))+((r02*x1395))+(((-1.0)*cj0*x1404)));
evalcond[5]=((((-1.0)*x1401*x1404))+((r12*x1395))+((x1393*x1399))+(((-1.0)*x1394*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1405=((1.0)*sj0);
CheckValue<IkReal> x1406 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1405)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1406.valid){
continue;
}
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1406.value)+(((1.5707963267949)*(x1407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1408=IKcos(j4);
IkReal x1409=((1.0)*x1408);
IkReal x1410=IKsin(j4);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=((1.0)*x1410);
IkReal x1414=(r11*sj5);
IkReal x1415=(cj5*r10);
IkReal x1416=((1.0)*sj0);
IkReal x1417=(r01*sj5);
IkReal x1418=(cj5*r00);
IkReal x1419=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1412*x1413))+(((-1.0)*r22*x1409))+((x1410*x1411)));
evalcond[1]=((((-1.0)*r12*x1409))+cj0+(((-1.0)*x1413*x1415))+((x1410*x1414)));
evalcond[2]=(((x1410*x1417))+(((-1.0)*r02*x1409))+(((-1.0)*x1413*x1418))+(((-1.0)*x1416)));
evalcond[3]=(((r22*x1410))+(((-1.0)*(1.0)*cj1*cj2))+((x1408*x1411))+(((-1.0)*x1409*x1412))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1409*x1418))+((r02*x1410))+(((-1.0)*cj0*x1419))+((x1408*x1417)));
evalcond[5]=((((-1.0)*x1416*x1419))+((x1408*x1414))+((r12*x1410))+(((-1.0)*x1409*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1420=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x1421=((1.0)*cj5);
IkReal x1422=((1.0)*sj5);
j0eval[0]=x1420;
j0eval[1]=((IKabs(((((-1.0)*r01*x1421))+(((-1.0)*r00*x1422)))))+(IKabs(((((-1.0)*r10*x1422))+(((-1.0)*r11*x1421))))));
j0eval[2]=IKsign(x1420);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1423=r21*r21;
IkReal x1424=(cj5*r20);
IkReal x1425=cj5*cj5;
IkReal x1426=(x1423+(((-1.0)*x1423*x1425))+(((-2.0)*r21*sj5*x1424))+(r22*r22)+((x1425*(r20*r20))));
IkReal x1427=(cj1*sj2);
IkReal x1428=(cj2*sj1);
IkReal x1429=((1.0)*r21*sj5);
j4eval[0]=x1426;
j4eval[1]=IKsign(x1426);
j4eval[2]=((IKabs(((((-1.0)*x1428*x1429))+(((-1.0)*x1427*x1429))+((x1424*x1428))+((x1424*x1427)))))+(IKabs((((r22*x1427))+((r22*x1428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1430=(cj1*sj2);
IkReal x1431=(cj2*sj1);
IkReal x1432=((30600.0)*cj1);
IkReal x1433=(cj5*r01);
IkReal x1434=((50000.0)*px);
IkReal x1435=(r00*sj5);
IkReal x1436=((5785.0)*cj1*sj2);
IkReal x1437=((5785.0)*cj2*sj1);
IkReal x1438=((28615.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(((((-8197.0)*x1430))+(((-8197.0)*x1431))),-1);
if(!x1439.valid){
continue;
}
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(((((-1.0)*x1431))+(((-1.0)*x1430))),-1);
if(!x1440.valid){
continue;
}
if( IKabs(((x1439.value)*((((x1435*x1436))+((x1433*x1436))+(((-1.0)*x1432*x1433))+(((-1.0)*x1435*x1438))+(((-1.0)*x1433*x1438))+((x1433*x1437))+((x1431*x1434))+(((-1.0)*x1432*x1435))+((x1430*x1434))+((x1435*x1437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1440.value)*(((((-1.0)*x1435))+(((-1.0)*x1433)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1439.value)*((((x1435*x1436))+((x1433*x1436))+(((-1.0)*x1432*x1433))+(((-1.0)*x1435*x1438))+(((-1.0)*x1433*x1438))+((x1433*x1437))+((x1431*x1434))+(((-1.0)*x1432*x1435))+((x1430*x1434))+((x1435*x1437))))))+IKsqr(((x1440.value)*(((((-1.0)*x1435))+(((-1.0)*x1433))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1439.value)*((((x1435*x1436))+((x1433*x1436))+(((-1.0)*x1432*x1433))+(((-1.0)*x1435*x1438))+(((-1.0)*x1433*x1438))+((x1433*x1437))+((x1431*x1434))+(((-1.0)*x1432*x1435))+((x1430*x1434))+((x1435*x1437))))), ((x1440.value)*(((((-1.0)*x1435))+(((-1.0)*x1433))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1441=(cj5*r01);
IkReal x1442=(r00*sj5);
IkReal x1443=IKcos(j0);
IkReal x1444=((1.0)*cj1*sj2);
IkReal x1445=((1.0)*cj2*sj1);
IkReal x1446=(cj5*r11);
IkReal x1447=(r10*sj5);
IkReal x1448=IKsin(j0);
IkReal x1449=((0.612)*cj1);
IkReal x1450=((0.5723)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1443*x1444))+x1441+x1442+(((-1.0)*x1443*x1445)));
evalcond[1]=((((-1.0)*x1444*x1448))+(((-1.0)*x1445*x1448))+x1447+x1446);
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1157)*x1442))+((x1443*x1449))+((x1443*x1450))+(((-0.1157)*x1441))+(((-0.16394)*x1448)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.16394)*x1443))+((x1448*x1450))+(((-0.1157)*x1446))+(((-0.1157)*x1447))+((x1448*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1451=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1451;
j4eval[1]=IKsign(x1451);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1452=((1.0)*cj5);
IkReal x1453=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1452)));
j4eval[0]=x1453;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1452))))));
j4eval[2]=IKsign(x1453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1454=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1455=((1.0)*cj0);
IkReal x1456=((1.0)*sj0);
j4eval[0]=x1454;
j4eval[1]=((IKabs(((((-1.0)*r02*x1455))+(((-1.0)*r12*x1456)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1456))+(((-1.0)*r01*sj5*x1455))))));
j4eval[2]=IKsign(x1454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1457=((1.0)*cj0);
IkReal x1458=((1.0)*sj0);
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1459.valid){
continue;
}
CheckValue<IkReal> x1460 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1458))+(((-1.0)*r02*x1457)))),IkReal(((((-1.0)*r11*sj5*x1458))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1459.value)))+(x1460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1461=IKcos(j4);
IkReal x1462=((1.0)*x1461);
IkReal x1463=IKsin(j4);
IkReal x1464=(r21*sj5);
IkReal x1465=(cj5*r20);
IkReal x1466=((1.0)*x1463);
IkReal x1467=(r11*sj5);
IkReal x1468=(cj5*r10);
IkReal x1469=((1.0)*sj0);
IkReal x1470=(r01*sj5);
IkReal x1471=(cj5*r00);
IkReal x1472=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1462))+((x1463*x1464))+(((-1.0)*x1465*x1466)));
evalcond[1]=(((x1463*x1467))+cj0+(((-1.0)*x1466*x1468))+(((-1.0)*r12*x1462)));
evalcond[2]=((((-1.0)*x1466*x1471))+(((-1.0)*r02*x1462))+(((-1.0)*x1469))+((x1463*x1470)));
evalcond[3]=(((r22*x1463))+((cj1*sj2))+((x1461*x1464))+((cj2*sj1))+(((-1.0)*x1462*x1465)));
evalcond[4]=((((-1.0)*cj0*x1472))+(((-1.0)*x1462*x1471))+((x1461*x1470))+((r02*x1463)));
evalcond[5]=(((r12*x1463))+(((-1.0)*x1462*x1468))+((x1461*x1467))+(((-1.0)*x1469*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1473=((1.0)*cj5);
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1473)))),-1);
if(!x1474.valid){
continue;
}
CheckValue<IkReal> x1475 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1473))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1474.value)))+(x1475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1476=IKcos(j4);
IkReal x1477=((1.0)*x1476);
IkReal x1478=IKsin(j4);
IkReal x1479=(r21*sj5);
IkReal x1480=(cj5*r20);
IkReal x1481=((1.0)*x1478);
IkReal x1482=(r11*sj5);
IkReal x1483=(cj5*r10);
IkReal x1484=((1.0)*sj0);
IkReal x1485=(r01*sj5);
IkReal x1486=(cj5*r00);
IkReal x1487=IKcos((j1+j2));
evalcond[0]=(((x1478*x1479))+(((-1.0)*x1480*x1481))+(((-1.0)*r22*x1477)));
evalcond[1]=((((-1.0)*r12*x1477))+cj0+(((-1.0)*x1481*x1483))+((x1478*x1482)));
evalcond[2]=((((-1.0)*x1481*x1486))+(((-1.0)*r02*x1477))+((x1478*x1485))+(((-1.0)*x1484)));
evalcond[3]=(((r22*x1478))+((x1476*x1479))+(((-1.0)*x1477*x1480))+((cj1*sj2))+((cj2*sj1)));
evalcond[4]=(((x1476*x1485))+(((-1.0)*cj0*x1487))+((r02*x1478))+(((-1.0)*x1477*x1486)));
evalcond[5]=(((r12*x1478))+((x1476*x1482))+(((-1.0)*x1484*x1487))+(((-1.0)*x1477*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=((1.0)*sj0);
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1488)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1489.value)))+(x1490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1491=IKcos(j4);
IkReal x1492=((1.0)*x1491);
IkReal x1493=IKsin(j4);
IkReal x1494=(r21*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=((1.0)*x1493);
IkReal x1497=(r11*sj5);
IkReal x1498=(cj5*r10);
IkReal x1499=((1.0)*sj0);
IkReal x1500=(r01*sj5);
IkReal x1501=(cj5*r00);
IkReal x1502=IKcos((j1+j2));
evalcond[0]=(((x1493*x1494))+(((-1.0)*x1495*x1496))+(((-1.0)*r22*x1492)));
evalcond[1]=((((-1.0)*x1496*x1498))+((x1493*x1497))+(((-1.0)*r12*x1492))+cj0);
evalcond[2]=((((-1.0)*x1499))+(((-1.0)*x1496*x1501))+((x1493*x1500))+(((-1.0)*r02*x1492)));
evalcond[3]=(((r22*x1493))+((cj1*sj2))+(((-1.0)*x1492*x1495))+((cj2*sj1))+((x1491*x1494)));
evalcond[4]=((((-1.0)*x1492*x1501))+(((-1.0)*cj0*x1502))+((r02*x1493))+((x1491*x1500)));
evalcond[5]=((((-1.0)*x1492*x1498))+((r12*x1493))+((x1491*x1497))+(((-1.0)*x1499*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1503=r21*r21;
IkReal x1504=(cj5*r20);
IkReal x1505=cj5*cj5;
IkReal x1506=((1.0)*r22);
IkReal x1507=(cj1*sj2);
IkReal x1508=(cj2*sj1);
IkReal x1509=((1.0)*r21*sj5);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(((((-1.0)*x1506*x1507))+(((-1.0)*x1506*x1508)))),IkReal(((((-1.0)*x1507*x1509))+((x1504*x1507))+((x1504*x1508))+(((-1.0)*x1508*x1509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(IKsign((((x1505*(r20*r20)))+(((-1.0)*x1503*x1505))+(((-2.0)*r21*sj5*x1504))+(r22*r22)+x1503)),-1);
if(!x1511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1510.value)+(((1.5707963267949)*(x1511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1512=IKcos(j4);
IkReal x1513=((1.0)*x1512);
IkReal x1514=IKsin(j4);
IkReal x1515=(r21*sj5);
IkReal x1516=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1513))+((x1514*x1515))+(((-1.0)*x1514*x1516)));
evalcond[1]=(((r22*x1514))+(((-1.0)*x1513*x1516))+((cj1*sj2))+((x1512*x1515))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1517=(sj4*sj5);
IkReal x1518=(cj5*sj4);
if( IKabs((((r01*x1517))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1517))+((r10*x1518))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1517))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1518))))+IKsqr(((((-1.0)*r11*x1517))+((r10*x1518))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1517))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1518))), ((((-1.0)*r11*x1517))+((r10*x1518))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1519=IKcos(j0);
IkReal x1520=((1.0)*cj4);
IkReal x1521=(sj4*sj5);
IkReal x1522=((1.0)*cj5*sj4);
IkReal x1523=IKsin(j0);
IkReal x1524=((1.0)*x1523);
IkReal x1525=(cj5*r01);
IkReal x1526=(r00*sj5);
IkReal x1527=(cj1*sj2);
IkReal x1528=((1.0)*x1519);
IkReal x1529=(cj2*sj1);
IkReal x1530=(cj5*r11);
IkReal x1531=(r10*sj5);
IkReal x1532=(cj4*sj5);
IkReal x1533=((1.0)*cj4*cj5);
IkReal x1534=IKcos((j1+j2));
IkReal x1535=((0.612)*cj1);
IkReal x1536=((0.5723)*x1534);
evalcond[0]=((((-1.0)*r12*x1520))+x1519+((r11*x1521))+(((-1.0)*r10*x1522)));
evalcond[1]=((((-1.0)*r00*x1522))+((r01*x1521))+(((-1.0)*r02*x1520))+(((-1.0)*x1524)));
evalcond[2]=((((-1.0)*x1528*x1529))+(((-1.0)*x1527*x1528))+x1525+x1526);
evalcond[3]=((((-1.0)*x1524*x1527))+(((-1.0)*x1524*x1529))+x1531+x1530);
evalcond[4]=((((-1.0)*r00*x1533))+((r02*sj4))+(((-1.0)*x1528*x1534))+((r01*x1532)));
evalcond[5]=(((r12*sj4))+(((-1.0)*x1524*x1534))+(((-1.0)*r10*x1533))+((r11*x1532)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.16394)*x1523))+((x1519*x1535))+(((-0.1157)*x1526))+((x1519*x1536))+(((-0.1157)*x1525)));
evalcond[7]=((((-1.0)*(1.0)*py))+((x1523*x1536))+((x1523*x1535))+(((-0.1157)*x1530))+(((-0.1157)*x1531))+(((0.16394)*x1519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1537=((1.0)*cj5);
IkReal x1538=((1.0)*sj5);
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1538))+(((-1.0)*r11*x1537)))),IkReal(((((-1.0)*r01*x1537))+(((-1.0)*r00*x1538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1541=(cj5*r01);
IkReal x1542=(r00*sj5);
IkReal x1543=IKcos(j0);
IkReal x1544=((1.0)*cj1*sj2);
IkReal x1545=((1.0)*cj2*sj1);
IkReal x1546=(cj5*r11);
IkReal x1547=(r10*sj5);
IkReal x1548=IKsin(j0);
IkReal x1549=((0.612)*cj1);
IkReal x1550=((0.5723)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1543*x1545))+x1542+x1541+(((-1.0)*x1543*x1544)));
evalcond[1]=((((-1.0)*x1545*x1548))+x1547+x1546+(((-1.0)*x1544*x1548)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.16394)*x1548))+(((-0.1157)*x1541))+((x1543*x1550))+(((-0.1157)*x1542))+((x1543*x1549)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1157)*x1547))+((x1548*x1549))+((x1548*x1550))+(((0.16394)*x1543))+(((-0.1157)*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1551=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1551;
j4eval[1]=IKsign(x1551);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1552=((1.0)*cj5);
IkReal x1553=((((-1.0)*r01*x1552))+(((-1.0)*(1.0)*r00*sj5)));
j4eval[0]=x1553;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1552))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1554=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1555=((1.0)*cj0);
IkReal x1556=((1.0)*sj0);
j4eval[0]=x1554;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1555))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1556)))))+(IKabs(((((-1.0)*r12*x1556))+(((-1.0)*r02*x1555))))));
j4eval[2]=IKsign(x1554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1557=((1.0)*cj0);
IkReal x1558=((1.0)*sj0);
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1558))+(((-1.0)*r02*x1557)))),IkReal(((((-1.0)*r11*sj5*x1558))+(((-1.0)*r01*sj5*x1557))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1559.value)+(((1.5707963267949)*(x1560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1561=IKcos(j4);
IkReal x1562=((1.0)*x1561);
IkReal x1563=IKsin(j4);
IkReal x1564=(r21*sj5);
IkReal x1565=(cj5*r20);
IkReal x1566=((1.0)*x1563);
IkReal x1567=(r11*sj5);
IkReal x1568=(cj5*r10);
IkReal x1569=((1.0)*sj0);
IkReal x1570=(r01*sj5);
IkReal x1571=(cj5*r00);
IkReal x1572=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1562))+((x1563*x1564))+(((-1.0)*x1565*x1566)));
evalcond[1]=(((x1563*x1567))+cj0+(((-1.0)*r12*x1562))+(((-1.0)*x1566*x1568)));
evalcond[2]=(((x1563*x1570))+(((-1.0)*x1569))+(((-1.0)*r02*x1562))+(((-1.0)*x1566*x1571)));
evalcond[3]=(((r22*x1563))+(((-1.0)*x1562*x1565))+((x1561*x1564))+((cj1*sj2))+((cj2*sj1)));
evalcond[4]=(((x1561*x1570))+(((-1.0)*x1562*x1571))+((r02*x1563))+(((-1.0)*cj0*x1572)));
evalcond[5]=((((-1.0)*x1569*x1572))+((x1561*x1567))+(((-1.0)*x1562*x1568))+((r12*x1563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1573=((1.0)*cj5);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1573))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKcos(j4);
IkReal x1577=((1.0)*x1576);
IkReal x1578=IKsin(j4);
IkReal x1579=(r21*sj5);
IkReal x1580=(cj5*r20);
IkReal x1581=((1.0)*x1578);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj5*r10);
IkReal x1584=((1.0)*sj0);
IkReal x1585=(r01*sj5);
IkReal x1586=(cj5*r00);
IkReal x1587=IKcos((j1+j2));
evalcond[0]=(((x1578*x1579))+(((-1.0)*x1580*x1581))+(((-1.0)*r22*x1577)));
evalcond[1]=((((-1.0)*r12*x1577))+((x1578*x1582))+(((-1.0)*x1581*x1583))+cj0);
evalcond[2]=((((-1.0)*x1584))+(((-1.0)*x1581*x1586))+(((-1.0)*r02*x1577))+((x1578*x1585)));
evalcond[3]=(((x1576*x1579))+((cj1*sj2))+((r22*x1578))+(((-1.0)*x1577*x1580))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1587))+((r02*x1578))+((x1576*x1585))+(((-1.0)*x1577*x1586)));
evalcond[5]=((((-1.0)*x1584*x1587))+((r12*x1578))+((x1576*x1582))+(((-1.0)*x1577*x1583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1588=((1.0)*sj0);
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1588)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1589.value)))+(x1590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1591=IKcos(j4);
IkReal x1592=((1.0)*x1591);
IkReal x1593=IKsin(j4);
IkReal x1594=(r21*sj5);
IkReal x1595=(cj5*r20);
IkReal x1596=((1.0)*x1593);
IkReal x1597=(r11*sj5);
IkReal x1598=(cj5*r10);
IkReal x1599=((1.0)*sj0);
IkReal x1600=(r01*sj5);
IkReal x1601=(cj5*r00);
IkReal x1602=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1592))+((x1593*x1594))+(((-1.0)*x1595*x1596)));
evalcond[1]=(((x1593*x1597))+cj0+(((-1.0)*r12*x1592))+(((-1.0)*x1596*x1598)));
evalcond[2]=((((-1.0)*x1596*x1601))+(((-1.0)*r02*x1592))+(((-1.0)*x1599))+((x1593*x1600)));
evalcond[3]=(((x1591*x1594))+((cj1*sj2))+((r22*x1593))+((cj2*sj1))+(((-1.0)*x1592*x1595)));
evalcond[4]=((((-1.0)*cj0*x1602))+((x1591*x1600))+(((-1.0)*x1592*x1601))+((r02*x1593)));
evalcond[5]=((((-1.0)*x1592*x1598))+((r12*x1593))+((x1591*x1597))+(((-1.0)*x1599*x1602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1603=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
j0eval[0]=x1603;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1603);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1604=r21*r21;
IkReal x1605=(r21*sj5);
IkReal x1606=cj5*cj5;
IkReal x1607=(((x1606*(r20*r20)))+x1604+(r22*r22)+(((-2.0)*cj5*r20*x1605))+(((-1.0)*x1604*x1606)));
IkReal x1608=(cj1*sj2);
IkReal x1609=(cj2*sj1);
IkReal x1610=((1.0)*cj5*r20);
j4eval[0]=x1607;
j4eval[1]=IKsign(x1607);
j4eval[2]=((IKabs((((r22*x1609))+((r22*x1608)))))+(IKabs(((((-1.0)*x1608*x1610))+(((-1.0)*x1609*x1610))+((x1605*x1609))+((x1605*x1608))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1611=(cj1*sj2);
IkReal x1612=(cj2*sj1);
IkReal x1613=((30600.0)*cj1);
IkReal x1614=(cj5*r01);
IkReal x1615=((50000.0)*px);
IkReal x1616=(r00*sj5);
IkReal x1617=((5785.0)*cj1*sj2);
IkReal x1618=((5785.0)*cj2*sj1);
IkReal x1619=((28615.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(((((-8197.0)*x1612))+(((-8197.0)*x1611))),-1);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(((((-1.0)*x1611))+(((-1.0)*x1612))),-1);
if(!x1621.valid){
continue;
}
if( IKabs(((x1620.value)*((((x1612*x1615))+((x1613*x1616))+((x1614*x1617))+((x1613*x1614))+((x1614*x1619))+((x1611*x1615))+((x1616*x1618))+((x1616*x1617))+((x1616*x1619))+((x1614*x1618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1621.value)*((x1614+x1616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1620.value)*((((x1612*x1615))+((x1613*x1616))+((x1614*x1617))+((x1613*x1614))+((x1614*x1619))+((x1611*x1615))+((x1616*x1618))+((x1616*x1617))+((x1616*x1619))+((x1614*x1618))))))+IKsqr(((x1621.value)*((x1614+x1616))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1620.value)*((((x1612*x1615))+((x1613*x1616))+((x1614*x1617))+((x1613*x1614))+((x1614*x1619))+((x1611*x1615))+((x1616*x1618))+((x1616*x1617))+((x1616*x1619))+((x1614*x1618))))), ((x1621.value)*((x1614+x1616))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1622=(cj5*r01);
IkReal x1623=(r00*sj5);
IkReal x1624=IKcos(j0);
IkReal x1625=((1.0)*cj1*sj2);
IkReal x1626=((1.0)*cj2*sj1);
IkReal x1627=(cj5*r11);
IkReal x1628=(r10*sj5);
IkReal x1629=IKsin(j0);
IkReal x1630=((0.612)*cj1);
IkReal x1631=((0.5723)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1623))+(((-1.0)*x1622))+(((-1.0)*x1624*x1625))+(((-1.0)*x1624*x1626)));
evalcond[1]=((((-1.0)*x1626*x1629))+(((-1.0)*x1627))+(((-1.0)*x1628))+(((-1.0)*x1625*x1629)));
evalcond[2]=((((-0.1157)*x1623))+(((-1.0)*(1.0)*px))+(((-0.16394)*x1629))+((x1624*x1630))+((x1624*x1631))+(((-0.1157)*x1622)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.16394)*x1624))+(((-0.1157)*x1628))+((x1629*x1630))+(((-0.1157)*x1627))+((x1629*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1632=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1632;
j4eval[1]=IKsign(x1632);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1633=((1.0)*cj5);
IkReal x1634=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1633)));
j4eval[0]=x1634;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1633))))));
j4eval[2]=IKsign(x1634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1635=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1636=((1.0)*cj0);
IkReal x1637=((1.0)*sj0);
j4eval[0]=x1635;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1636))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1637)))))+(IKabs(((((-1.0)*r12*x1637))+(((-1.0)*r02*x1636))))));
j4eval[2]=IKsign(x1635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=((1.0)*cj0);
IkReal x1639=((1.0)*sj0);
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1638))+(((-1.0)*r12*x1639)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1639))+(((-1.0)*r01*sj5*x1638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1640.value)))+(x1641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1642=IKcos(j4);
IkReal x1643=((1.0)*r22);
IkReal x1644=IKsin(j4);
IkReal x1645=(sj5*x1644);
IkReal x1646=((1.0)*cj5*x1644);
IkReal x1647=((1.0)*r12);
IkReal x1648=((1.0)*sj0);
IkReal x1649=((1.0)*r02);
IkReal x1650=(cj5*x1642);
IkReal x1651=((1.0)*sj5*x1642);
IkReal x1652=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1642*x1643))+(((-1.0)*r20*x1646))+((r21*x1645)));
evalcond[1]=((((-1.0)*r10*x1646))+cj0+((r11*x1645))+(((-1.0)*x1642*x1647)));
evalcond[2]=((((-1.0)*r00*x1646))+(((-1.0)*x1642*x1649))+(((-1.0)*x1648))+((r01*x1645)));
evalcond[3]=(((r20*x1650))+(((-1.0)*r21*x1651))+(((-1.0)*x1643*x1644))+((cj1*sj2))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1652))+((r00*x1650))+(((-1.0)*x1644*x1649))+(((-1.0)*r01*x1651)));
evalcond[5]=((((-1.0)*x1648*x1652))+((r10*x1650))+(((-1.0)*x1644*x1647))+(((-1.0)*r11*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=((1.0)*cj5);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1653)))),-1);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1653))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1654.value)))+(x1655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1656=IKcos(j4);
IkReal x1657=((1.0)*r22);
IkReal x1658=IKsin(j4);
IkReal x1659=(sj5*x1658);
IkReal x1660=((1.0)*cj5*x1658);
IkReal x1661=((1.0)*r12);
IkReal x1662=((1.0)*sj0);
IkReal x1663=((1.0)*r02);
IkReal x1664=(cj5*x1656);
IkReal x1665=((1.0)*sj5*x1656);
IkReal x1666=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1656*x1657))+((r21*x1659))+(((-1.0)*r20*x1660)));
evalcond[1]=((((-1.0)*x1656*x1661))+cj0+(((-1.0)*r10*x1660))+((r11*x1659)));
evalcond[2]=(((r01*x1659))+(((-1.0)*r00*x1660))+(((-1.0)*x1662))+(((-1.0)*x1656*x1663)));
evalcond[3]=(((r20*x1664))+(((-1.0)*x1657*x1658))+((cj1*sj2))+(((-1.0)*r21*x1665))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1658*x1663))+((r00*x1664))+(((-1.0)*cj0*x1666))+(((-1.0)*r01*x1665)));
evalcond[5]=((((-1.0)*x1658*x1661))+((r10*x1664))+(((-1.0)*r11*x1665))+(((-1.0)*x1662*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1667=((1.0)*sj0);
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1667)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1668.value)))+(x1669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1670=IKcos(j4);
IkReal x1671=((1.0)*r22);
IkReal x1672=IKsin(j4);
IkReal x1673=(sj5*x1672);
IkReal x1674=((1.0)*cj5*x1672);
IkReal x1675=((1.0)*r12);
IkReal x1676=((1.0)*sj0);
IkReal x1677=((1.0)*r02);
IkReal x1678=(cj5*x1670);
IkReal x1679=((1.0)*sj5*x1670);
IkReal x1680=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1670*x1671))+((r21*x1673))+(((-1.0)*r20*x1674)));
evalcond[1]=((((-1.0)*r10*x1674))+cj0+(((-1.0)*x1670*x1675))+((r11*x1673)));
evalcond[2]=((((-1.0)*r00*x1674))+((r01*x1673))+(((-1.0)*x1676))+(((-1.0)*x1670*x1677)));
evalcond[3]=(((r20*x1678))+(((-1.0)*r21*x1679))+((cj1*sj2))+(((-1.0)*x1671*x1672))+((cj2*sj1)));
evalcond[4]=(((r00*x1678))+(((-1.0)*r01*x1679))+(((-1.0)*x1672*x1677))+(((-1.0)*cj0*x1680)));
evalcond[5]=((((-1.0)*x1676*x1680))+((r10*x1678))+(((-1.0)*r11*x1679))+(((-1.0)*x1672*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1681=(cj1*sj2);
IkReal x1682=(cj2*sj1);
IkReal x1683=(r21*sj5);
IkReal x1684=((1.0)*cj5*r20);
IkReal x1685=r21*r21;
IkReal x1686=cj5*cj5;
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((((r22*x1682))+((r22*x1681)))),IkReal((((x1682*x1683))+((x1681*x1683))+(((-1.0)*x1681*x1684))+(((-1.0)*x1682*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign((x1685+(((-1.0)*x1685*x1686))+(((-2.0)*cj5*r20*x1683))+(r22*r22)+((x1686*(r20*r20))))),-1);
if(!x1688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1689=IKcos(j4);
IkReal x1690=((1.0)*r22);
IkReal x1691=IKsin(j4);
IkReal x1692=(r21*sj5);
IkReal x1693=(cj5*r20);
evalcond[0]=(((x1691*x1692))+(((-1.0)*x1691*x1693))+(((-1.0)*x1689*x1690)));
evalcond[1]=((((-1.0)*x1690*x1691))+((x1689*x1693))+((cj1*sj2))+(((-1.0)*x1689*x1692))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1694=(sj4*sj5);
IkReal x1695=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1695))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1694))+((r10*x1695))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1695))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1694))))+IKsqr(((((-1.0)*r11*x1694))+((r10*x1695))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1695))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1694))), ((((-1.0)*r11*x1694))+((r10*x1695))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1696=IKcos(j0);
IkReal x1697=((1.0)*cj4);
IkReal x1698=(sj4*sj5);
IkReal x1699=((1.0)*cj5*sj4);
IkReal x1700=IKsin(j0);
IkReal x1701=((1.0)*x1700);
IkReal x1702=(cj5*r01);
IkReal x1703=(r00*sj5);
IkReal x1704=(cj1*sj2);
IkReal x1705=((1.0)*x1696);
IkReal x1706=(cj2*sj1);
IkReal x1707=(cj5*r11);
IkReal x1708=(r10*sj5);
IkReal x1709=((1.0)*sj4);
IkReal x1710=(cj4*cj5);
IkReal x1711=((1.0)*cj4*sj5);
IkReal x1712=IKcos((j1+j2));
IkReal x1713=((0.612)*cj1);
IkReal x1714=((0.5723)*x1712);
evalcond[0]=(x1696+((r11*x1698))+(((-1.0)*r12*x1697))+(((-1.0)*r10*x1699)));
evalcond[1]=(((r01*x1698))+(((-1.0)*r02*x1697))+(((-1.0)*r00*x1699))+(((-1.0)*x1701)));
evalcond[2]=((((-1.0)*x1704*x1705))+(((-1.0)*x1702))+(((-1.0)*x1705*x1706))+(((-1.0)*x1703)));
evalcond[3]=((((-1.0)*x1707))+(((-1.0)*x1701*x1704))+(((-1.0)*x1701*x1706))+(((-1.0)*x1708)));
evalcond[4]=(((r00*x1710))+(((-1.0)*r02*x1709))+(((-1.0)*x1705*x1712))+(((-1.0)*r01*x1711)));
evalcond[5]=(((r10*x1710))+(((-1.0)*r12*x1709))+(((-1.0)*x1701*x1712))+(((-1.0)*r11*x1711)));
evalcond[6]=((((-0.16394)*x1700))+(((-1.0)*(1.0)*px))+(((-0.1157)*x1703))+((x1696*x1713))+(((-0.1157)*x1702))+((x1696*x1714)));
evalcond[7]=((((-0.1157)*x1708))+(((-1.0)*(1.0)*py))+((x1700*x1713))+(((0.16394)*x1696))+(((-0.1157)*x1707))+((x1700*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1715.value)))+(x1716.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1717=(cj5*r01);
IkReal x1718=(r00*sj5);
IkReal x1719=IKcos(j0);
IkReal x1720=((1.0)*cj1*sj2);
IkReal x1721=((1.0)*cj2*sj1);
IkReal x1722=(cj5*r11);
IkReal x1723=(r10*sj5);
IkReal x1724=IKsin(j0);
IkReal x1725=((0.612)*cj1);
IkReal x1726=((0.5723)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1717))+(((-1.0)*x1719*x1720))+(((-1.0)*x1719*x1721))+(((-1.0)*x1718)));
evalcond[1]=((((-1.0)*x1720*x1724))+(((-1.0)*x1723))+(((-1.0)*x1722))+(((-1.0)*x1721*x1724)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1157)*x1717))+(((-0.16394)*x1724))+((x1719*x1726))+(((-0.1157)*x1718))+((x1719*x1725)));
evalcond[3]=((((-0.1157)*x1723))+(((-1.0)*(1.0)*py))+(((0.16394)*x1719))+(((-0.1157)*x1722))+((x1724*x1725))+((x1724*x1726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1727=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1727;
j4eval[1]=IKsign(x1727);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1728=((1.0)*cj5);
IkReal x1729=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1728)));
j4eval[0]=x1729;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1728)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1730=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1731=((1.0)*cj0);
IkReal x1732=((1.0)*sj0);
j4eval[0]=x1730;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1731))+(((-1.0)*r11*sj5*x1732))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x1731))+(((-1.0)*r12*x1732))))));
j4eval[2]=IKsign(x1730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1733=((1.0)*cj0);
IkReal x1734=((1.0)*sj0);
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1735.valid){
continue;
}
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1734))+(((-1.0)*r02*x1733)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1734))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1735.value)))+(x1736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1737=IKcos(j4);
IkReal x1738=((1.0)*r22);
IkReal x1739=IKsin(j4);
IkReal x1740=(sj5*x1739);
IkReal x1741=((1.0)*cj5*x1739);
IkReal x1742=((1.0)*r12);
IkReal x1743=((1.0)*sj0);
IkReal x1744=((1.0)*r02);
IkReal x1745=(cj5*x1737);
IkReal x1746=((1.0)*sj5*x1737);
IkReal x1747=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1741))+((r21*x1740))+(((-1.0)*x1737*x1738)));
evalcond[1]=((((-1.0)*r10*x1741))+(((-1.0)*x1737*x1742))+((r11*x1740))+cj0);
evalcond[2]=(((r01*x1740))+(((-1.0)*r00*x1741))+(((-1.0)*x1737*x1744))+(((-1.0)*x1743)));
evalcond[3]=((((-1.0)*x1738*x1739))+((cj1*sj2))+(((-1.0)*r21*x1746))+((r20*x1745))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1747))+(((-1.0)*x1739*x1744))+((r00*x1745))+(((-1.0)*r01*x1746)));
evalcond[5]=((((-1.0)*x1739*x1742))+((r10*x1745))+(((-1.0)*x1743*x1747))+(((-1.0)*r11*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1748=((1.0)*cj5);
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1748))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1749.valid){
continue;
}
CheckValue<IkReal> x1750 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1749.value)))+(x1750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1751=IKcos(j4);
IkReal x1752=((1.0)*r22);
IkReal x1753=IKsin(j4);
IkReal x1754=(sj5*x1753);
IkReal x1755=((1.0)*cj5*x1753);
IkReal x1756=((1.0)*r12);
IkReal x1757=((1.0)*sj0);
IkReal x1758=((1.0)*r02);
IkReal x1759=(cj5*x1751);
IkReal x1760=((1.0)*sj5*x1751);
IkReal x1761=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1755))+(((-1.0)*x1751*x1752))+((r21*x1754)));
evalcond[1]=((((-1.0)*x1751*x1756))+cj0+(((-1.0)*r10*x1755))+((r11*x1754)));
evalcond[2]=((((-1.0)*r00*x1755))+((r01*x1754))+(((-1.0)*x1757))+(((-1.0)*x1751*x1758)));
evalcond[3]=((((-1.0)*x1752*x1753))+((cj1*sj2))+((r20*x1759))+(((-1.0)*r21*x1760))+((cj2*sj1)));
evalcond[4]=((((-1.0)*r01*x1760))+(((-1.0)*x1753*x1758))+(((-1.0)*cj0*x1761))+((r00*x1759)));
evalcond[5]=((((-1.0)*r11*x1760))+(((-1.0)*x1753*x1756))+((r10*x1759))+(((-1.0)*x1757*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1762=((1.0)*sj0);
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1762)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1763.value)))+(x1764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1765=IKcos(j4);
IkReal x1766=((1.0)*r22);
IkReal x1767=IKsin(j4);
IkReal x1768=(sj5*x1767);
IkReal x1769=((1.0)*cj5*x1767);
IkReal x1770=((1.0)*r12);
IkReal x1771=((1.0)*sj0);
IkReal x1772=((1.0)*r02);
IkReal x1773=(cj5*x1765);
IkReal x1774=((1.0)*sj5*x1765);
IkReal x1775=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1765*x1766))+((r21*x1768))+(((-1.0)*r20*x1769)));
evalcond[1]=((((-1.0)*x1765*x1770))+((r11*x1768))+cj0+(((-1.0)*r10*x1769)));
evalcond[2]=((((-1.0)*x1765*x1772))+(((-1.0)*x1771))+((r01*x1768))+(((-1.0)*r00*x1769)));
evalcond[3]=(((r20*x1773))+((cj1*sj2))+(((-1.0)*x1766*x1767))+(((-1.0)*r21*x1774))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1767*x1772))+(((-1.0)*cj0*x1775))+((r00*x1773))+(((-1.0)*r01*x1774)));
evalcond[5]=((((-1.0)*x1771*x1775))+(((-1.0)*x1767*x1770))+(((-1.0)*r11*x1774))+((r10*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1776=cj1*cj1;
IkReal x1777=cj2*cj2;
IkReal x1778=(cj1*sj1*sj2);
IkReal x1779=((1530000000.0)*cj1);
IkReal x1780=((47419645.0)*cj5);
IkReal x1781=((47419645.0)*sj5);
IkReal x1782=((1430750000.0)*cj1*cj2);
IkReal x1783=((177021000.0)*cj1*cj5);
IkReal x1784=((177021000.0)*cj1*sj5);
IkReal x1785=((1430750000.0)*sj1*sj2);
IkReal x1786=((165537775.0)*cj1*cj2*cj5);
IkReal x1787=((165537775.0)*cj1*cj2*sj5);
IkReal x1788=((165537775.0)*cj5*sj1*sj2);
IkReal x1789=((165537775.0)*sj1*sj2*sj5);
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal((((r11*x1783))+((py*x1782))+(((-1.0)*r10*x1789))+(((-1.0)*r00*x1781))+((py*x1779))+(((-1.0)*r11*x1788))+(((-1.0)*(409850000.0)*px))+((r10*x1784))+((r10*x1787))+((r11*x1786))+(((-1.0)*r01*x1780))+(((-1.0)*py*x1785)))),IkReal((((r01*x1786))+((px*x1782))+((px*x1779))+((r00*x1784))+(((-1.0)*px*x1785))+((r11*x1780))+(((409850000.0)*py))+(((-1.0)*r01*x1788))+((r01*x1783))+(((-1.0)*r00*x1789))+((r10*x1781))+((r00*x1787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(IKsign(((886009034.0)+(((-818818225.0)*x1777))+(((1637636450.0)*x1776*x1777))+(((-1637636450.0)*cj2*x1778))+(((1751238000.0)*cj2*x1776))+(((117541775.0)*x1776))+(((-1751238000.0)*x1778)))),-1);
if(!x1791.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1790.value)+(((1.5707963267949)*(x1791.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1792=((0.1157)*cj5);
IkReal x1793=((0.1157)*sj5);
IkReal x1794=IKsin(j0);
IkReal x1795=IKcos(j0);
IkReal x1796=((0.612)*cj1);
IkReal x1797=((0.5723)*cj1*cj2);
IkReal x1798=((0.5723)*sj1*sj2);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x1795*x1798))+(((-0.16394)*x1794))+(((-1.0)*r00*x1793))+((x1795*x1797))+((x1795*x1796))+(((-1.0)*r01*x1792)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x1794*x1798))+(((0.16394)*x1795))+(((-1.0)*r11*x1792))+((x1794*x1796))+(((-1.0)*r10*x1793))+((x1794*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1799=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1799;
j4eval[1]=IKsign(x1799);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1800=((1.0)*cj5);
IkReal x1801=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1800)));
j4eval[0]=x1801;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1800))))));
j4eval[2]=IKsign(x1801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1802=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1803=((1.0)*cj0);
IkReal x1804=((1.0)*sj0);
j4eval[0]=x1802;
j4eval[1]=((IKabs(((((-1.0)*r12*x1804))+(((-1.0)*r02*x1803)))))+(IKabs(((((-1.0)*r01*sj5*x1803))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1804))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1805=((1.0)*r20);
IkReal x1807 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1807)==0){
continue;
}
IkReal x1806=pow(x1807,-0.5);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1805)),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1808.value));
IkReal gconst1=(r21*x1806);
IkReal gconst2=((-1.0)*x1805*x1806);
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1809.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1810=((1.0)*r20);
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1810)),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
IkReal x1811=((-1.0)*(x1813.value));
IkReal x1812=x1806;
sj5=gconst1;
cj5=gconst2;
j5=x1811;
IkReal gconst0=x1811;
IkReal gconst1=(r21*x1812);
IkReal gconst2=((-1.0)*x1810*x1812);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1814=((1.0)*r20);
CheckValue<IkReal> x1817 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1814)),IKFAST_ATAN2_MAGTHRESH);
if(!x1817.valid){
continue;
}
IkReal x1815=((-1.0)*(x1817.value));
IkReal x1816=x1806;
sj5=gconst1;
cj5=gconst2;
j5=x1815;
IkReal gconst0=x1815;
IkReal gconst1=(r21*x1816);
IkReal gconst2=((-1.0)*x1814*x1816);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1818=((1.0)*r20);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1818)),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
IkReal x1819=((-1.0)*(x1821.value));
IkReal x1820=x1806;
sj5=gconst1;
cj5=gconst2;
j5=x1819;
IkReal gconst0=x1819;
IkReal gconst1=(r21*x1820);
IkReal gconst2=((-1.0)*x1818*x1820);
IkReal x1822=r22*r22;
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1822))),-1);
if(!x1825.valid){
continue;
}
IkReal x1823=(sj3*(x1825.value));
IkReal x1824=(((sj3*x1822))+(((2.0)*x1823*(r20*r20)*(r21*r21)))+((x1823*(r21*r21*r21*r21)))+((x1823*(r20*r20*r20*r20))));
j4eval[0]=x1824;
j4eval[1]=IKsign(x1824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1826=(gconst1*r21);
IkReal x1827=gconst1*gconst1;
IkReal x1828=r21*r21;
IkReal x1829=gconst2*gconst2;
IkReal x1830=r20*r20;
IkReal x1831=(sj1*sj2);
IkReal x1832=((1.0)*cj1*cj2);
IkReal x1833=(cj3*r22);
IkReal x1834=(gconst2*r20);
IkReal x1835=(cj3*gconst1*gconst2);
IkReal x1836=(cj3*r20*r21);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((((gconst1*r20*x1833))+((r22*x1831))+(((-1.0)*r22*x1832))+((gconst2*r21*x1833)))),IkReal(((((-1.0)*x1830*x1835))+(((-1.0)*sj1*sj2*x1834))+((cj1*cj2*x1834))+((x1827*x1836))+((x1828*x1835))+(((-1.0)*x1829*x1836))+((x1826*x1831))+(((-1.0)*x1826*x1832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(IKsign((((sj3*x1827*x1828))+((sj3*x1829*x1830))+((sj3*(r22*r22)))+(((-2.0)*gconst2*r20*sj3*x1826)))),-1);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1837.value)+(((1.5707963267949)*(x1838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1839=IKcos(j4);
IkReal x1840=((1.0)*x1839);
IkReal x1841=IKsin(j4);
IkReal x1842=(gconst1*x1841);
IkReal x1843=((1.0)*gconst2*x1841);
IkReal x1844=((1.0)*sj0);
IkReal x1845=(cj1*sj2);
IkReal x1846=(cj2*sj1);
IkReal x1847=(gconst1*sj3);
IkReal x1848=(gconst2*sj3);
IkReal x1849=(cj3*x1841);
IkReal x1850=(cj3*gconst1*x1839);
IkReal x1851=((1.0)*cj3*gconst2*x1839);
IkReal x1852=(sj1*sj2);
IkReal x1853=((1.0)*cj1*cj2);
IkReal x1854=(cj3*gconst1);
IkReal x1855=(cj3*gconst2);
IkReal x1856=((1.0)*sj3*x1841);
IkReal x1857=(gconst2*sj3*x1839);
IkReal x1858=((1.0)*gconst1*sj3*x1839);
IkReal x1859=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1840))+((r21*x1842))+(((-1.0)*r20*x1843)));
evalcond[1]=((((-1.0)*r12*x1840))+((r11*x1842))+(((-1.0)*r10*x1843))+cj0);
evalcond[2]=((((-1.0)*r00*x1843))+((r01*x1842))+(((-1.0)*r02*x1840))+(((-1.0)*x1844)));
evalcond[3]=(((r21*x1850))+x1845+x1846+(((-1.0)*r20*x1851))+((r21*x1848))+((r22*x1849))+((r20*x1847)));
evalcond[4]=(((r20*x1857))+((r20*x1854))+(((-1.0)*r22*x1856))+x1852+(((-1.0)*x1853))+((r21*x1855))+(((-1.0)*r21*x1858)));
evalcond[5]=(((r01*x1848))+((cj0*x1852))+(((-1.0)*cj0*x1853))+((r00*x1847))+(((-1.0)*r00*x1851))+((r02*x1849))+((r01*x1850)));
evalcond[6]=((((-1.0)*r10*x1851))+((sj0*x1852))+((r11*x1850))+((r10*x1847))+(((-1.0)*cj1*cj2*x1844))+((r11*x1848))+((r12*x1849)));
evalcond[7]=((((-1.0)*x1846*x1859))+((r00*x1857))+((r01*x1855))+((r00*x1854))+(((-1.0)*r01*x1858))+(((-1.0)*x1845*x1859))+(((-1.0)*r02*x1856)));
evalcond[8]=(((r11*x1855))+(((-1.0)*r12*x1856))+(((-1.0)*x1844*x1845))+(((-1.0)*r11*x1858))+((r10*x1857))+((r10*x1854))+(((-1.0)*x1844*x1846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1860=((1.0)*gconst2);
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1860))+(((-1.0)*(1.0)*gconst1*r00)))),-1);
if(!x1861.valid){
continue;
}
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x1860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1861.value)))+(x1862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1863=IKcos(j4);
IkReal x1864=((1.0)*x1863);
IkReal x1865=IKsin(j4);
IkReal x1866=(gconst1*x1865);
IkReal x1867=((1.0)*gconst2*x1865);
IkReal x1868=((1.0)*sj0);
IkReal x1869=(cj1*sj2);
IkReal x1870=(cj2*sj1);
IkReal x1871=(gconst1*sj3);
IkReal x1872=(gconst2*sj3);
IkReal x1873=(cj3*x1865);
IkReal x1874=(cj3*gconst1*x1863);
IkReal x1875=((1.0)*cj3*gconst2*x1863);
IkReal x1876=(sj1*sj2);
IkReal x1877=((1.0)*cj1*cj2);
IkReal x1878=(cj3*gconst1);
IkReal x1879=(cj3*gconst2);
IkReal x1880=((1.0)*sj3*x1865);
IkReal x1881=(gconst2*sj3*x1863);
IkReal x1882=((1.0)*gconst1*sj3*x1863);
IkReal x1883=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1864))+((r21*x1866))+(((-1.0)*r20*x1867)));
evalcond[1]=(((r11*x1866))+(((-1.0)*r12*x1864))+cj0+(((-1.0)*r10*x1867)));
evalcond[2]=((((-1.0)*r00*x1867))+(((-1.0)*x1868))+(((-1.0)*r02*x1864))+((r01*x1866)));
evalcond[3]=(((r21*x1872))+((r22*x1873))+(((-1.0)*r20*x1875))+x1869+((r21*x1874))+((r20*x1871))+x1870);
evalcond[4]=(((r20*x1878))+((r21*x1879))+((r20*x1881))+(((-1.0)*r22*x1880))+(((-1.0)*r21*x1882))+(((-1.0)*x1877))+x1876);
evalcond[5]=((((-1.0)*cj0*x1877))+((r02*x1873))+((r01*x1872))+((r00*x1871))+(((-1.0)*r00*x1875))+((r01*x1874))+((cj0*x1876)));
evalcond[6]=((((-1.0)*cj1*cj2*x1868))+((r12*x1873))+((r10*x1871))+((sj0*x1876))+((r11*x1872))+((r11*x1874))+(((-1.0)*r10*x1875)));
evalcond[7]=((((-1.0)*r01*x1882))+((r01*x1879))+((r00*x1878))+((r00*x1881))+(((-1.0)*x1869*x1883))+(((-1.0)*x1870*x1883))+(((-1.0)*r02*x1880)));
evalcond[8]=((((-1.0)*r12*x1880))+(((-1.0)*r11*x1882))+((r10*x1881))+(((-1.0)*x1868*x1870))+((r10*x1878))+((r11*x1879))+(((-1.0)*x1868*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1884=((1.0)*sj0);
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1884)),IkReal(((((-1.0)*gconst1*r21*x1884))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x1886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1885.value)+(((1.5707963267949)*(x1886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1887=IKcos(j4);
IkReal x1888=((1.0)*x1887);
IkReal x1889=IKsin(j4);
IkReal x1890=(gconst1*x1889);
IkReal x1891=((1.0)*gconst2*x1889);
IkReal x1892=((1.0)*sj0);
IkReal x1893=(cj1*sj2);
IkReal x1894=(cj2*sj1);
IkReal x1895=(gconst1*sj3);
IkReal x1896=(gconst2*sj3);
IkReal x1897=(cj3*x1889);
IkReal x1898=(cj3*gconst1*x1887);
IkReal x1899=((1.0)*cj3*gconst2*x1887);
IkReal x1900=(sj1*sj2);
IkReal x1901=((1.0)*cj1*cj2);
IkReal x1902=(cj3*gconst1);
IkReal x1903=(cj3*gconst2);
IkReal x1904=((1.0)*sj3*x1889);
IkReal x1905=(gconst2*sj3*x1887);
IkReal x1906=((1.0)*gconst1*sj3*x1887);
IkReal x1907=((1.0)*cj0);
evalcond[0]=(((r21*x1890))+(((-1.0)*r22*x1888))+(((-1.0)*r20*x1891)));
evalcond[1]=(((r11*x1890))+(((-1.0)*r12*x1888))+cj0+(((-1.0)*r10*x1891)));
evalcond[2]=((((-1.0)*r00*x1891))+(((-1.0)*x1892))+((r01*x1890))+(((-1.0)*r02*x1888)));
evalcond[3]=(((r22*x1897))+((r20*x1895))+(((-1.0)*r20*x1899))+x1893+x1894+((r21*x1898))+((r21*x1896)));
evalcond[4]=((((-1.0)*r22*x1904))+((r20*x1905))+(((-1.0)*r21*x1906))+(((-1.0)*x1901))+((r20*x1902))+((r21*x1903))+x1900);
evalcond[5]=(((r01*x1896))+((r02*x1897))+((cj0*x1900))+((r00*x1895))+(((-1.0)*cj0*x1901))+((r01*x1898))+(((-1.0)*r00*x1899)));
evalcond[6]=(((r10*x1895))+((r11*x1896))+((sj0*x1900))+(((-1.0)*r10*x1899))+((r11*x1898))+((r12*x1897))+(((-1.0)*cj1*cj2*x1892)));
evalcond[7]=(((r00*x1905))+((r00*x1902))+(((-1.0)*x1893*x1907))+((r01*x1903))+(((-1.0)*r01*x1906))+(((-1.0)*r02*x1904))+(((-1.0)*x1894*x1907)));
evalcond[8]=(((r10*x1902))+(((-1.0)*r12*x1904))+(((-1.0)*r11*x1906))+(((-1.0)*x1892*x1893))+((r11*x1903))+(((-1.0)*x1892*x1894))+((r10*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1908=((1.0)*r21);
IkReal x1909=((1.0)*r20);
IkReal x1911 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1911)==0){
continue;
}
IkReal x1910=pow(x1911,-0.5);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(((-1.0)*x1908)),IkReal(((-1.0)*x1909)),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1912.value))));
IkReal gconst4=((-1.0)*x1908*x1910);
IkReal gconst5=(x1909*x1910);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1913.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1914=((1.0)*r21);
IkReal x1915=((1.0)*r20);
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal(((-1.0)*x1914)),IkReal(((-1.0)*x1915)),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
IkReal x1916=((-1.0)*(x1918.value));
IkReal x1917=x1910;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1916);
IkReal gconst3=((3.14159265358979)+x1916);
IkReal gconst4=((-1.0)*x1914*x1917);
IkReal gconst5=(x1915*x1917);
j4eval[0]=1.0;
j4eval[1]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1919=((1.0)*r21);
IkReal x1920=((1.0)*r20);
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(((-1.0)*x1919)),IkReal(((-1.0)*x1920)),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
IkReal x1921=((-1.0)*(x1923.value));
IkReal x1922=x1910;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1921);
IkReal gconst3=((3.14159265358979)+x1921);
IkReal gconst4=((-1.0)*x1919*x1922);
IkReal gconst5=(x1920*x1922);
j4eval[0]=1.0;
j4eval[1]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1924=((1.0)*r21);
IkReal x1925=((1.0)*r20);
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(((-1.0)*x1924)),IkReal(((-1.0)*x1925)),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
IkReal x1926=((-1.0)*(x1928.value));
IkReal x1927=x1910;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1926);
IkReal gconst3=((3.14159265358979)+x1926);
IkReal gconst4=((-1.0)*x1924*x1927);
IkReal gconst5=(x1925*x1927);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=((-1.0)+(r22*r22));
j4eval[4]=((((r12*r12)*(sj0*sj0)))+(((cj0*cj0)*(r02*r02)))+(((2.0)*cj0*r02*r12*sj0)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=((1.0)*gconst4);
IkReal x1930=((1.0)*cj0);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1930))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r01*x1930))+(((-1.0)*r11*sj0*x1929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1929))+(((-1.0)*(1.0)*gconst5*r21)))),-1);
if(!x1932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1931.value)+(((1.5707963267949)*(x1932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1933=IKcos(j4);
IkReal x1934=((1.0)*x1933);
IkReal x1935=IKsin(j4);
IkReal x1936=(gconst4*x1935);
IkReal x1937=((1.0)*gconst5*x1935);
IkReal x1938=((1.0)*sj0);
IkReal x1939=(cj1*sj2);
IkReal x1940=(cj2*sj1);
IkReal x1941=(gconst4*sj3);
IkReal x1942=(gconst5*sj3);
IkReal x1943=(cj3*x1935);
IkReal x1944=(cj3*gconst4*x1933);
IkReal x1945=((1.0)*cj3*gconst5*x1933);
IkReal x1946=(sj1*sj2);
IkReal x1947=((1.0)*cj1*cj2);
IkReal x1948=(cj3*gconst4);
IkReal x1949=(cj3*gconst5);
IkReal x1950=((1.0)*sj3*x1935);
IkReal x1951=(gconst5*sj3*x1933);
IkReal x1952=((1.0)*gconst4*sj3*x1933);
IkReal x1953=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1937))+((r21*x1936))+(((-1.0)*r22*x1934)));
evalcond[1]=((((-1.0)*r10*x1937))+cj0+(((-1.0)*r12*x1934))+((r11*x1936)));
evalcond[2]=((((-1.0)*x1938))+((r01*x1936))+(((-1.0)*r02*x1934))+(((-1.0)*r00*x1937)));
evalcond[3]=(x1940+((r21*x1944))+(((-1.0)*r20*x1945))+((r21*x1942))+((r22*x1943))+x1939+((r20*x1941)));
evalcond[4]=(x1946+((r21*x1949))+((r20*x1951))+(((-1.0)*r22*x1950))+((r20*x1948))+(((-1.0)*r21*x1952))+(((-1.0)*x1947)));
evalcond[5]=((((-1.0)*cj0*x1947))+((r01*x1944))+((r00*x1941))+(((-1.0)*r00*x1945))+((cj0*x1946))+((r01*x1942))+((r02*x1943)));
evalcond[6]=(((r11*x1944))+(((-1.0)*cj1*cj2*x1938))+(((-1.0)*r10*x1945))+((sj0*x1946))+((r10*x1941))+((r12*x1943))+((r11*x1942)));
evalcond[7]=(((r01*x1949))+((r00*x1948))+((r00*x1951))+(((-1.0)*r01*x1952))+(((-1.0)*r02*x1950))+(((-1.0)*x1940*x1953))+(((-1.0)*x1939*x1953)));
evalcond[8]=((((-1.0)*r11*x1952))+((r10*x1951))+(((-1.0)*x1938*x1939))+(((-1.0)*r12*x1950))+((r11*x1949))+(((-1.0)*x1938*x1940))+((r10*x1948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1954=((1.0)*gconst5);
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1954))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
CheckValue<IkReal> x1956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1954))+(((-1.0)*(1.0)*gconst4*r00)))),-1);
if(!x1956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1955.value)+(((1.5707963267949)*(x1956.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1957=IKcos(j4);
IkReal x1958=((1.0)*x1957);
IkReal x1959=IKsin(j4);
IkReal x1960=(gconst4*x1959);
IkReal x1961=((1.0)*gconst5*x1959);
IkReal x1962=((1.0)*sj0);
IkReal x1963=(cj1*sj2);
IkReal x1964=(cj2*sj1);
IkReal x1965=(gconst4*sj3);
IkReal x1966=(gconst5*sj3);
IkReal x1967=(cj3*x1959);
IkReal x1968=(cj3*gconst4*x1957);
IkReal x1969=((1.0)*cj3*gconst5*x1957);
IkReal x1970=(sj1*sj2);
IkReal x1971=((1.0)*cj1*cj2);
IkReal x1972=(cj3*gconst4);
IkReal x1973=(cj3*gconst5);
IkReal x1974=((1.0)*sj3*x1959);
IkReal x1975=(gconst5*sj3*x1957);
IkReal x1976=((1.0)*gconst4*sj3*x1957);
IkReal x1977=((1.0)*cj0);
evalcond[0]=(((r21*x1960))+(((-1.0)*r20*x1961))+(((-1.0)*r22*x1958)));
evalcond[1]=(((r11*x1960))+(((-1.0)*r12*x1958))+cj0+(((-1.0)*r10*x1961)));
evalcond[2]=((((-1.0)*r02*x1958))+(((-1.0)*x1962))+((r01*x1960))+(((-1.0)*r00*x1961)));
evalcond[3]=(x1963+x1964+((r20*x1965))+((r21*x1966))+((r21*x1968))+(((-1.0)*r20*x1969))+((r22*x1967)));
evalcond[4]=((((-1.0)*r22*x1974))+((r21*x1973))+((r20*x1972))+((r20*x1975))+(((-1.0)*r21*x1976))+x1970+(((-1.0)*x1971)));
evalcond[5]=(((r01*x1966))+((r01*x1968))+(((-1.0)*cj0*x1971))+((cj0*x1970))+((r02*x1967))+(((-1.0)*r00*x1969))+((r00*x1965)));
evalcond[6]=(((sj0*x1970))+((r12*x1967))+(((-1.0)*r10*x1969))+((r11*x1966))+((r10*x1965))+(((-1.0)*cj1*cj2*x1962))+((r11*x1968)));
evalcond[7]=(((r00*x1972))+((r00*x1975))+((r01*x1973))+(((-1.0)*x1964*x1977))+(((-1.0)*r02*x1974))+(((-1.0)*r01*x1976))+(((-1.0)*x1963*x1977)));
evalcond[8]=(((r10*x1972))+(((-1.0)*r12*x1974))+((r10*x1975))+(((-1.0)*x1962*x1963))+(((-1.0)*x1962*x1964))+((r11*x1973))+(((-1.0)*r11*x1976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1978=((1.0)*sj0);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign((((gconst4*r10))+((gconst5*r11)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1978)),IkReal(((((-1.0)*gconst4*r21*x1978))+((gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1981=IKcos(j4);
IkReal x1982=((1.0)*x1981);
IkReal x1983=IKsin(j4);
IkReal x1984=(gconst4*x1983);
IkReal x1985=((1.0)*gconst5*x1983);
IkReal x1986=((1.0)*sj0);
IkReal x1987=(cj1*sj2);
IkReal x1988=(cj2*sj1);
IkReal x1989=(gconst4*sj3);
IkReal x1990=(gconst5*sj3);
IkReal x1991=(cj3*x1983);
IkReal x1992=(cj3*gconst4*x1981);
IkReal x1993=((1.0)*cj3*gconst5*x1981);
IkReal x1994=(sj1*sj2);
IkReal x1995=((1.0)*cj1*cj2);
IkReal x1996=(cj3*gconst4);
IkReal x1997=(cj3*gconst5);
IkReal x1998=((1.0)*sj3*x1983);
IkReal x1999=(gconst5*sj3*x1981);
IkReal x2000=((1.0)*gconst4*sj3*x1981);
IkReal x2001=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1982))+((r21*x1984))+(((-1.0)*r20*x1985)));
evalcond[1]=(((r11*x1984))+(((-1.0)*r12*x1982))+cj0+(((-1.0)*r10*x1985)));
evalcond[2]=((((-1.0)*x1986))+(((-1.0)*r00*x1985))+((r01*x1984))+(((-1.0)*r02*x1982)));
evalcond[3]=(((r21*x1992))+((r21*x1990))+x1988+x1987+((r22*x1991))+(((-1.0)*r20*x1993))+((r20*x1989)));
evalcond[4]=(x1994+(((-1.0)*r21*x2000))+(((-1.0)*x1995))+((r20*x1996))+((r20*x1999))+(((-1.0)*r22*x1998))+((r21*x1997)));
evalcond[5]=(((r01*x1992))+((r01*x1990))+((r00*x1989))+(((-1.0)*r00*x1993))+((r02*x1991))+(((-1.0)*cj0*x1995))+((cj0*x1994)));
evalcond[6]=(((r11*x1990))+(((-1.0)*r10*x1993))+((r11*x1992))+((sj0*x1994))+((r10*x1989))+((r12*x1991))+(((-1.0)*cj1*cj2*x1986)));
evalcond[7]=((((-1.0)*x1987*x2001))+((r00*x1999))+(((-1.0)*r01*x2000))+(((-1.0)*r02*x1998))+(((-1.0)*x1988*x2001))+((r01*x1997))+((r00*x1996)));
evalcond[8]=((((-1.0)*r12*x1998))+(((-1.0)*x1986*x1987))+(((-1.0)*r11*x2000))+((r11*x1997))+((r10*x1996))+(((-1.0)*x1986*x1988))+((r10*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2002=((1.0)*r00);
IkReal x2004 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2004)==0){
continue;
}
IkReal x2003=pow(x2004,-0.5);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2002)),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2005.value));
IkReal gconst7=(r01*x2003);
IkReal gconst8=((-1.0)*x2002*x2003);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2006.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2007=((1.0)*r00);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2007)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal x2008=((-1.0)*(x2010.value));
IkReal x2009=x2003;
sj5=gconst7;
cj5=gconst8;
j5=x2008;
IkReal gconst6=x2008;
IkReal gconst7=(r01*x2009);
IkReal gconst8=((-1.0)*x2007*x2009);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2011=((1.0)*r00);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2011)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
IkReal x2012=((-1.0)*(x2014.value));
IkReal x2013=x2003;
sj5=gconst7;
cj5=gconst8;
j5=x2012;
IkReal gconst6=x2012;
IkReal gconst7=(r01*x2013);
IkReal gconst8=((-1.0)*x2011*x2013);
IkReal x2015=(r12*sj0);
IkReal x2016=((1.0)*(r02*r02));
IkReal x2019 = ((1.0)+(((-1.0)*x2016)));
if(IKabs(x2019)==0){
continue;
}
IkReal x2017=pow(x2019,-0.5);
IkReal x2018=(cj0*x2017);
j4eval[0]=((IKabs(((((-1.0)*x2015))+(((-1.0)*cj0*r02)))))+(IKabs(((((-1.0)*x2016*x2018))+x2018+(((-1.0)*r02*x2015*x2017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2020=((1.0)*r00);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2020)),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
IkReal x2021=((-1.0)*(x2023.value));
IkReal x2022=x2003;
sj5=gconst7;
cj5=gconst8;
j5=x2021;
IkReal gconst6=x2021;
IkReal gconst7=(r01*x2022);
IkReal gconst8=((-1.0)*x2020*x2022);
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r02*r02)))),-1);
if(!x2026.valid){
continue;
}
IkReal x2024=(cj3*(x2026.value));
IkReal x2025=((((2.0)*r00*r01*r20*r21*x2024))+((x2024*(r00*r00)*(r20*r20)))+((cj3*(r22*r22)))+((x2024*(r01*r01)*(r21*r21))));
j4eval[0]=x2025;
j4eval[1]=IKsign(x2025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2027=(gconst8*r20);
IkReal x2028=gconst7*gconst7;
IkReal x2029=r21*r21;
IkReal x2030=gconst8*gconst8;
IkReal x2031=r20*r20;
IkReal x2032=((1.0)*r22);
IkReal x2033=(cj1*sj2);
IkReal x2034=(cj2*sj1);
IkReal x2035=((1.0)*r22*sj3);
IkReal x2036=((1.0)*gconst7*r21);
IkReal x2037=(gconst7*gconst8*sj3);
IkReal x2038=(r20*r21*sj3);
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*gconst7*r21*x2027))+((cj3*(r22*r22)))+((cj3*x2030*x2031))+((cj3*x2028*x2029)))),-1);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(((((-1.0)*gconst8*r21*x2035))+(((-1.0)*gconst7*r20*x2035))+(((-1.0)*x2032*x2034))+(((-1.0)*x2032*x2033)))),IkReal((((x2030*x2038))+(((-1.0)*x2033*x2036))+(((-1.0)*x2028*x2038))+((x2027*x2034))+(((-1.0)*x2034*x2036))+((x2031*x2037))+(((-1.0)*x2029*x2037))+((x2027*x2033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2039.value)))+(x2040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2041=IKcos(j4);
IkReal x2042=((1.0)*x2041);
IkReal x2043=IKsin(j4);
IkReal x2044=(gconst7*x2043);
IkReal x2045=((1.0)*gconst8*x2043);
IkReal x2046=((1.0)*sj0);
IkReal x2047=(cj1*sj2);
IkReal x2048=(cj2*sj1);
IkReal x2049=(gconst7*sj3);
IkReal x2050=(gconst8*sj3);
IkReal x2051=(cj3*x2043);
IkReal x2052=(cj3*gconst7*x2041);
IkReal x2053=((1.0)*cj3*gconst8*x2041);
IkReal x2054=(sj1*sj2);
IkReal x2055=((1.0)*cj1*cj2);
IkReal x2056=(cj3*gconst7);
IkReal x2057=(cj3*gconst8);
IkReal x2058=((1.0)*sj3*x2043);
IkReal x2059=(gconst8*sj3*x2041);
IkReal x2060=((1.0)*gconst7*sj3*x2041);
IkReal x2061=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2045))+(((-1.0)*r22*x2042))+((r21*x2044)));
evalcond[1]=(((r11*x2044))+cj0+(((-1.0)*r12*x2042))+(((-1.0)*r10*x2045)));
evalcond[2]=(((r01*x2044))+(((-1.0)*r00*x2045))+(((-1.0)*x2046))+(((-1.0)*r02*x2042)));
evalcond[3]=(((r22*x2051))+(((-1.0)*r20*x2053))+((r20*x2049))+((r21*x2052))+x2047+x2048+((r21*x2050)));
evalcond[4]=((((-1.0)*r21*x2060))+(((-1.0)*x2055))+((r21*x2057))+x2054+(((-1.0)*r22*x2058))+((r20*x2059))+((r20*x2056)));
evalcond[5]=((((-1.0)*r00*x2053))+(((-1.0)*cj0*x2055))+((r02*x2051))+((r00*x2049))+((r01*x2052))+((r01*x2050))+((cj0*x2054)));
evalcond[6]=(((sj0*x2054))+((r12*x2051))+(((-1.0)*r10*x2053))+(((-1.0)*cj1*cj2*x2046))+((r11*x2050))+((r10*x2049))+((r11*x2052)));
evalcond[7]=(((r00*x2059))+(((-1.0)*x2048*x2061))+(((-1.0)*r01*x2060))+(((-1.0)*r02*x2058))+((r00*x2056))+((r01*x2057))+(((-1.0)*x2047*x2061)));
evalcond[8]=((((-1.0)*r11*x2060))+(((-1.0)*r12*x2058))+((r10*x2056))+((r10*x2059))+((r11*x2057))+(((-1.0)*x2046*x2047))+(((-1.0)*x2046*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2062=((1.0)*gconst7);
IkReal x2063=((1.0)*cj0);
CheckValue<IkReal> x2064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2062))+(((-1.0)*(1.0)*gconst8*r21)))),-1);
if(!x2064.valid){
continue;
}
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2063)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r01*x2063))+(((-1.0)*r11*sj0*x2062))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2064.value)))+(x2065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2066=IKcos(j4);
IkReal x2067=((1.0)*x2066);
IkReal x2068=IKsin(j4);
IkReal x2069=(gconst7*x2068);
IkReal x2070=((1.0)*gconst8*x2068);
IkReal x2071=((1.0)*sj0);
IkReal x2072=(cj1*sj2);
IkReal x2073=(cj2*sj1);
IkReal x2074=(gconst7*sj3);
IkReal x2075=(gconst8*sj3);
IkReal x2076=(cj3*x2068);
IkReal x2077=(cj3*gconst7*x2066);
IkReal x2078=((1.0)*cj3*gconst8*x2066);
IkReal x2079=(sj1*sj2);
IkReal x2080=((1.0)*cj1*cj2);
IkReal x2081=(cj3*gconst7);
IkReal x2082=(cj3*gconst8);
IkReal x2083=((1.0)*sj3*x2068);
IkReal x2084=(gconst8*sj3*x2066);
IkReal x2085=((1.0)*gconst7*sj3*x2066);
IkReal x2086=((1.0)*cj0);
evalcond[0]=(((r21*x2069))+(((-1.0)*r20*x2070))+(((-1.0)*r22*x2067)));
evalcond[1]=((((-1.0)*r10*x2070))+(((-1.0)*r12*x2067))+((r11*x2069))+cj0);
evalcond[2]=(((r01*x2069))+(((-1.0)*r00*x2070))+(((-1.0)*x2071))+(((-1.0)*r02*x2067)));
evalcond[3]=((((-1.0)*r20*x2078))+((r22*x2076))+x2073+x2072+((r21*x2075))+((r20*x2074))+((r21*x2077)));
evalcond[4]=((((-1.0)*r21*x2085))+x2079+((r20*x2081))+(((-1.0)*r22*x2083))+((r21*x2082))+((r20*x2084))+(((-1.0)*x2080)));
evalcond[5]=(((r02*x2076))+((cj0*x2079))+(((-1.0)*cj0*x2080))+((r01*x2075))+((r00*x2074))+((r01*x2077))+(((-1.0)*r00*x2078)));
evalcond[6]=((((-1.0)*cj1*cj2*x2071))+((r10*x2074))+(((-1.0)*r10*x2078))+((r12*x2076))+((r11*x2075))+((sj0*x2079))+((r11*x2077)));
evalcond[7]=((((-1.0)*x2072*x2086))+((r01*x2082))+((r00*x2084))+((r00*x2081))+(((-1.0)*r02*x2083))+(((-1.0)*x2073*x2086))+(((-1.0)*r01*x2085)));
evalcond[8]=((((-1.0)*x2071*x2073))+((r10*x2084))+(((-1.0)*x2071*x2072))+(((-1.0)*r11*x2085))+((r11*x2082))+((r10*x2081))+(((-1.0)*r12*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2087=((1.0)*sj0);
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2087)),IkReal(((((-1.0)*gconst7*r21*x2087))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign((((gconst8*r11))+((gconst7*r10)))),-1);
if(!x2089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2088.value)+(((1.5707963267949)*(x2089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2090=IKcos(j4);
IkReal x2091=((1.0)*x2090);
IkReal x2092=IKsin(j4);
IkReal x2093=(gconst7*x2092);
IkReal x2094=((1.0)*gconst8*x2092);
IkReal x2095=((1.0)*sj0);
IkReal x2096=(cj1*sj2);
IkReal x2097=(cj2*sj1);
IkReal x2098=(gconst7*sj3);
IkReal x2099=(gconst8*sj3);
IkReal x2100=(cj3*x2092);
IkReal x2101=(cj3*gconst7*x2090);
IkReal x2102=((1.0)*cj3*gconst8*x2090);
IkReal x2103=(sj1*sj2);
IkReal x2104=((1.0)*cj1*cj2);
IkReal x2105=(cj3*gconst7);
IkReal x2106=(cj3*gconst8);
IkReal x2107=((1.0)*sj3*x2092);
IkReal x2108=(gconst8*sj3*x2090);
IkReal x2109=((1.0)*gconst7*sj3*x2090);
IkReal x2110=((1.0)*cj0);
evalcond[0]=(((r21*x2093))+(((-1.0)*r22*x2091))+(((-1.0)*r20*x2094)));
evalcond[1]=((((-1.0)*r12*x2091))+(((-1.0)*r10*x2094))+cj0+((r11*x2093)));
evalcond[2]=(((r01*x2093))+(((-1.0)*x2095))+(((-1.0)*r00*x2094))+(((-1.0)*r02*x2091)));
evalcond[3]=(x2097+x2096+((r21*x2101))+((r20*x2098))+(((-1.0)*r20*x2102))+((r22*x2100))+((r21*x2099)));
evalcond[4]=(((r21*x2106))+(((-1.0)*x2104))+((r20*x2108))+(((-1.0)*r22*x2107))+x2103+((r20*x2105))+(((-1.0)*r21*x2109)));
evalcond[5]=(((cj0*x2103))+((r02*x2100))+((r01*x2101))+(((-1.0)*r00*x2102))+((r01*x2099))+((r00*x2098))+(((-1.0)*cj0*x2104)));
evalcond[6]=(((r10*x2098))+((r12*x2100))+(((-1.0)*r10*x2102))+((r11*x2101))+(((-1.0)*cj1*cj2*x2095))+((sj0*x2103))+((r11*x2099)));
evalcond[7]=(((r00*x2108))+(((-1.0)*x2096*x2110))+(((-1.0)*r01*x2109))+(((-1.0)*x2097*x2110))+((r00*x2105))+((r01*x2106))+(((-1.0)*r02*x2107)));
evalcond[8]=((((-1.0)*r12*x2107))+(((-1.0)*x2095*x2097))+((r11*x2106))+(((-1.0)*x2095*x2096))+((r10*x2108))+(((-1.0)*r11*x2109))+((r10*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2111=((1.0)*r01);
IkReal x2112=((1.0)*r00);
IkReal x2114 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2114)==0){
continue;
}
IkReal x2113=pow(x2114,-0.5);
CheckValue<IkReal> x2115 = IKatan2WithCheck(IkReal(((-1.0)*x2111)),IkReal(((-1.0)*x2112)),IKFAST_ATAN2_MAGTHRESH);
if(!x2115.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2115.value))));
IkReal gconst10=((-1.0)*x2111*x2113);
IkReal gconst11=(x2112*x2113);
CheckValue<IkReal> x2116 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2116.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2116.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2117=((1.0)*r01);
IkReal x2118=((1.0)*r00);
CheckValue<IkReal> x2121 = IKatan2WithCheck(IkReal(((-1.0)*x2117)),IkReal(((-1.0)*x2118)),IKFAST_ATAN2_MAGTHRESH);
if(!x2121.valid){
continue;
}
IkReal x2119=((-1.0)*(x2121.value));
IkReal x2120=x2113;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2119);
IkReal gconst9=((3.14159265358979)+x2119);
IkReal gconst10=((-1.0)*x2117*x2120);
IkReal gconst11=(x2118*x2120);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[6];
IkReal x2122=((1.0)*r01);
IkReal x2123=((1.0)*r00);
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal(((-1.0)*x2122)),IkReal(((-1.0)*x2123)),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
IkReal x2124=((-1.0)*(x2126.value));
IkReal x2125=x2113;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2124);
IkReal gconst9=((3.14159265358979)+x2124);
IkReal gconst10=((-1.0)*x2122*x2125);
IkReal gconst11=(x2123*x2125);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=cj0;
j4eval[4]=r22;
j4eval[5]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  || IKabs(j4eval[5]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2127=((1.0)*r01);
IkReal x2128=((1.0)*r00);
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal(((-1.0)*x2127)),IkReal(((-1.0)*x2128)),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
IkReal x2129=((-1.0)*(x2131.value));
IkReal x2130=x2113;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2129);
IkReal gconst9=((3.14159265358979)+x2129);
IkReal gconst10=((-1.0)*x2127*x2130);
IkReal gconst11=(x2128*x2130);
IkReal x2132=(r12*sj0);
IkReal x2133=((1.0)*(r02*r02));
IkReal x2136 = ((1.0)+(((-1.0)*x2133)));
if(IKabs(x2136)==0){
continue;
}
IkReal x2134=pow(x2136,-0.5);
IkReal x2135=(cj0*x2134);
j4eval[0]=((((1.0)*(IKabs(((((-1.0)*r02*x2132*x2134))+(((-1.0)*x2133*x2135))+x2135)))))+(((1.0)*(IKabs(((((-1.0)*cj0*r02))+(((-1.0)*x2132))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2137=((1.0)*gconst10);
IkReal x2138=((1.0)*cj0);
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst11*r21))+(((-1.0)*r20*x2137)))),-1);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2138))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*r11*sj0*x2137))+(((-1.0)*gconst10*r01*x2138))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2139.value)))+(x2140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2141=IKcos(j4);
IkReal x2142=((1.0)*x2141);
IkReal x2143=IKsin(j4);
IkReal x2144=(gconst10*x2143);
IkReal x2145=((1.0)*gconst11*x2143);
IkReal x2146=((1.0)*sj0);
IkReal x2147=(cj1*sj2);
IkReal x2148=(cj2*sj1);
IkReal x2149=(gconst10*sj3);
IkReal x2150=(gconst11*sj3);
IkReal x2151=(cj3*x2143);
IkReal x2152=(cj3*gconst10*x2141);
IkReal x2153=((1.0)*cj3*gconst11*x2141);
IkReal x2154=(sj1*sj2);
IkReal x2155=((1.0)*cj1*cj2);
IkReal x2156=(cj3*gconst10);
IkReal x2157=(cj3*gconst11);
IkReal x2158=((1.0)*sj3*x2143);
IkReal x2159=(gconst11*sj3*x2141);
IkReal x2160=((1.0)*gconst10*sj3*x2141);
IkReal x2161=((1.0)*cj0);
evalcond[0]=(((r21*x2144))+(((-1.0)*r20*x2145))+(((-1.0)*r22*x2142)));
evalcond[1]=((((-1.0)*r10*x2145))+((r11*x2144))+cj0+(((-1.0)*r12*x2142)));
evalcond[2]=((((-1.0)*r00*x2145))+(((-1.0)*x2146))+((r01*x2144))+(((-1.0)*r02*x2142)));
evalcond[3]=(((r21*x2150))+((r21*x2152))+x2148+x2147+(((-1.0)*r20*x2153))+((r20*x2149))+((r22*x2151)));
evalcond[4]=((((-1.0)*x2155))+(((-1.0)*r21*x2160))+((r20*x2156))+x2154+((r20*x2159))+((r21*x2157))+(((-1.0)*r22*x2158)));
evalcond[5]=(((cj0*x2154))+((r01*x2152))+(((-1.0)*r00*x2153))+(((-1.0)*cj0*x2155))+((r02*x2151))+((r00*x2149))+((r01*x2150)));
evalcond[6]=(((r10*x2149))+((sj0*x2154))+((r11*x2152))+((r12*x2151))+(((-1.0)*r10*x2153))+(((-1.0)*cj1*cj2*x2146))+((r11*x2150)));
evalcond[7]=((((-1.0)*r02*x2158))+(((-1.0)*r01*x2160))+((r01*x2157))+(((-1.0)*x2148*x2161))+((r00*x2156))+(((-1.0)*x2147*x2161))+((r00*x2159)));
evalcond[8]=((((-1.0)*r12*x2158))+((r10*x2156))+(((-1.0)*x2146*x2147))+((r11*x2157))+(((-1.0)*r11*x2160))+((r10*x2159))+(((-1.0)*x2146*x2148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2162=((1.0)*gconst11);
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x2162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst10*r00))+(((-1.0)*r01*x2162)))),-1);
if(!x2164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2163.value)+(((1.5707963267949)*(x2164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2165=IKcos(j4);
IkReal x2166=((1.0)*x2165);
IkReal x2167=IKsin(j4);
IkReal x2168=(gconst10*x2167);
IkReal x2169=((1.0)*gconst11*x2167);
IkReal x2170=((1.0)*sj0);
IkReal x2171=(cj1*sj2);
IkReal x2172=(cj2*sj1);
IkReal x2173=(gconst10*sj3);
IkReal x2174=(gconst11*sj3);
IkReal x2175=(cj3*x2167);
IkReal x2176=(cj3*gconst10*x2165);
IkReal x2177=((1.0)*cj3*gconst11*x2165);
IkReal x2178=(sj1*sj2);
IkReal x2179=((1.0)*cj1*cj2);
IkReal x2180=(cj3*gconst10);
IkReal x2181=(cj3*gconst11);
IkReal x2182=((1.0)*sj3*x2167);
IkReal x2183=(gconst11*sj3*x2165);
IkReal x2184=((1.0)*gconst10*sj3*x2165);
IkReal x2185=((1.0)*cj0);
evalcond[0]=(((r21*x2168))+(((-1.0)*r20*x2169))+(((-1.0)*r22*x2166)));
evalcond[1]=((((-1.0)*r12*x2166))+(((-1.0)*r10*x2169))+((r11*x2168))+cj0);
evalcond[2]=(((r01*x2168))+(((-1.0)*r02*x2166))+(((-1.0)*r00*x2169))+(((-1.0)*x2170)));
evalcond[3]=(x2172+x2171+((r21*x2174))+((r21*x2176))+((r20*x2173))+(((-1.0)*r20*x2177))+((r22*x2175)));
evalcond[4]=(x2178+(((-1.0)*x2179))+((r20*x2180))+(((-1.0)*r21*x2184))+(((-1.0)*r22*x2182))+((r21*x2181))+((r20*x2183)));
evalcond[5]=(((cj0*x2178))+((r02*x2175))+((r00*x2173))+(((-1.0)*cj0*x2179))+((r01*x2174))+(((-1.0)*r00*x2177))+((r01*x2176)));
evalcond[6]=((((-1.0)*cj1*cj2*x2170))+((r11*x2176))+((r10*x2173))+((r11*x2174))+((sj0*x2178))+(((-1.0)*r10*x2177))+((r12*x2175)));
evalcond[7]=(((r01*x2181))+(((-1.0)*r02*x2182))+(((-1.0)*r01*x2184))+(((-1.0)*x2172*x2185))+((r00*x2183))+((r00*x2180))+(((-1.0)*x2171*x2185)));
evalcond[8]=(((r10*x2183))+((r10*x2180))+(((-1.0)*x2170*x2172))+((r11*x2181))+(((-1.0)*r11*x2184))+(((-1.0)*r12*x2182))+(((-1.0)*x2170*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2186=((1.0)*sj0);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2186)),IkReal(((((-1.0)*gconst10*r21*x2186))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign((((gconst11*r11))+((gconst10*r10)))),-1);
if(!x2188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2187.value)+(((1.5707963267949)*(x2188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2189=IKcos(j4);
IkReal x2190=((1.0)*x2189);
IkReal x2191=IKsin(j4);
IkReal x2192=(gconst10*x2191);
IkReal x2193=((1.0)*gconst11*x2191);
IkReal x2194=((1.0)*sj0);
IkReal x2195=(cj1*sj2);
IkReal x2196=(cj2*sj1);
IkReal x2197=(gconst10*sj3);
IkReal x2198=(gconst11*sj3);
IkReal x2199=(cj3*x2191);
IkReal x2200=(cj3*gconst10*x2189);
IkReal x2201=((1.0)*cj3*gconst11*x2189);
IkReal x2202=(sj1*sj2);
IkReal x2203=((1.0)*cj1*cj2);
IkReal x2204=(cj3*gconst10);
IkReal x2205=(cj3*gconst11);
IkReal x2206=((1.0)*sj3*x2191);
IkReal x2207=(gconst11*sj3*x2189);
IkReal x2208=((1.0)*gconst10*sj3*x2189);
IkReal x2209=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2190))+(((-1.0)*r20*x2193))+((r21*x2192)));
evalcond[1]=((((-1.0)*r10*x2193))+((r11*x2192))+cj0+(((-1.0)*r12*x2190)));
evalcond[2]=((((-1.0)*x2194))+(((-1.0)*r02*x2190))+((r01*x2192))+(((-1.0)*r00*x2193)));
evalcond[3]=(((r21*x2200))+x2195+x2196+(((-1.0)*r20*x2201))+((r21*x2198))+((r20*x2197))+((r22*x2199)));
evalcond[4]=(((r20*x2207))+(((-1.0)*r22*x2206))+x2202+((r21*x2205))+((r20*x2204))+(((-1.0)*x2203))+(((-1.0)*r21*x2208)));
evalcond[5]=((((-1.0)*r00*x2201))+(((-1.0)*cj0*x2203))+((r02*x2199))+((r01*x2200))+((cj0*x2202))+((r00*x2197))+((r01*x2198)));
evalcond[6]=(((r10*x2197))+(((-1.0)*r10*x2201))+((sj0*x2202))+((r11*x2200))+((r11*x2198))+((r12*x2199))+(((-1.0)*cj1*cj2*x2194)));
evalcond[7]=(((r00*x2207))+(((-1.0)*r01*x2208))+(((-1.0)*x2195*x2209))+(((-1.0)*x2196*x2209))+(((-1.0)*r02*x2206))+((r01*x2205))+((r00*x2204)));
evalcond[8]=((((-1.0)*r12*x2206))+(((-1.0)*x2194*x2195))+(((-1.0)*x2194*x2196))+((r10*x2204))+((r11*x2205))+((r10*x2207))+(((-1.0)*r11*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2210=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2210;
j4eval[1]=IKsign(x2210);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2211=((1.0)*sj5);
IkReal x2212=((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2211)));
j4eval[0]=x2212;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x2211))+((cj5*r10))))));
j4eval[2]=IKsign(x2212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2213=(r01*((cj3*r21)));
IkReal x2214=cj5*cj5;
IkReal x2215=((1.0)*cj5*sj5);
IkReal x2216=((((-1.0)*x2213*x2214))+((cj3*r00*r20*x2214))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x2215))+x2213+(((-1.0)*cj3*r01*r20*x2215)));
j4eval[0]=x2216;
j4eval[1]=IKsign(x2216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=(r01*((cj3*r21)));
IkReal x2218=cj5*cj5;
IkReal x2219=(cj5*sj5);
IkReal x2220=((1.0)*cj5*r01*sj3);
IkReal x2221=((1.0)*r00*sj3);
IkReal x2222=(sj3*x2218);
CheckValue<IkReal> x2223=IKPowWithIntegerCheck(IKsign((((cj3*r00*r20*x2218))+((cj3*r02*r22))+(((-1.0)*x2217*x2218))+(((-1.0)*cj3*r00*r21*x2219))+(((-1.0)*cj3*cj5*r01*r20*sj5))+x2217)),-1);
if(!x2223.valid){
continue;
}
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2221))+(((-1.0)*r22*x2220)))),IkReal(((((-1.0)*r21*sj5*x2220))+((r01*r20*x2222))+(((-1.0)*r21*x2221))+((r00*r21*x2222))+((r00*r20*sj3*x2219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2223.value)))+(x2224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2225=IKcos(j4);
IkReal x2226=((1.0)*x2225);
IkReal x2227=IKsin(j4);
IkReal x2228=(sj5*x2227);
IkReal x2229=((1.0)*cj5*x2227);
IkReal x2230=(cj5*sj3);
IkReal x2231=(sj3*sj5);
IkReal x2232=(cj3*x2227);
IkReal x2233=(cj3*sj5*x2225);
IkReal x2234=((1.0)*cj3*cj5*x2225);
IkReal x2235=(cj3*cj5);
IkReal x2236=(cj3*sj5);
IkReal x2237=((1.0)*sj3*x2227);
IkReal x2238=(cj5*sj3*x2225);
IkReal x2239=((1.0)*sj3*sj5*x2225);
IkReal x2240=(cj1*sj2);
IkReal x2241=(cj2*sj1);
IkReal x2242=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2226))+(((-1.0)*r20*x2229))+((r21*x2228)));
evalcond[1]=((((-1.0)*r12*x2226))+((r11*x2228))+(((-1.0)*r10*x2229)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x2229))+((r01*x2228))+(((-1.0)*r02*x2226)));
evalcond[3]=(((r02*x2232))+((r00*x2231))+((r01*x2233))+((r01*x2230))+(((-1.0)*r00*x2234)));
evalcond[4]=((((-1.0)*r02*x2237))+((r01*x2235))+((r00*x2236))+(((-1.0)*r01*x2239))+((r00*x2238)));
evalcond[5]=((((-1.0)*r20*x2234))+((r21*x2233))+((r21*x2230))+((r20*x2231))+x2240+x2241+((r22*x2232)));
evalcond[6]=((((-1.0)*r10*x2234))+((r12*x2232))+((r11*x2230))+x2242+((r10*x2231))+((r11*x2233)));
evalcond[7]=(((r21*x2235))+((r20*x2238))+((r20*x2236))+(((-1.0)*r22*x2237))+(((-1.0)*r21*x2239))+x2242);
evalcond[8]=(((r10*x2236))+(((-1.0)*x2241))+((r10*x2238))+(((-1.0)*r11*x2239))+((r11*x2235))+(((-1.0)*r12*x2237))+(((-1.0)*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2243=((1.0)*sj5);
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2243)))),-1);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r12)))),IkReal(((((-1.0)*r11*x2243))+((cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2244.value)))+(x2245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2246=IKcos(j4);
IkReal x2247=((1.0)*x2246);
IkReal x2248=IKsin(j4);
IkReal x2249=(sj5*x2248);
IkReal x2250=((1.0)*cj5*x2248);
IkReal x2251=(cj5*sj3);
IkReal x2252=(sj3*sj5);
IkReal x2253=(cj3*x2248);
IkReal x2254=(cj3*sj5*x2246);
IkReal x2255=((1.0)*cj3*cj5*x2246);
IkReal x2256=(cj3*cj5);
IkReal x2257=(cj3*sj5);
IkReal x2258=((1.0)*sj3*x2248);
IkReal x2259=(cj5*sj3*x2246);
IkReal x2260=((1.0)*sj3*sj5*x2246);
IkReal x2261=(cj1*sj2);
IkReal x2262=(cj2*sj1);
IkReal x2263=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2250))+((r21*x2249))+(((-1.0)*r22*x2247)));
evalcond[1]=((((-1.0)*r10*x2250))+((r11*x2249))+(((-1.0)*r12*x2247)));
evalcond[2]=((-1.0)+((r01*x2249))+(((-1.0)*r02*x2247))+(((-1.0)*r00*x2250)));
evalcond[3]=(((r02*x2253))+((r01*x2251))+((r00*x2252))+((r01*x2254))+(((-1.0)*r00*x2255)));
evalcond[4]=(((r00*x2259))+(((-1.0)*r02*x2258))+(((-1.0)*r01*x2260))+((r00*x2257))+((r01*x2256)));
evalcond[5]=(((r21*x2251))+x2262+x2261+((r22*x2253))+((r21*x2254))+(((-1.0)*r20*x2255))+((r20*x2252)));
evalcond[6]=(((r11*x2254))+x2263+(((-1.0)*r10*x2255))+((r12*x2253))+((r11*x2251))+((r10*x2252)));
evalcond[7]=((((-1.0)*r21*x2260))+x2263+((r20*x2259))+((r21*x2256))+((r20*x2257))+(((-1.0)*r22*x2258)));
evalcond[8]=(((r10*x2257))+(((-1.0)*r11*x2260))+((r10*x2259))+(((-1.0)*r12*x2258))+(((-1.0)*x2262))+(((-1.0)*x2261))+((r11*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2264=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2264.valid){
continue;
}
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2264.value)))+(x2265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2266=IKcos(j4);
IkReal x2267=((1.0)*x2266);
IkReal x2268=IKsin(j4);
IkReal x2269=(sj5*x2268);
IkReal x2270=((1.0)*cj5*x2268);
IkReal x2271=(cj5*sj3);
IkReal x2272=(sj3*sj5);
IkReal x2273=(cj3*x2268);
IkReal x2274=(cj3*sj5*x2266);
IkReal x2275=((1.0)*cj3*cj5*x2266);
IkReal x2276=(cj3*cj5);
IkReal x2277=(cj3*sj5);
IkReal x2278=((1.0)*sj3*x2268);
IkReal x2279=(cj5*sj3*x2266);
IkReal x2280=((1.0)*sj3*sj5*x2266);
IkReal x2281=(cj1*sj2);
IkReal x2282=(cj2*sj1);
IkReal x2283=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2270))+(((-1.0)*r22*x2267))+((r21*x2269)));
evalcond[1]=((((-1.0)*r10*x2270))+(((-1.0)*r12*x2267))+((r11*x2269)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x2270))+(((-1.0)*r02*x2267))+((r01*x2269)));
evalcond[3]=(((r01*x2271))+(((-1.0)*r00*x2275))+((r02*x2273))+((r00*x2272))+((r01*x2274)));
evalcond[4]=(((r01*x2276))+(((-1.0)*r02*x2278))+((r00*x2277))+(((-1.0)*r01*x2280))+((r00*x2279)));
evalcond[5]=(x2281+x2282+((r21*x2274))+(((-1.0)*r20*x2275))+((r22*x2273))+((r21*x2271))+((r20*x2272)));
evalcond[6]=(x2283+((r12*x2273))+((r10*x2272))+((r11*x2271))+(((-1.0)*r10*x2275))+((r11*x2274)));
evalcond[7]=(x2283+(((-1.0)*r21*x2280))+(((-1.0)*r22*x2278))+((r20*x2277))+((r20*x2279))+((r21*x2276)));
evalcond[8]=((((-1.0)*x2281))+(((-1.0)*x2282))+(((-1.0)*r11*x2280))+((r11*x2276))+((r10*x2279))+((r10*x2277))+(((-1.0)*r12*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2284=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2284;
j4eval[1]=IKsign(x2284);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2285=((1.0)*cj5);
IkReal x2286=((((-1.0)*r21*x2285))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x2286;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2285))))));
j4eval[2]=IKsign(x2286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2287=(r01*((cj3*r21)));
IkReal x2288=cj5*cj5;
IkReal x2289=((1.0)*cj5*sj5);
IkReal x2290=((((-1.0)*x2287*x2288))+((cj3*r00*r20*x2288))+x2287+(((-1.0)*cj3*r00*r21*x2289))+((cj3*r02*r22))+(((-1.0)*cj3*r01*r20*x2289)));
j4eval[0]=x2290;
j4eval[1]=IKsign(x2290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2291=(r01*((cj3*r21)));
IkReal x2292=cj5*cj5;
IkReal x2293=(cj5*sj5);
IkReal x2294=((1.0)*cj5*r01*sj3);
IkReal x2295=((1.0)*r00*sj3);
IkReal x2296=(sj3*x2292);
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2294))+(((-1.0)*r22*sj5*x2295)))),IkReal((((r00*r20*sj3*x2293))+((r01*r20*x2296))+(((-1.0)*r21*x2295))+((r00*r21*x2296))+(((-1.0)*r21*sj5*x2294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
CheckValue<IkReal> x2298=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2291*x2292))+((cj3*r02*r22))+x2291+(((-1.0)*cj3*cj5*r01*r20*sj5))+(((-1.0)*cj3*r00*r21*x2293))+((cj3*r00*r20*x2292)))),-1);
if(!x2298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2297.value)+(((1.5707963267949)*(x2298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2299=IKcos(j4);
IkReal x2300=((1.0)*x2299);
IkReal x2301=IKsin(j4);
IkReal x2302=(sj5*x2301);
IkReal x2303=((1.0)*cj5*x2301);
IkReal x2304=(cj5*sj3);
IkReal x2305=(sj3*sj5);
IkReal x2306=(cj3*x2301);
IkReal x2307=(cj3*sj5*x2299);
IkReal x2308=((1.0)*cj3*cj5*x2299);
IkReal x2309=(cj3*cj5);
IkReal x2310=(cj3*sj5);
IkReal x2311=((1.0)*sj3*x2301);
IkReal x2312=(cj5*sj3*x2299);
IkReal x2313=((1.0)*sj3*sj5*x2299);
IkReal x2314=(((cj1*sj2))+((cj2*sj1)));
IkReal x2315=(cj1*cj2);
IkReal x2316=(sj1*sj2);
evalcond[0]=(((r21*x2302))+(((-1.0)*r22*x2300))+(((-1.0)*r20*x2303)));
evalcond[1]=((((-1.0)*r12*x2300))+((r11*x2302))+(((-1.0)*r10*x2303)));
evalcond[2]=((1.0)+((r01*x2302))+(((-1.0)*r02*x2300))+(((-1.0)*r00*x2303)));
evalcond[3]=((((-1.0)*r00*x2308))+((r02*x2306))+((r01*x2304))+((r01*x2307))+((r00*x2305)));
evalcond[4]=(((r00*x2312))+((r01*x2309))+(((-1.0)*r01*x2313))+(((-1.0)*r02*x2311))+((r00*x2310)));
evalcond[5]=(((r21*x2304))+(((-1.0)*r20*x2308))+((r21*x2307))+((r20*x2305))+((r22*x2306))+x2314);
evalcond[6]=(((r11*x2309))+((r10*x2310))+(((-1.0)*r12*x2311))+((r10*x2312))+(((-1.0)*r11*x2313))+x2314);
evalcond[7]=(((r11*x2307))+((r10*x2305))+((r11*x2304))+((r12*x2306))+(((-1.0)*x2316))+(((-1.0)*r10*x2308))+x2315);
evalcond[8]=(((r20*x2312))+(((-1.0)*r21*x2313))+((r21*x2309))+((r20*x2310))+(((-1.0)*r22*x2311))+(((-1.0)*x2315))+x2316);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2317=((1.0)*cj5);
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2317))+(((-1.0)*(1.0)*r20*sj5)))),-1);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2318.value)))+(x2319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2320=IKcos(j4);
IkReal x2321=((1.0)*x2320);
IkReal x2322=IKsin(j4);
IkReal x2323=(sj5*x2322);
IkReal x2324=((1.0)*cj5*x2322);
IkReal x2325=(cj5*sj3);
IkReal x2326=(sj3*sj5);
IkReal x2327=(cj3*x2322);
IkReal x2328=(cj3*sj5*x2320);
IkReal x2329=((1.0)*cj3*cj5*x2320);
IkReal x2330=(cj3*cj5);
IkReal x2331=(cj3*sj5);
IkReal x2332=((1.0)*sj3*x2322);
IkReal x2333=(cj5*sj3*x2320);
IkReal x2334=((1.0)*sj3*sj5*x2320);
IkReal x2335=(((cj1*sj2))+((cj2*sj1)));
IkReal x2336=(cj1*cj2);
IkReal x2337=(sj1*sj2);
evalcond[0]=((((-1.0)*r20*x2324))+(((-1.0)*r22*x2321))+((r21*x2323)));
evalcond[1]=(((r11*x2323))+(((-1.0)*r12*x2321))+(((-1.0)*r10*x2324)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2321))+((r01*x2323))+(((-1.0)*r00*x2324)));
evalcond[3]=(((r01*x2325))+((r00*x2326))+((r01*x2328))+(((-1.0)*r00*x2329))+((r02*x2327)));
evalcond[4]=((((-1.0)*r02*x2332))+((r01*x2330))+(((-1.0)*r01*x2334))+((r00*x2331))+((r00*x2333)));
evalcond[5]=(((r22*x2327))+((r21*x2328))+(((-1.0)*r20*x2329))+((r21*x2325))+((r20*x2326))+x2335);
evalcond[6]=(((r10*x2333))+(((-1.0)*r11*x2334))+((r11*x2330))+((r10*x2331))+(((-1.0)*r12*x2332))+x2335);
evalcond[7]=((((-1.0)*x2337))+((r11*x2325))+((r12*x2327))+(((-1.0)*r10*x2329))+((r10*x2326))+x2336+((r11*x2328)));
evalcond[8]=(((r20*x2333))+((r21*x2330))+((r20*x2331))+(((-1.0)*r21*x2334))+(((-1.0)*r22*x2332))+(((-1.0)*x2336))+x2337);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2338.value)+(((1.5707963267949)*(x2339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2340=IKcos(j4);
IkReal x2341=((1.0)*x2340);
IkReal x2342=IKsin(j4);
IkReal x2343=(sj5*x2342);
IkReal x2344=((1.0)*cj5*x2342);
IkReal x2345=(cj5*sj3);
IkReal x2346=(sj3*sj5);
IkReal x2347=(cj3*x2342);
IkReal x2348=(cj3*sj5*x2340);
IkReal x2349=((1.0)*cj3*cj5*x2340);
IkReal x2350=(cj3*cj5);
IkReal x2351=(cj3*sj5);
IkReal x2352=((1.0)*sj3*x2342);
IkReal x2353=(cj5*sj3*x2340);
IkReal x2354=((1.0)*sj3*sj5*x2340);
IkReal x2355=(((cj1*sj2))+((cj2*sj1)));
IkReal x2356=(cj1*cj2);
IkReal x2357=(sj1*sj2);
evalcond[0]=((((-1.0)*r20*x2344))+((r21*x2343))+(((-1.0)*r22*x2341)));
evalcond[1]=((((-1.0)*r12*x2341))+(((-1.0)*r10*x2344))+((r11*x2343)));
evalcond[2]=((1.0)+((r01*x2343))+(((-1.0)*r02*x2341))+(((-1.0)*r00*x2344)));
evalcond[3]=(((r02*x2347))+((r01*x2348))+(((-1.0)*r00*x2349))+((r01*x2345))+((r00*x2346)));
evalcond[4]=(((r01*x2350))+(((-1.0)*r02*x2352))+((r00*x2351))+((r00*x2353))+(((-1.0)*r01*x2354)));
evalcond[5]=(((r21*x2345))+((r21*x2348))+(((-1.0)*r20*x2349))+x2355+((r22*x2347))+((r20*x2346)));
evalcond[6]=((((-1.0)*r12*x2352))+x2355+((r10*x2351))+((r10*x2353))+((r11*x2350))+(((-1.0)*r11*x2354)));
evalcond[7]=((((-1.0)*r10*x2349))+((r12*x2347))+((r11*x2348))+(((-1.0)*x2357))+x2356+((r11*x2345))+((r10*x2346)));
evalcond[8]=((((-1.0)*x2356))+(((-1.0)*r21*x2354))+((r20*x2353))+(((-1.0)*r22*x2352))+x2357+((r21*x2350))+((r20*x2351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2359 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2359)==0){
continue;
}
IkReal x2358=pow(x2359,-0.5);
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x2360.value))));
IkReal gconst13=((-1.0)*r11*x2358);
IkReal gconst14=(r10*x2358);
CheckValue<IkReal> x2361 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2361.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2361.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2364 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
IkReal x2362=((-1.0)*(((1.0)*(x2364.value))));
IkReal x2363=x2358;
sj5=gconst13;
cj5=gconst14;
j5=x2362;
IkReal gconst12=x2362;
IkReal gconst13=((-1.0)*r11*x2363);
IkReal gconst14=(r10*x2363);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
IkReal x2365=((-1.0)*(((1.0)*(x2367.value))));
IkReal x2366=x2358;
sj5=gconst13;
cj5=gconst14;
j5=x2365;
IkReal gconst12=x2365;
IkReal gconst13=((-1.0)*r11*x2366);
IkReal gconst14=(r10*x2366);
IkReal x2368=((1.0)*cj0*r02);
IkReal x2369=((1.0)*sj0);
IkReal x2370=r12*r12;
IkReal x2372 = ((1.0)+(((-1.0)*x2370)));
if(IKabs(x2372)==0){
continue;
}
IkReal x2371=pow(x2372,-0.5);
j4eval[0]=((IKabs(((((-1.0)*x2368))+(((-1.0)*r12*x2369)))))+(IKabs(((((-1.0)*r12*x2368*x2371))+(((-1.0)*x2369*x2370*x2371))+((sj0*x2371))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
IkReal x2373=((-1.0)*(((1.0)*(x2375.value))));
IkReal x2374=x2358;
sj5=gconst13;
cj5=gconst14;
j5=x2373;
IkReal gconst12=x2373;
IkReal gconst13=((-1.0)*r11*x2374);
IkReal gconst14=(r10*x2374);
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2378.valid){
continue;
}
IkReal x2376=(sj3*(x2378.value));
IkReal x2377=(((x2376*(r11*r11)*(r21*r21)))+((sj3*(r22*r22)))+((x2376*(r10*r10)*(r20*r20)))+(((2.0)*r10*r11*r20*r21*x2376)));
j4eval[0]=x2377;
j4eval[1]=IKsign(x2377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2379=(gconst13*r21);
IkReal x2380=gconst13*gconst13;
IkReal x2381=r21*r21;
IkReal x2382=gconst14*gconst14;
IkReal x2383=r20*r20;
IkReal x2384=(sj1*sj2);
IkReal x2385=((1.0)*cj1*cj2);
IkReal x2386=(cj3*r22);
IkReal x2387=(gconst14*r20);
IkReal x2388=(cj3*gconst13*gconst14);
IkReal x2389=(cj3*r20*r21);
CheckValue<IkReal> x2390 = IKatan2WithCheck(IkReal((((gconst14*r21*x2386))+(((-1.0)*r22*x2385))+((gconst13*r20*x2386))+((r22*x2384)))),IkReal((((x2381*x2388))+((x2380*x2389))+((x2379*x2384))+(((-1.0)*sj1*sj2*x2387))+(((-1.0)*x2379*x2385))+((cj1*cj2*x2387))+(((-1.0)*x2382*x2389))+(((-1.0)*x2383*x2388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2390.valid){
continue;
}
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x2380*x2381))+(((-2.0)*gconst14*r20*sj3*x2379))+((sj3*x2382*x2383)))),-1);
if(!x2391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2390.value)+(((1.5707963267949)*(x2391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2392=IKcos(j4);
IkReal x2393=((1.0)*x2392);
IkReal x2394=IKsin(j4);
IkReal x2395=(gconst13*x2394);
IkReal x2396=((1.0)*gconst14*x2394);
IkReal x2397=((1.0)*sj0);
IkReal x2398=(cj1*sj2);
IkReal x2399=(cj2*sj1);
IkReal x2400=(gconst13*sj3);
IkReal x2401=(gconst14*sj3);
IkReal x2402=(cj3*x2394);
IkReal x2403=(cj3*gconst13*x2392);
IkReal x2404=((1.0)*cj3*gconst14*x2392);
IkReal x2405=(sj1*sj2);
IkReal x2406=((1.0)*cj1*cj2);
IkReal x2407=(cj3*gconst13);
IkReal x2408=(cj3*gconst14);
IkReal x2409=((1.0)*sj3*x2394);
IkReal x2410=(gconst14*sj3*x2392);
IkReal x2411=((1.0)*gconst13*sj3*x2392);
IkReal x2412=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2393))+((r21*x2395))+(((-1.0)*r20*x2396)));
evalcond[1]=(((r11*x2395))+(((-1.0)*r10*x2396))+cj0+(((-1.0)*r12*x2393)));
evalcond[2]=((((-1.0)*r02*x2393))+(((-1.0)*r00*x2396))+(((-1.0)*x2397))+((r01*x2395)));
evalcond[3]=(((r22*x2402))+(((-1.0)*r20*x2404))+((r20*x2400))+((r21*x2403))+x2399+x2398+((r21*x2401)));
evalcond[4]=(((r20*x2407))+((r20*x2410))+((r21*x2408))+(((-1.0)*x2406))+x2405+(((-1.0)*r21*x2411))+(((-1.0)*r22*x2409)));
evalcond[5]=(((r00*x2400))+((r01*x2403))+(((-1.0)*r00*x2404))+((r01*x2401))+((cj0*x2405))+(((-1.0)*cj0*x2406))+((r02*x2402)));
evalcond[6]=(((r11*x2403))+((r11*x2401))+(((-1.0)*cj1*cj2*x2397))+((sj0*x2405))+(((-1.0)*r10*x2404))+((r10*x2400))+((r12*x2402)));
evalcond[7]=(((r00*x2407))+((r01*x2408))+(((-1.0)*r01*x2411))+(((-1.0)*x2399*x2412))+(((-1.0)*r02*x2409))+(((-1.0)*x2398*x2412))+((r00*x2410)));
evalcond[8]=((((-1.0)*x2397*x2399))+(((-1.0)*r12*x2409))+((r10*x2407))+(((-1.0)*x2397*x2398))+(((-1.0)*r11*x2411))+((r10*x2410))+((r11*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2413=((1.0)*gconst13);
IkReal x2414=((1.0)*cj0);
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2414))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x2414))+(((-1.0)*r11*sj0*x2413))+((cj0*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2413))+(((-1.0)*(1.0)*gconst14*r21)))),-1);
if(!x2416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2415.value)+(((1.5707963267949)*(x2416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2417=IKcos(j4);
IkReal x2418=((1.0)*x2417);
IkReal x2419=IKsin(j4);
IkReal x2420=(gconst13*x2419);
IkReal x2421=((1.0)*gconst14*x2419);
IkReal x2422=((1.0)*sj0);
IkReal x2423=(cj1*sj2);
IkReal x2424=(cj2*sj1);
IkReal x2425=(gconst13*sj3);
IkReal x2426=(gconst14*sj3);
IkReal x2427=(cj3*x2419);
IkReal x2428=(cj3*gconst13*x2417);
IkReal x2429=((1.0)*cj3*gconst14*x2417);
IkReal x2430=(sj1*sj2);
IkReal x2431=((1.0)*cj1*cj2);
IkReal x2432=(cj3*gconst13);
IkReal x2433=(cj3*gconst14);
IkReal x2434=((1.0)*sj3*x2419);
IkReal x2435=(gconst14*sj3*x2417);
IkReal x2436=((1.0)*gconst13*sj3*x2417);
IkReal x2437=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2418))+((r21*x2420))+(((-1.0)*r20*x2421)));
evalcond[1]=((((-1.0)*r12*x2418))+cj0+(((-1.0)*r10*x2421))+((r11*x2420)));
evalcond[2]=(((r01*x2420))+(((-1.0)*x2422))+(((-1.0)*r02*x2418))+(((-1.0)*r00*x2421)));
evalcond[3]=(((r21*x2426))+((r20*x2425))+(((-1.0)*r20*x2429))+((r22*x2427))+((r21*x2428))+x2424+x2423);
evalcond[4]=((((-1.0)*x2431))+(((-1.0)*r21*x2436))+(((-1.0)*r22*x2434))+x2430+((r20*x2432))+((r20*x2435))+((r21*x2433)));
evalcond[5]=(((cj0*x2430))+((r02*x2427))+((r01*x2428))+(((-1.0)*r00*x2429))+((r00*x2425))+(((-1.0)*cj0*x2431))+((r01*x2426)));
evalcond[6]=(((r11*x2428))+((r11*x2426))+(((-1.0)*cj1*cj2*x2422))+((sj0*x2430))+((r12*x2427))+(((-1.0)*r10*x2429))+((r10*x2425)));
evalcond[7]=((((-1.0)*r01*x2436))+((r00*x2435))+(((-1.0)*x2423*x2437))+((r00*x2432))+(((-1.0)*x2424*x2437))+(((-1.0)*r02*x2434))+((r01*x2433)));
evalcond[8]=(((r11*x2433))+(((-1.0)*x2422*x2423))+(((-1.0)*r11*x2436))+((r10*x2432))+(((-1.0)*x2422*x2424))+(((-1.0)*r12*x2434))+((r10*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2438=((1.0)*gconst14);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*r20*x2438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst13*r00))+(((-1.0)*r01*x2438)))),-1);
if(!x2440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2439.value)+(((1.5707963267949)*(x2440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2441=IKcos(j4);
IkReal x2442=((1.0)*x2441);
IkReal x2443=IKsin(j4);
IkReal x2444=(gconst13*x2443);
IkReal x2445=((1.0)*gconst14*x2443);
IkReal x2446=((1.0)*sj0);
IkReal x2447=(cj1*sj2);
IkReal x2448=(cj2*sj1);
IkReal x2449=(gconst13*sj3);
IkReal x2450=(gconst14*sj3);
IkReal x2451=(cj3*x2443);
IkReal x2452=(cj3*gconst13*x2441);
IkReal x2453=((1.0)*cj3*gconst14*x2441);
IkReal x2454=(sj1*sj2);
IkReal x2455=((1.0)*cj1*cj2);
IkReal x2456=(cj3*gconst13);
IkReal x2457=(cj3*gconst14);
IkReal x2458=((1.0)*sj3*x2443);
IkReal x2459=(gconst14*sj3*x2441);
IkReal x2460=((1.0)*gconst13*sj3*x2441);
IkReal x2461=((1.0)*cj0);
evalcond[0]=(((r21*x2444))+(((-1.0)*r20*x2445))+(((-1.0)*r22*x2442)));
evalcond[1]=((((-1.0)*r10*x2445))+((r11*x2444))+cj0+(((-1.0)*r12*x2442)));
evalcond[2]=((((-1.0)*r02*x2442))+(((-1.0)*x2446))+((r01*x2444))+(((-1.0)*r00*x2445)));
evalcond[3]=(((r21*x2452))+((r21*x2450))+((r22*x2451))+x2447+x2448+((r20*x2449))+(((-1.0)*r20*x2453)));
evalcond[4]=((((-1.0)*r21*x2460))+((r21*x2457))+((r20*x2456))+x2454+(((-1.0)*x2455))+((r20*x2459))+(((-1.0)*r22*x2458)));
evalcond[5]=(((r01*x2452))+(((-1.0)*cj0*x2455))+(((-1.0)*r00*x2453))+((r01*x2450))+((r02*x2451))+((r00*x2449))+((cj0*x2454)));
evalcond[6]=(((r11*x2452))+((r12*x2451))+(((-1.0)*cj1*cj2*x2446))+((r10*x2449))+(((-1.0)*r10*x2453))+((sj0*x2454))+((r11*x2450)));
evalcond[7]=((((-1.0)*r02*x2458))+((r00*x2459))+((r01*x2457))+(((-1.0)*r01*x2460))+(((-1.0)*x2447*x2461))+((r00*x2456))+(((-1.0)*x2448*x2461)));
evalcond[8]=(((r11*x2457))+(((-1.0)*r11*x2460))+((r10*x2456))+(((-1.0)*x2446*x2448))+((r10*x2459))+(((-1.0)*x2446*x2447))+(((-1.0)*r12*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2463 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2463)==0){
continue;
}
IkReal x2462=((1.0)*(pow(x2463,-0.5)));
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x2464.value))));
IkReal gconst16=(r11*x2462);
IkReal gconst17=((-1.0)*r10*x2462);
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2465.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
IkReal x2466=((-1.0)*(((1.0)*(x2468.value))));
IkReal x2467=x2462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2466);
IkReal gconst15=((3.14159265358979)+x2466);
IkReal gconst16=(r11*x2467);
IkReal gconst17=((-1.0)*r10*x2467);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2471.valid){
continue;
}
IkReal x2469=((-1.0)*(((1.0)*(x2471.value))));
IkReal x2470=x2462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2469);
IkReal gconst15=((3.14159265358979)+x2469);
IkReal gconst16=(r11*x2470);
IkReal gconst17=((-1.0)*r10*x2470);
IkReal x2472=((1.0)*cj0*r02);
IkReal x2473=((1.0)*sj0);
IkReal x2474=r12*r12;
IkReal x2477 = ((1.0)+(((-1.0)*x2474)));
if(IKabs(x2477)==0){
continue;
}
IkReal x2475=pow(x2477,-0.5);
IkReal x2476=(x2473*x2475);
j4eval[0]=((IKabs(((((-1.0)*x2472))+(((-1.0)*r12*x2473)))))+(IKabs(((((-1.0)*r12*x2472*x2475))+(((-1.0)*x2474*x2476))+x2476))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal x2478=((-1.0)*(((1.0)*(x2480.value))));
IkReal x2479=x2462;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2478);
IkReal gconst15=((3.14159265358979)+x2478);
IkReal gconst16=(r11*x2479);
IkReal gconst17=((-1.0)*r10*x2479);
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2483.valid){
continue;
}
IkReal x2481=x2483.value;
IkReal x2482=((1.0)*cj3*x2481);
j4eval[0]=IKsign((((x2482*(r11*r11)*(r21*r21)))+(((2.0)*cj3*r10*r11*r20*r21*x2481))+((x2482*(r10*r10)*(r20*r20)))+((cj3*(r22*r22)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2484=(gconst17*r20);
IkReal x2485=gconst16*gconst16;
IkReal x2486=r21*r21;
IkReal x2487=gconst17*gconst17;
IkReal x2488=r20*r20;
IkReal x2489=((1.0)*r22);
IkReal x2490=(cj1*sj2);
IkReal x2491=(cj2*sj1);
IkReal x2492=((1.0)*r22*sj3);
IkReal x2493=((1.0)*gconst16*r21);
IkReal x2494=(gconst16*gconst17*sj3);
IkReal x2495=(r20*r21*sj3);
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r21*x2492))+(((-1.0)*x2489*x2491))+(((-1.0)*gconst16*r20*x2492))+(((-1.0)*x2489*x2490)))),IkReal((((x2488*x2494))+((x2484*x2491))+((x2487*x2495))+(((-1.0)*x2485*x2495))+((x2484*x2490))+(((-1.0)*x2486*x2494))+(((-1.0)*x2490*x2493))+(((-1.0)*x2491*x2493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(IKsign((((cj3*x2487*x2488))+(((-2.0)*cj3*gconst16*r21*x2484))+((cj3*x2485*x2486))+((cj3*(r22*r22))))),-1);
if(!x2497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2496.value)+(((1.5707963267949)*(x2497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2498=IKcos(j4);
IkReal x2499=((1.0)*x2498);
IkReal x2500=IKsin(j4);
IkReal x2501=(gconst16*x2500);
IkReal x2502=((1.0)*gconst17*x2500);
IkReal x2503=((1.0)*sj0);
IkReal x2504=(cj1*sj2);
IkReal x2505=(cj2*sj1);
IkReal x2506=(gconst16*sj3);
IkReal x2507=(gconst17*sj3);
IkReal x2508=(cj3*x2500);
IkReal x2509=(cj3*gconst16*x2498);
IkReal x2510=((1.0)*cj3*gconst17*x2498);
IkReal x2511=(sj1*sj2);
IkReal x2512=((1.0)*cj1*cj2);
IkReal x2513=(cj3*gconst16);
IkReal x2514=(cj3*gconst17);
IkReal x2515=((1.0)*sj3*x2500);
IkReal x2516=(gconst17*sj3*x2498);
IkReal x2517=((1.0)*gconst16*sj3*x2498);
IkReal x2518=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2502))+(((-1.0)*r22*x2499))+((r21*x2501)));
evalcond[1]=(((r11*x2501))+(((-1.0)*r10*x2502))+cj0+(((-1.0)*r12*x2499)));
evalcond[2]=((((-1.0)*r00*x2502))+(((-1.0)*x2503))+((r01*x2501))+(((-1.0)*r02*x2499)));
evalcond[3]=(((r21*x2507))+((r20*x2506))+((r21*x2509))+((r22*x2508))+x2505+x2504+(((-1.0)*r20*x2510)));
evalcond[4]=((((-1.0)*r22*x2515))+((r20*x2513))+x2511+(((-1.0)*r21*x2517))+((r20*x2516))+((r21*x2514))+(((-1.0)*x2512)));
evalcond[5]=(((r00*x2506))+(((-1.0)*r00*x2510))+((cj0*x2511))+((r01*x2507))+((r01*x2509))+(((-1.0)*cj0*x2512))+((r02*x2508)));
evalcond[6]=((((-1.0)*r10*x2510))+((sj0*x2511))+((r12*x2508))+((r11*x2509))+(((-1.0)*cj1*cj2*x2503))+((r10*x2506))+((r11*x2507)));
evalcond[7]=(((r00*x2513))+(((-1.0)*r01*x2517))+(((-1.0)*x2504*x2518))+(((-1.0)*r02*x2515))+(((-1.0)*x2505*x2518))+((r01*x2514))+((r00*x2516)));
evalcond[8]=(((r10*x2516))+((r11*x2514))+(((-1.0)*x2503*x2504))+(((-1.0)*r11*x2517))+(((-1.0)*x2503*x2505))+((r10*x2513))+(((-1.0)*r12*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2519=((1.0)*gconst16);
IkReal x2520=((1.0)*cj0);
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2520)))),IkReal(((((-1.0)*r11*sj0*x2519))+(((-1.0)*gconst16*r01*x2520))+((gconst17*r10*sj0))+((cj0*gconst17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2519))+(((-1.0)*(1.0)*gconst17*r21)))),-1);
if(!x2522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2521.value)+(((1.5707963267949)*(x2522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2523=IKcos(j4);
IkReal x2524=((1.0)*x2523);
IkReal x2525=IKsin(j4);
IkReal x2526=(gconst16*x2525);
IkReal x2527=((1.0)*gconst17*x2525);
IkReal x2528=((1.0)*sj0);
IkReal x2529=(cj1*sj2);
IkReal x2530=(cj2*sj1);
IkReal x2531=(gconst16*sj3);
IkReal x2532=(gconst17*sj3);
IkReal x2533=(cj3*x2525);
IkReal x2534=(cj3*gconst16*x2523);
IkReal x2535=((1.0)*cj3*gconst17*x2523);
IkReal x2536=(sj1*sj2);
IkReal x2537=((1.0)*cj1*cj2);
IkReal x2538=(cj3*gconst16);
IkReal x2539=(cj3*gconst17);
IkReal x2540=((1.0)*sj3*x2525);
IkReal x2541=(gconst17*sj3*x2523);
IkReal x2542=((1.0)*gconst16*sj3*x2523);
IkReal x2543=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2524))+(((-1.0)*r20*x2527))+((r21*x2526)));
evalcond[1]=(((r11*x2526))+(((-1.0)*r10*x2527))+cj0+(((-1.0)*r12*x2524)));
evalcond[2]=((((-1.0)*r02*x2524))+(((-1.0)*r00*x2527))+(((-1.0)*x2528))+((r01*x2526)));
evalcond[3]=(x2530+((r21*x2532))+((r22*x2533))+x2529+((r20*x2531))+((r21*x2534))+(((-1.0)*r20*x2535)));
evalcond[4]=(x2536+(((-1.0)*r21*x2542))+(((-1.0)*r22*x2540))+(((-1.0)*x2537))+((r21*x2539))+((r20*x2541))+((r20*x2538)));
evalcond[5]=(((r01*x2532))+(((-1.0)*r00*x2535))+((r00*x2531))+(((-1.0)*cj0*x2537))+((r02*x2533))+((cj0*x2536))+((r01*x2534)));
evalcond[6]=(((r10*x2531))+((r12*x2533))+((sj0*x2536))+(((-1.0)*r10*x2535))+(((-1.0)*cj1*cj2*x2528))+((r11*x2532))+((r11*x2534)));
evalcond[7]=((((-1.0)*x2529*x2543))+(((-1.0)*x2530*x2543))+((r00*x2541))+(((-1.0)*r01*x2542))+((r01*x2539))+((r00*x2538))+(((-1.0)*r02*x2540)));
evalcond[8]=((((-1.0)*x2528*x2529))+(((-1.0)*r11*x2542))+((r10*x2538))+((r11*x2539))+((r10*x2541))+(((-1.0)*r12*x2540))+(((-1.0)*x2528*x2530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2544=((1.0)*gconst17);
CheckValue<IkReal> x2545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2544))+(((-1.0)*(1.0)*gconst16*r00)))),-1);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst16*r21))+(((-1.0)*cj0*r20*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2545.value)))+(x2546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2547=IKcos(j4);
IkReal x2548=((1.0)*x2547);
IkReal x2549=IKsin(j4);
IkReal x2550=(gconst16*x2549);
IkReal x2551=((1.0)*gconst17*x2549);
IkReal x2552=((1.0)*sj0);
IkReal x2553=(cj1*sj2);
IkReal x2554=(cj2*sj1);
IkReal x2555=(gconst16*sj3);
IkReal x2556=(gconst17*sj3);
IkReal x2557=(cj3*x2549);
IkReal x2558=(cj3*gconst16*x2547);
IkReal x2559=((1.0)*cj3*gconst17*x2547);
IkReal x2560=(sj1*sj2);
IkReal x2561=((1.0)*cj1*cj2);
IkReal x2562=(cj3*gconst16);
IkReal x2563=(cj3*gconst17);
IkReal x2564=((1.0)*sj3*x2549);
IkReal x2565=(gconst17*sj3*x2547);
IkReal x2566=((1.0)*gconst16*sj3*x2547);
IkReal x2567=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2551))+(((-1.0)*r22*x2548))+((r21*x2550)));
evalcond[1]=(((r11*x2550))+cj0+(((-1.0)*r10*x2551))+(((-1.0)*r12*x2548)));
evalcond[2]=(((r01*x2550))+(((-1.0)*x2552))+(((-1.0)*r00*x2551))+(((-1.0)*r02*x2548)));
evalcond[3]=((((-1.0)*r20*x2559))+x2554+x2553+((r21*x2556))+((r22*x2557))+((r20*x2555))+((r21*x2558)));
evalcond[4]=(x2560+((r20*x2565))+(((-1.0)*r21*x2566))+((r21*x2563))+(((-1.0)*r22*x2564))+((r20*x2562))+(((-1.0)*x2561)));
evalcond[5]=(((cj0*x2560))+(((-1.0)*cj0*x2561))+((r01*x2556))+(((-1.0)*r00*x2559))+((r02*x2557))+((r01*x2558))+((r00*x2555)));
evalcond[6]=(((r10*x2555))+((r12*x2557))+(((-1.0)*cj1*cj2*x2552))+((sj0*x2560))+(((-1.0)*r10*x2559))+((r11*x2556))+((r11*x2558)));
evalcond[7]=((((-1.0)*r02*x2564))+(((-1.0)*x2553*x2567))+(((-1.0)*x2554*x2567))+((r00*x2562))+((r00*x2565))+((r01*x2563))+(((-1.0)*r01*x2566)));
evalcond[8]=(((r10*x2562))+((r10*x2565))+(((-1.0)*x2552*x2554))+(((-1.0)*x2552*x2553))+(((-1.0)*r11*x2566))+(((-1.0)*r12*x2564))+((r11*x2563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2568=(((r20*sj5))+((cj5*r21)));
j4eval[0]=x2568;
j4eval[1]=IKsign(x2568);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2569=((1.0)*cj5);
IkReal x2570=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2569)));
j4eval[0]=x2570;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2569)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2571=(r11*((cj3*r21)));
IkReal x2572=cj5*cj5;
IkReal x2573=((1.0)*cj5*sj5);
IkReal x2574=(((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2573))+(((-1.0)*cj3*r11*r20*x2573))+x2571+((cj3*r10*r20*x2572))+(((-1.0)*x2571*x2572)));
j4eval[0]=x2574;
j4eval[1]=IKsign(x2574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2575=(r11*((cj3*r21)));
IkReal x2576=cj5*cj5;
IkReal x2577=(cj5*sj5);
IkReal x2578=((1.0)*cj5*r11*sj3);
IkReal x2579=((1.0)*r10*sj3);
IkReal x2580=(sj3*x2576);
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(IKsign((((cj3*r10*r20*x2576))+((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2577))+(((-1.0)*x2575*x2576))+x2575+(((-1.0)*cj3*cj5*r11*r20*sj5)))),-1);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2579))+(((-1.0)*r22*x2578)))),IkReal(((((-1.0)*r21*x2579))+((r11*r20*x2580))+(((-1.0)*r21*sj5*x2578))+((r10*r20*sj3*x2577))+((r10*r21*x2580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2581.value)))+(x2582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2583=IKcos(j4);
IkReal x2584=((1.0)*x2583);
IkReal x2585=IKsin(j4);
IkReal x2586=(sj5*x2585);
IkReal x2587=((1.0)*cj5*x2585);
IkReal x2588=(cj5*sj3);
IkReal x2589=(sj3*sj5);
IkReal x2590=(cj3*x2585);
IkReal x2591=(cj3*sj5*x2583);
IkReal x2592=((1.0)*cj3*cj5*x2583);
IkReal x2593=(cj3*cj5);
IkReal x2594=(cj3*sj5);
IkReal x2595=((1.0)*sj3*x2585);
IkReal x2596=(cj5*sj3*x2583);
IkReal x2597=((1.0)*sj3*sj5*x2583);
IkReal x2598=(cj1*sj2);
IkReal x2599=(cj2*sj1);
IkReal x2600=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2587))+((r21*x2586))+(((-1.0)*r22*x2584)));
evalcond[1]=(((r01*x2586))+(((-1.0)*r02*x2584))+(((-1.0)*r00*x2587)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2587))+(((-1.0)*r12*x2584))+((r11*x2586)));
evalcond[3]=(((r10*x2589))+((r11*x2591))+(((-1.0)*r10*x2592))+((r12*x2590))+((r11*x2588)));
evalcond[4]=(((r10*x2596))+((r11*x2593))+(((-1.0)*r11*x2597))+((r10*x2594))+(((-1.0)*r12*x2595)));
evalcond[5]=(x2598+x2599+(((-1.0)*r20*x2592))+((r21*x2588))+((r20*x2589))+((r21*x2591))+((r22*x2590)));
evalcond[6]=(((r01*x2588))+((r00*x2589))+((r01*x2591))+x2600+((r02*x2590))+(((-1.0)*r00*x2592)));
evalcond[7]=((((-1.0)*r21*x2597))+x2600+(((-1.0)*r22*x2595))+((r20*x2596))+((r20*x2594))+((r21*x2593)));
evalcond[8]=((((-1.0)*x2599))+(((-1.0)*r02*x2595))+((r00*x2594))+(((-1.0)*r01*x2597))+((r01*x2593))+((r00*x2596))+(((-1.0)*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2601=((1.0)*cj5);
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2601)))),-1);
if(!x2602.valid){
continue;
}
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2601))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2602.value)))+(x2603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2604=IKcos(j4);
IkReal x2605=((1.0)*x2604);
IkReal x2606=IKsin(j4);
IkReal x2607=(sj5*x2606);
IkReal x2608=((1.0)*cj5*x2606);
IkReal x2609=(cj5*sj3);
IkReal x2610=(sj3*sj5);
IkReal x2611=(cj3*x2606);
IkReal x2612=(cj3*sj5*x2604);
IkReal x2613=((1.0)*cj3*cj5*x2604);
IkReal x2614=(cj3*cj5);
IkReal x2615=(cj3*sj5);
IkReal x2616=((1.0)*sj3*x2606);
IkReal x2617=(cj5*sj3*x2604);
IkReal x2618=((1.0)*sj3*sj5*x2604);
IkReal x2619=(cj1*sj2);
IkReal x2620=(cj2*sj1);
IkReal x2621=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2605))+(((-1.0)*r20*x2608))+((r21*x2607)));
evalcond[1]=((((-1.0)*r00*x2608))+((r01*x2607))+(((-1.0)*r02*x2605)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2605))+(((-1.0)*r10*x2608))+((r11*x2607)));
evalcond[3]=(((r10*x2610))+((r11*x2612))+((r12*x2611))+((r11*x2609))+(((-1.0)*r10*x2613)));
evalcond[4]=(((r10*x2615))+(((-1.0)*r12*x2616))+(((-1.0)*r11*x2618))+((r10*x2617))+((r11*x2614)));
evalcond[5]=(((r22*x2611))+x2620+((r20*x2610))+(((-1.0)*r20*x2613))+x2619+((r21*x2609))+((r21*x2612)));
evalcond[6]=(x2621+(((-1.0)*r00*x2613))+((r02*x2611))+((r01*x2612))+((r00*x2610))+((r01*x2609)));
evalcond[7]=(x2621+((r20*x2615))+(((-1.0)*r22*x2616))+((r21*x2614))+(((-1.0)*r21*x2618))+((r20*x2617)));
evalcond[8]=((((-1.0)*x2620))+(((-1.0)*x2619))+(((-1.0)*r01*x2618))+((r00*x2617))+((r00*x2615))+(((-1.0)*r02*x2616))+((r01*x2614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2622=IKPowWithIntegerCheck(IKsign((((r20*sj5))+((cj5*r21)))),-1);
if(!x2622.valid){
continue;
}
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2622.value)))+(x2623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2624=IKcos(j4);
IkReal x2625=((1.0)*x2624);
IkReal x2626=IKsin(j4);
IkReal x2627=(sj5*x2626);
IkReal x2628=((1.0)*cj5*x2626);
IkReal x2629=(cj5*sj3);
IkReal x2630=(sj3*sj5);
IkReal x2631=(cj3*x2626);
IkReal x2632=(cj3*sj5*x2624);
IkReal x2633=((1.0)*cj3*cj5*x2624);
IkReal x2634=(cj3*cj5);
IkReal x2635=(cj3*sj5);
IkReal x2636=((1.0)*sj3*x2626);
IkReal x2637=(cj5*sj3*x2624);
IkReal x2638=((1.0)*sj3*sj5*x2624);
IkReal x2639=(cj1*sj2);
IkReal x2640=(cj2*sj1);
IkReal x2641=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2628))+(((-1.0)*r22*x2625))+((r21*x2627)));
evalcond[1]=(((r01*x2627))+(((-1.0)*r00*x2628))+(((-1.0)*r02*x2625)));
evalcond[2]=((1.0)+((r11*x2627))+(((-1.0)*r10*x2628))+(((-1.0)*r12*x2625)));
evalcond[3]=(((r11*x2629))+((r11*x2632))+(((-1.0)*r10*x2633))+((r10*x2630))+((r12*x2631)));
evalcond[4]=(((r10*x2637))+(((-1.0)*r11*x2638))+(((-1.0)*r12*x2636))+((r10*x2635))+((r11*x2634)));
evalcond[5]=((((-1.0)*r20*x2633))+((r22*x2631))+x2640+((r20*x2630))+x2639+((r21*x2632))+((r21*x2629)));
evalcond[6]=(((r01*x2629))+((r01*x2632))+x2641+((r00*x2630))+(((-1.0)*r00*x2633))+((r02*x2631)));
evalcond[7]=(((r20*x2635))+x2641+((r21*x2634))+(((-1.0)*r21*x2638))+((r20*x2637))+(((-1.0)*r22*x2636)));
evalcond[8]=(((r00*x2637))+((r00*x2635))+(((-1.0)*r02*x2636))+(((-1.0)*r01*x2638))+((r01*x2634))+(((-1.0)*x2640))+(((-1.0)*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2642=((1.0)*cj5);
IkReal x2643=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2642)));
j4eval[0]=x2643;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2642))))));
j4eval[2]=IKsign(x2643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2644=((1.0)*sj5);
IkReal x2645=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2644)));
j4eval[0]=x2645;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2644)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2646=(r11*((cj3*r21)));
IkReal x2647=cj5*cj5;
IkReal x2648=((1.0)*cj5*sj5);
IkReal x2649=(x2646+((cj3*r12*r22))+(((-1.0)*x2646*x2647))+((cj3*r10*r20*x2647))+(((-1.0)*cj3*r10*r21*x2648))+(((-1.0)*cj3*r11*r20*x2648)));
j4eval[0]=x2649;
j4eval[1]=IKsign(x2649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2650=(r11*((cj3*r21)));
IkReal x2651=cj5*cj5;
IkReal x2652=(cj5*sj5);
IkReal x2653=((1.0)*cj5*r11*sj3);
IkReal x2654=((1.0)*r10*sj3);
IkReal x2655=(sj3*x2651);
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r10*r21*x2652))+(((-1.0)*x2650*x2651))+((cj3*r12*r22))+((cj3*r10*r20*x2651))+(((-1.0)*cj3*cj5*r11*r20*sj5))+x2650)),-1);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2653))+(((-1.0)*r22*sj5*x2654)))),IkReal(((((-1.0)*r21*sj5*x2653))+((r11*r20*x2655))+(((-1.0)*r21*x2654))+((r10*r20*sj3*x2652))+((r10*r21*x2655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2656.value)))+(x2657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2658=IKcos(j4);
IkReal x2659=((1.0)*x2658);
IkReal x2660=IKsin(j4);
IkReal x2661=(sj5*x2660);
IkReal x2662=((1.0)*cj5*x2660);
IkReal x2663=(cj5*sj3);
IkReal x2664=(sj3*sj5);
IkReal x2665=(cj3*x2660);
IkReal x2666=(cj3*sj5*x2658);
IkReal x2667=((1.0)*cj3*cj5*x2658);
IkReal x2668=(cj3*cj5);
IkReal x2669=(cj3*sj5);
IkReal x2670=((1.0)*sj3*x2660);
IkReal x2671=(cj5*sj3*x2658);
IkReal x2672=((1.0)*sj3*sj5*x2658);
IkReal x2673=(((cj1*sj2))+((cj2*sj1)));
IkReal x2674=(cj1*cj2);
IkReal x2675=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2659))+((r21*x2661))+(((-1.0)*r20*x2662)));
evalcond[1]=((((-1.0)*r02*x2659))+(((-1.0)*r00*x2662))+((r01*x2661)));
evalcond[2]=((-1.0)+((r11*x2661))+(((-1.0)*r12*x2659))+(((-1.0)*r10*x2662)));
evalcond[3]=(((r10*x2664))+((r11*x2663))+((r12*x2665))+((r11*x2666))+(((-1.0)*r10*x2667)));
evalcond[4]=((((-1.0)*r11*x2672))+((r11*x2668))+(((-1.0)*r12*x2670))+((r10*x2671))+((r10*x2669)));
evalcond[5]=(x2673+((r21*x2663))+(((-1.0)*r20*x2667))+((r20*x2664))+((r21*x2666))+((r22*x2665)));
evalcond[6]=(((r00*x2669))+x2673+(((-1.0)*r01*x2672))+((r00*x2671))+(((-1.0)*r02*x2670))+((r01*x2668)));
evalcond[7]=(((r02*x2665))+x2674+((r00*x2664))+(((-1.0)*x2675))+((r01*x2663))+((r01*x2666))+(((-1.0)*r00*x2667)));
evalcond[8]=(((r21*x2668))+x2675+((r20*x2671))+(((-1.0)*r21*x2672))+(((-1.0)*r22*x2670))+(((-1.0)*x2674))+((r20*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2676=((1.0)*sj5);
CheckValue<IkReal> x2677=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2676)))),-1);
if(!x2677.valid){
continue;
}
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*r21*x2676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2677.value)))+(x2678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2679=IKcos(j4);
IkReal x2680=((1.0)*x2679);
IkReal x2681=IKsin(j4);
IkReal x2682=(sj5*x2681);
IkReal x2683=((1.0)*cj5*x2681);
IkReal x2684=(cj5*sj3);
IkReal x2685=(sj3*sj5);
IkReal x2686=(cj3*x2681);
IkReal x2687=(cj3*sj5*x2679);
IkReal x2688=((1.0)*cj3*cj5*x2679);
IkReal x2689=(cj3*cj5);
IkReal x2690=(cj3*sj5);
IkReal x2691=((1.0)*sj3*x2681);
IkReal x2692=(cj5*sj3*x2679);
IkReal x2693=((1.0)*sj3*sj5*x2679);
IkReal x2694=(((cj1*sj2))+((cj2*sj1)));
IkReal x2695=(cj1*cj2);
IkReal x2696=(sj1*sj2);
evalcond[0]=(((r21*x2682))+(((-1.0)*r22*x2680))+(((-1.0)*r20*x2683)));
evalcond[1]=(((r01*x2682))+(((-1.0)*r00*x2683))+(((-1.0)*r02*x2680)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2683))+(((-1.0)*r12*x2680))+((r11*x2682)));
evalcond[3]=(((r11*x2687))+((r11*x2684))+((r10*x2685))+((r12*x2686))+(((-1.0)*r10*x2688)));
evalcond[4]=(((r11*x2689))+((r10*x2692))+(((-1.0)*r11*x2693))+((r10*x2690))+(((-1.0)*r12*x2691)));
evalcond[5]=((((-1.0)*r20*x2688))+((r20*x2685))+x2694+((r21*x2687))+((r21*x2684))+((r22*x2686)));
evalcond[6]=((((-1.0)*r01*x2693))+(((-1.0)*r02*x2691))+x2694+((r00*x2690))+((r00*x2692))+((r01*x2689)));
evalcond[7]=(x2695+((r00*x2685))+((r01*x2684))+(((-1.0)*r00*x2688))+((r02*x2686))+(((-1.0)*x2696))+((r01*x2687)));
evalcond[8]=(((r21*x2689))+x2696+(((-1.0)*x2695))+(((-1.0)*r21*x2693))+((r20*x2690))+(((-1.0)*r22*x2691))+((r20*x2692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2697=((1.0)*cj5);
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2697)))),-1);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2698.value)))+(x2699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2700=IKcos(j4);
IkReal x2701=((1.0)*x2700);
IkReal x2702=IKsin(j4);
IkReal x2703=(sj5*x2702);
IkReal x2704=((1.0)*cj5*x2702);
IkReal x2705=(cj5*sj3);
IkReal x2706=(sj3*sj5);
IkReal x2707=(cj3*x2702);
IkReal x2708=(cj3*sj5*x2700);
IkReal x2709=((1.0)*cj3*cj5*x2700);
IkReal x2710=(cj3*cj5);
IkReal x2711=(cj3*sj5);
IkReal x2712=((1.0)*sj3*x2702);
IkReal x2713=(cj5*sj3*x2700);
IkReal x2714=((1.0)*sj3*sj5*x2700);
IkReal x2715=(((cj1*sj2))+((cj2*sj1)));
IkReal x2716=(cj1*cj2);
IkReal x2717=(sj1*sj2);
evalcond[0]=(((r21*x2703))+(((-1.0)*r20*x2704))+(((-1.0)*r22*x2701)));
evalcond[1]=((((-1.0)*r00*x2704))+((r01*x2703))+(((-1.0)*r02*x2701)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2701))+((r11*x2703))+(((-1.0)*r10*x2704)));
evalcond[3]=((((-1.0)*r10*x2709))+((r11*x2705))+((r12*x2707))+((r11*x2708))+((r10*x2706)));
evalcond[4]=((((-1.0)*r11*x2714))+((r10*x2711))+((r11*x2710))+(((-1.0)*r12*x2712))+((r10*x2713)));
evalcond[5]=(((r21*x2708))+(((-1.0)*r20*x2709))+((r21*x2705))+((r20*x2706))+((r22*x2707))+x2715);
evalcond[6]=(((r00*x2713))+((r01*x2710))+(((-1.0)*r02*x2712))+(((-1.0)*r01*x2714))+((r00*x2711))+x2715);
evalcond[7]=(((r02*x2707))+((r00*x2706))+(((-1.0)*r00*x2709))+((r01*x2708))+(((-1.0)*x2717))+x2716+((r01*x2705)));
evalcond[8]=((((-1.0)*x2716))+((r21*x2710))+(((-1.0)*r22*x2712))+((r20*x2713))+((r20*x2711))+(((-1.0)*r21*x2714))+x2717);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r11))+(IKabs(r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2718=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2718);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2718);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=(((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2719=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2719);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2719);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
IkReal x2720=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2720)));
j4eval[1]=((((-1.0)*cj3*r20*x2720))+((cj3*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2721=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2721);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2721);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(r12,-1);
if(!x2723.valid){
continue;
}
IkReal x2722=x2723.value;
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(cj3,-1);
if(!x2724.valid){
continue;
}
if( IKabs((x2722*(x2724.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*x2722)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2722*(x2724.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))))+IKsqr((cj0*x2722))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2722*(x2724.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))), (cj0*x2722));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2725=IKcos(j4);
IkReal x2726=((1.0)*r12);
IkReal x2727=IKsin(j4);
IkReal x2728=(sj5*x2727);
IkReal x2729=((1.0)*cj5*x2727);
IkReal x2730=(sj1*sj2);
IkReal x2731=((1.0)*sj0);
IkReal x2732=(cj1*sj2);
IkReal x2733=(cj2*sj1);
IkReal x2734=(cj5*sj3);
IkReal x2735=(sj3*sj5);
IkReal x2736=(cj3*sj5*x2725);
IkReal x2737=((1.0)*cj3*cj5*x2725);
IkReal x2738=((1.0)*cj1*cj2);
IkReal x2739=(cj3*cj5);
IkReal x2740=(cj3*sj5);
IkReal x2741=(cj5*sj3*x2725);
IkReal x2742=((1.0)*sj3*sj5*x2725);
IkReal x2743=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2725*x2726))+cj0);
evalcond[1]=(((r21*x2728))+(((-1.0)*r20*x2729)));
evalcond[2]=((((-1.0)*cj1*cj2*x2731))+((cj3*r12*x2727))+((sj0*x2730)));
evalcond[3]=((((-1.0)*x2731))+((r01*x2728))+(((-1.0)*r00*x2729)));
evalcond[4]=((((-1.0)*sj3*x2726*x2727))+(((-1.0)*x2731*x2733))+(((-1.0)*x2731*x2732)));
evalcond[5]=(((r21*x2734))+x2732+x2733+((r20*x2735))+(((-1.0)*r20*x2737))+((r21*x2736)));
evalcond[6]=(x2730+(((-1.0)*r21*x2742))+(((-1.0)*x2738))+((r21*x2739))+((r20*x2740))+((r20*x2741)));
evalcond[7]=((((-1.0)*cj0*x2738))+((r01*x2736))+(((-1.0)*r00*x2737))+((r01*x2734))+((r00*x2735))+((cj0*x2730)));
evalcond[8]=((((-1.0)*x2733*x2743))+((r00*x2741))+((r00*x2740))+((r01*x2739))+(((-1.0)*x2732*x2743))+(((-1.0)*r01*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2744=((1.0)*cj5);
CheckValue<IkReal> x2745=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2744))),-1);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x2744))+((cj3*r21*sj5))),-1);
if(!x2746.valid){
continue;
}
if( IKabs((sj0*(x2745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2746.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x2744)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2745.value)))+IKsqr(((x2746.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x2744))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2745.value)), ((x2746.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x2744))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2747=IKcos(j4);
IkReal x2748=((1.0)*r12);
IkReal x2749=IKsin(j4);
IkReal x2750=(sj5*x2749);
IkReal x2751=((1.0)*cj5*x2749);
IkReal x2752=(sj1*sj2);
IkReal x2753=((1.0)*sj0);
IkReal x2754=(cj1*sj2);
IkReal x2755=(cj2*sj1);
IkReal x2756=(cj5*sj3);
IkReal x2757=(sj3*sj5);
IkReal x2758=(cj3*sj5*x2747);
IkReal x2759=((1.0)*cj3*cj5*x2747);
IkReal x2760=((1.0)*cj1*cj2);
IkReal x2761=(cj3*cj5);
IkReal x2762=(cj3*sj5);
IkReal x2763=(cj5*sj3*x2747);
IkReal x2764=((1.0)*sj3*sj5*x2747);
IkReal x2765=((1.0)*cj0);
evalcond[0]=(cj0+(((-1.0)*x2747*x2748)));
evalcond[1]=((((-1.0)*r20*x2751))+((r21*x2750)));
evalcond[2]=(((sj0*x2752))+(((-1.0)*cj1*cj2*x2753))+((cj3*r12*x2749)));
evalcond[3]=(((r01*x2750))+(((-1.0)*x2753))+(((-1.0)*r00*x2751)));
evalcond[4]=((((-1.0)*x2753*x2755))+(((-1.0)*sj3*x2748*x2749))+(((-1.0)*x2753*x2754)));
evalcond[5]=((((-1.0)*r20*x2759))+x2755+x2754+((r21*x2756))+((r21*x2758))+((r20*x2757)));
evalcond[6]=(((r21*x2761))+(((-1.0)*r21*x2764))+((r20*x2762))+x2752+(((-1.0)*x2760))+((r20*x2763)));
evalcond[7]=((((-1.0)*r00*x2759))+((cj0*x2752))+(((-1.0)*cj0*x2760))+((r01*x2758))+((r01*x2756))+((r00*x2757)));
evalcond[8]=(((r00*x2763))+((r00*x2762))+(((-1.0)*x2754*x2765))+((r01*x2761))+(((-1.0)*x2755*x2765))+(((-1.0)*r01*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2766=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))),-1);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(r12,-1);
if(!x2767.valid){
continue;
}
if( IKabs((sj0*(x2766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*(x2767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2766.value)))+IKsqr((cj0*(x2767.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2766.value)), (cj0*(x2767.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2768=IKcos(j4);
IkReal x2769=((1.0)*r12);
IkReal x2770=IKsin(j4);
IkReal x2771=(sj5*x2770);
IkReal x2772=((1.0)*cj5*x2770);
IkReal x2773=(sj1*sj2);
IkReal x2774=((1.0)*sj0);
IkReal x2775=(cj1*sj2);
IkReal x2776=(cj2*sj1);
IkReal x2777=(cj5*sj3);
IkReal x2778=(sj3*sj5);
IkReal x2779=(cj3*sj5*x2768);
IkReal x2780=((1.0)*cj3*cj5*x2768);
IkReal x2781=((1.0)*cj1*cj2);
IkReal x2782=(cj3*cj5);
IkReal x2783=(cj3*sj5);
IkReal x2784=(cj5*sj3*x2768);
IkReal x2785=((1.0)*sj3*sj5*x2768);
IkReal x2786=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2768*x2769))+cj0);
evalcond[1]=((((-1.0)*r20*x2772))+((r21*x2771)));
evalcond[2]=(((sj0*x2773))+((cj3*r12*x2770))+(((-1.0)*cj1*cj2*x2774)));
evalcond[3]=((((-1.0)*x2774))+((r01*x2771))+(((-1.0)*r00*x2772)));
evalcond[4]=((((-1.0)*x2774*x2776))+(((-1.0)*sj3*x2769*x2770))+(((-1.0)*x2774*x2775)));
evalcond[5]=(((r21*x2777))+((r21*x2779))+((r20*x2778))+(((-1.0)*r20*x2780))+x2776+x2775);
evalcond[6]=((((-1.0)*x2781))+((r20*x2784))+((r20*x2783))+x2773+((r21*x2782))+(((-1.0)*r21*x2785)));
evalcond[7]=(((r00*x2778))+((r01*x2779))+(((-1.0)*r00*x2780))+(((-1.0)*cj0*x2781))+((r01*x2777))+((cj0*x2773)));
evalcond[8]=(((r01*x2782))+(((-1.0)*x2775*x2786))+((r00*x2784))+((r00*x2783))+(((-1.0)*x2776*x2786))+(((-1.0)*r01*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2787=((1.0)*cj0);
IkReal x2788=((1.0)*sj0);
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2788))+(((-1.0)*r02*x2787)))),IkReal(((((-1.0)*r11*sj5*x2788))+(((-1.0)*r01*sj5*x2787))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2789.value)))+(x2790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2791=IKcos(j4);
IkReal x2792=((1.0)*x2791);
IkReal x2793=IKsin(j4);
IkReal x2794=(sj5*x2793);
IkReal x2795=((1.0)*cj5*x2793);
IkReal x2796=((1.0)*sj0);
IkReal x2797=(cj1*sj2);
IkReal x2798=(cj2*sj1);
IkReal x2799=(cj5*sj3);
IkReal x2800=(sj3*sj5);
IkReal x2801=(cj3*x2793);
IkReal x2802=(cj3*sj5*x2791);
IkReal x2803=((1.0)*cj3*cj5*x2791);
IkReal x2804=(sj1*sj2);
IkReal x2805=((1.0)*cj1*cj2);
IkReal x2806=(cj3*cj5);
IkReal x2807=(cj3*sj5);
IkReal x2808=((1.0)*sj3*x2793);
IkReal x2809=(cj5*sj3*x2791);
IkReal x2810=((1.0)*sj3*sj5*x2791);
IkReal x2811=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2792))+((r21*x2794))+(((-1.0)*r20*x2795)));
evalcond[1]=((((-1.0)*r10*x2795))+cj0+(((-1.0)*r12*x2792))+((r11*x2794)));
evalcond[2]=((((-1.0)*r00*x2795))+((r01*x2794))+(((-1.0)*r02*x2792))+(((-1.0)*x2796)));
evalcond[3]=(((r22*x2801))+x2797+x2798+(((-1.0)*r20*x2803))+((r20*x2800))+((r21*x2802))+((r21*x2799)));
evalcond[4]=(((r20*x2809))+(((-1.0)*x2805))+x2804+((r21*x2806))+((r20*x2807))+(((-1.0)*r21*x2810))+(((-1.0)*r22*x2808)));
evalcond[5]=(((r00*x2809))+((r01*x2806))+(((-1.0)*x2798*x2811))+(((-1.0)*r01*x2810))+(((-1.0)*r02*x2808))+(((-1.0)*x2797*x2811))+((r00*x2807)));
evalcond[6]=(((r02*x2801))+(((-1.0)*cj0*x2805))+((r01*x2799))+((r01*x2802))+((r00*x2800))+(((-1.0)*r00*x2803))+((cj0*x2804)));
evalcond[7]=((((-1.0)*r11*x2810))+((r11*x2806))+(((-1.0)*x2796*x2798))+((r10*x2807))+(((-1.0)*r12*x2808))+((r10*x2809))+(((-1.0)*x2796*x2797)));
evalcond[8]=((((-1.0)*r10*x2803))+((r11*x2802))+(((-1.0)*cj1*cj2*x2796))+((r10*x2800))+((r11*x2799))+((r12*x2801))+((sj0*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2812=((1.0)*cj5);
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2812)))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2812))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2813.value)))+(x2814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2815=IKcos(j4);
IkReal x2816=((1.0)*x2815);
IkReal x2817=IKsin(j4);
IkReal x2818=(sj5*x2817);
IkReal x2819=((1.0)*cj5*x2817);
IkReal x2820=((1.0)*sj0);
IkReal x2821=(cj1*sj2);
IkReal x2822=(cj2*sj1);
IkReal x2823=(cj5*sj3);
IkReal x2824=(sj3*sj5);
IkReal x2825=(cj3*x2817);
IkReal x2826=(cj3*sj5*x2815);
IkReal x2827=((1.0)*cj3*cj5*x2815);
IkReal x2828=(sj1*sj2);
IkReal x2829=((1.0)*cj1*cj2);
IkReal x2830=(cj3*cj5);
IkReal x2831=(cj3*sj5);
IkReal x2832=((1.0)*sj3*x2817);
IkReal x2833=(cj5*sj3*x2815);
IkReal x2834=((1.0)*sj3*sj5*x2815);
IkReal x2835=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2816))+(((-1.0)*r20*x2819))+((r21*x2818)));
evalcond[1]=((((-1.0)*r12*x2816))+cj0+((r11*x2818))+(((-1.0)*r10*x2819)));
evalcond[2]=((((-1.0)*x2820))+((r01*x2818))+(((-1.0)*r02*x2816))+(((-1.0)*r00*x2819)));
evalcond[3]=(((r21*x2826))+x2821+x2822+((r20*x2824))+(((-1.0)*r20*x2827))+((r22*x2825))+((r21*x2823)));
evalcond[4]=((((-1.0)*r21*x2834))+((r20*x2831))+((r21*x2830))+x2828+(((-1.0)*r22*x2832))+(((-1.0)*x2829))+((r20*x2833)));
evalcond[5]=((((-1.0)*r01*x2834))+((r00*x2831))+((r00*x2833))+((r01*x2830))+(((-1.0)*r02*x2832))+(((-1.0)*x2821*x2835))+(((-1.0)*x2822*x2835)));
evalcond[6]=((((-1.0)*r00*x2827))+((r01*x2823))+((r00*x2824))+((r02*x2825))+((cj0*x2828))+(((-1.0)*cj0*x2829))+((r01*x2826)));
evalcond[7]=((((-1.0)*x2820*x2822))+(((-1.0)*x2820*x2821))+((r10*x2831))+((r11*x2830))+(((-1.0)*r12*x2832))+((r10*x2833))+(((-1.0)*r11*x2834)));
evalcond[8]=(((sj0*x2828))+((r12*x2825))+(((-1.0)*cj1*cj2*x2820))+((r10*x2824))+((r11*x2826))+((r11*x2823))+(((-1.0)*r10*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=((1.0)*sj0);
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2836)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x2836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2837.value)+(((1.5707963267949)*(x2838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2839=IKcos(j4);
IkReal x2840=((1.0)*x2839);
IkReal x2841=IKsin(j4);
IkReal x2842=(sj5*x2841);
IkReal x2843=((1.0)*cj5*x2841);
IkReal x2844=((1.0)*sj0);
IkReal x2845=(cj1*sj2);
IkReal x2846=(cj2*sj1);
IkReal x2847=(cj5*sj3);
IkReal x2848=(sj3*sj5);
IkReal x2849=(cj3*x2841);
IkReal x2850=(cj3*sj5*x2839);
IkReal x2851=((1.0)*cj3*cj5*x2839);
IkReal x2852=(sj1*sj2);
IkReal x2853=((1.0)*cj1*cj2);
IkReal x2854=(cj3*cj5);
IkReal x2855=(cj3*sj5);
IkReal x2856=((1.0)*sj3*x2841);
IkReal x2857=(cj5*sj3*x2839);
IkReal x2858=((1.0)*sj3*sj5*x2839);
IkReal x2859=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2843))+(((-1.0)*r22*x2840))+((r21*x2842)));
evalcond[1]=(((r11*x2842))+cj0+(((-1.0)*r10*x2843))+(((-1.0)*r12*x2840)));
evalcond[2]=(((r01*x2842))+(((-1.0)*r00*x2843))+(((-1.0)*r02*x2840))+(((-1.0)*x2844)));
evalcond[3]=((((-1.0)*r20*x2851))+x2845+x2846+((r22*x2849))+((r20*x2848))+((r21*x2847))+((r21*x2850)));
evalcond[4]=((((-1.0)*r22*x2856))+((r20*x2857))+(((-1.0)*x2853))+((r21*x2854))+x2852+(((-1.0)*r21*x2858))+((r20*x2855)));
evalcond[5]=((((-1.0)*x2846*x2859))+(((-1.0)*r01*x2858))+((r00*x2857))+(((-1.0)*r02*x2856))+((r00*x2855))+((r01*x2854))+(((-1.0)*x2845*x2859)));
evalcond[6]=(((r02*x2849))+((r01*x2847))+(((-1.0)*cj0*x2853))+((r01*x2850))+((r00*x2848))+(((-1.0)*r00*x2851))+((cj0*x2852)));
evalcond[7]=((((-1.0)*x2844*x2845))+((r10*x2855))+((r11*x2854))+(((-1.0)*r11*x2858))+(((-1.0)*r12*x2856))+(((-1.0)*x2844*x2846))+((r10*x2857)));
evalcond[8]=(((r11*x2850))+((r11*x2847))+(((-1.0)*r10*x2851))+((r10*x2848))+((sj0*x2852))+(((-1.0)*cj1*cj2*x2844))+((r12*x2849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2860=r21*r21;
IkReal x2861=(cj3*x2860);
IkReal x2862=((2.0)*r21);
IkReal x2863=cj5*cj5;
IkReal x2864=r20*r20;
IkReal x2865=((1.0)*r22);
IkReal x2866=(cj1*sj2);
IkReal x2867=(cj2*sj1);
IkReal x2868=(r20*sj3);
IkReal x2869=(cj5*r20);
IkReal x2870=((1.0)*r21*sj5);
IkReal x2871=(cj5*sj3*sj5);
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign((x2861+(((-1.0)*cj3*cj5*r20*sj5*x2862))+((cj3*(r22*r22)))+(((-1.0)*x2861*x2863))+((cj3*x2863*x2864)))),-1);
if(!x2872.valid){
continue;
}
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2868))+(((-1.0)*x2865*x2866))+(((-1.0)*x2865*x2867))+(((-1.0)*cj5*r21*r22*sj3)))),IkReal(((((-1.0)*r21*x2868))+(((-1.0)*x2867*x2870))+((r20*sj3*x2862*x2863))+((x2866*x2869))+(((-1.0)*x2860*x2871))+((x2864*x2871))+(((-1.0)*x2866*x2870))+((x2867*x2869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2872.value)))+(x2873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2874=IKcos(j4);
IkReal x2875=((1.0)*r22);
IkReal x2876=IKsin(j4);
IkReal x2877=(r21*sj5);
IkReal x2878=((1.0)*cj5*r20);
IkReal x2879=(cj5*r21);
IkReal x2880=(r20*sj5);
IkReal x2881=(cj3*x2874);
IkReal x2882=(sj3*x2874);
evalcond[0]=((((-1.0)*x2876*x2878))+(((-1.0)*x2874*x2875))+((x2876*x2877)));
evalcond[1]=((((-1.0)*x2878*x2881))+((sj3*x2879))+((cj1*sj2))+((x2877*x2881))+((cj3*r22*x2876))+((sj3*x2880))+((cj2*sj1)));
evalcond[2]=(((cj5*r20*x2882))+(((-1.0)*(1.0)*cj1*cj2))+((cj3*x2879))+(((-1.0)*sj3*x2875*x2876))+(((-1.0)*r21*sj5*x2882))+((cj3*x2880))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2883=(sj4*sj5);
IkReal x2884=(cj5*sj4);
if( IKabs((((r01*x2883))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2884))+(((-1.0)*r11*x2883))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2883))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2884))))+IKsqr((((r10*x2884))+(((-1.0)*r11*x2883))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2883))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2884))), (((r10*x2884))+(((-1.0)*r11*x2883))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2885=IKcos(j0);
IkReal x2886=((1.0)*cj4);
IkReal x2887=(sj4*sj5);
IkReal x2888=((1.0)*cj5*sj4);
IkReal x2889=IKsin(j0);
IkReal x2890=((1.0)*x2889);
IkReal x2891=((0.1157)*cj5);
IkReal x2892=((0.1157)*sj5);
IkReal x2893=((0.612)*cj1);
IkReal x2894=((0.5723)*cj1*cj2);
IkReal x2895=(sj1*sj2);
IkReal x2896=(x2885*x2895);
IkReal x2897=(x2889*x2895);
IkReal x2898=(cj3*cj5);
IkReal x2899=(cj3*sj5);
IkReal x2900=((1.0)*sj3*sj4);
IkReal x2901=(cj4*cj5*sj3);
IkReal x2902=(cj1*sj2);
IkReal x2903=((1.0)*x2885);
IkReal x2904=(cj2*sj1);
IkReal x2905=((1.0)*cj4*sj3*sj5);
IkReal x2906=(cj3*sj4);
IkReal x2907=(cj5*sj3);
IkReal x2908=(sj3*sj5);
IkReal x2909=(cj3*cj4*sj5);
IkReal x2910=(cj1*cj2);
IkReal x2911=((1.0)*cj3*cj4*cj5);
evalcond[0]=(((r11*x2887))+(((-1.0)*r12*x2886))+x2885+(((-1.0)*r10*x2888)));
evalcond[1]=((((-1.0)*r00*x2888))+(((-1.0)*x2890))+((r01*x2887))+(((-1.0)*r02*x2886)));
evalcond[2]=(((x2885*x2894))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x2891))+((x2885*x2893))+(((-0.5723)*x2896))+(((-0.16394)*x2889))+(((-1.0)*r00*x2892)));
evalcond[3]=(((x2889*x2894))+(((-1.0)*(1.0)*py))+(((-0.5723)*x2897))+(((0.16394)*x2885))+((x2889*x2893))+(((-1.0)*r11*x2891))+(((-1.0)*r10*x2892)));
evalcond[4]=((((-1.0)*r02*x2900))+(((-1.0)*x2903*x2904))+((r00*x2901))+((r01*x2898))+(((-1.0)*r01*x2905))+((r00*x2899))+(((-1.0)*x2902*x2903)));
evalcond[5]=(((r02*x2906))+(((-1.0)*r00*x2911))+((r01*x2907))+((r01*x2909))+x2896+(((-1.0)*x2903*x2910))+((r00*x2908)));
evalcond[6]=(((r10*x2901))+(((-1.0)*x2890*x2902))+(((-1.0)*r12*x2900))+((r11*x2898))+(((-1.0)*r11*x2905))+(((-1.0)*x2890*x2904))+((r10*x2899)));
evalcond[7]=(((r11*x2909))+((r10*x2908))+(((-1.0)*r10*x2911))+((r11*x2907))+(((-1.0)*x2890*x2910))+x2897+((r12*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2912=r21*r21;
IkReal x2913=(sj3*x2912);
IkReal x2914=(r21*sj5);
IkReal x2915=cj5*cj5;
IkReal x2916=r20*r20;
IkReal x2917=(sj1*sj2);
IkReal x2918=((1.0)*cj1*cj2);
IkReal x2919=(cj3*r21);
IkReal x2920=(r20*x2919);
IkReal x2921=(cj5*r20);
IkReal x2922=(cj3*cj5*sj5);
CheckValue<IkReal> x2923 = IKatan2WithCheck(IkReal((((r22*x2917))+((((r20*r22))*((cj3*sj5))))+((cj5*r22*x2919))+(((-1.0)*r22*x2918)))),IkReal((((x2914*x2917))+(((-1.0)*sj1*sj2*x2921))+((cj1*cj2*x2921))+((x2912*x2922))+(((-1.0)*x2916*x2922))+(((-1.0)*x2914*x2918))+x2920+(((-2.0)*x2915*x2920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2923.valid){
continue;
}
CheckValue<IkReal> x2924=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*sj3*x2914))+((sj3*(r22*r22)))+(((-1.0)*x2913*x2915))+((sj3*x2915*x2916))+x2913)),-1);
if(!x2924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2923.value)+(((1.5707963267949)*(x2924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2925=IKcos(j4);
IkReal x2926=((1.0)*r22);
IkReal x2927=IKsin(j4);
IkReal x2928=(r21*sj5);
IkReal x2929=((1.0)*cj5*r20);
IkReal x2930=(cj5*r21);
IkReal x2931=(r20*sj5);
IkReal x2932=(cj3*x2925);
IkReal x2933=(sj3*x2925);
evalcond[0]=((((-1.0)*x2925*x2926))+((x2927*x2928))+(((-1.0)*x2927*x2929)));
evalcond[1]=(((sj3*x2930))+((sj3*x2931))+(((-1.0)*x2929*x2932))+((cj1*sj2))+((cj3*r22*x2927))+((x2928*x2932))+((cj2*sj1)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+((cj5*r20*x2933))+((cj3*x2930))+(((-1.0)*r21*sj5*x2933))+(((-1.0)*sj3*x2926*x2927))+((sj1*sj2))+((cj3*x2931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2934=(sj4*sj5);
IkReal x2935=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x2935))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2934))+((r10*x2935))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2935))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2934))))+IKsqr(((((-1.0)*r11*x2934))+((r10*x2935))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2935))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2934))), ((((-1.0)*r11*x2934))+((r10*x2935))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2936=IKcos(j0);
IkReal x2937=((1.0)*cj4);
IkReal x2938=(sj4*sj5);
IkReal x2939=((1.0)*cj5*sj4);
IkReal x2940=IKsin(j0);
IkReal x2941=((1.0)*x2940);
IkReal x2942=((0.1157)*cj5);
IkReal x2943=((0.1157)*sj5);
IkReal x2944=((0.612)*cj1);
IkReal x2945=((0.5723)*cj1*cj2);
IkReal x2946=(sj1*sj2);
IkReal x2947=(x2936*x2946);
IkReal x2948=(x2940*x2946);
IkReal x2949=(cj3*cj5);
IkReal x2950=(cj3*sj5);
IkReal x2951=((1.0)*sj3*sj4);
IkReal x2952=(cj4*cj5*sj3);
IkReal x2953=(cj1*sj2);
IkReal x2954=((1.0)*x2936);
IkReal x2955=(cj2*sj1);
IkReal x2956=((1.0)*cj4*sj3*sj5);
IkReal x2957=(cj3*sj4);
IkReal x2958=(cj5*sj3);
IkReal x2959=(sj3*sj5);
IkReal x2960=(cj3*cj4*sj5);
IkReal x2961=(cj1*cj2);
IkReal x2962=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r12*x2937))+(((-1.0)*r10*x2939))+x2936+((r11*x2938)));
evalcond[1]=((((-1.0)*r00*x2939))+((r01*x2938))+(((-1.0)*x2941))+(((-1.0)*r02*x2937)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.16394)*x2940))+(((-1.0)*r00*x2943))+((x2936*x2945))+((x2936*x2944))+(((-1.0)*r01*x2942))+(((-0.5723)*x2947)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x2943))+(((-1.0)*r11*x2942))+(((0.16394)*x2936))+((x2940*x2945))+((x2940*x2944))+(((-0.5723)*x2948)));
evalcond[4]=(((r01*x2949))+(((-1.0)*x2954*x2955))+(((-1.0)*r01*x2956))+((r00*x2950))+(((-1.0)*r02*x2951))+(((-1.0)*x2953*x2954))+((r00*x2952)));
evalcond[5]=(((r00*x2959))+(((-1.0)*r00*x2962))+((r01*x2958))+x2947+(((-1.0)*x2954*x2961))+((r01*x2960))+((r02*x2957)));
evalcond[6]=((((-1.0)*r11*x2956))+(((-1.0)*x2941*x2953))+(((-1.0)*r12*x2951))+((r11*x2949))+((r10*x2950))+(((-1.0)*x2941*x2955))+((r10*x2952)));
evalcond[7]=(((r12*x2957))+(((-1.0)*x2941*x2961))+((r10*x2959))+((r11*x2958))+x2948+((r11*x2960))+(((-1.0)*r10*x2962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10 (3301ffae04b7fb3027cd3fc30c229e4e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
