/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-30 13:46:03.112822
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[4]);
x1=IKsin(j[0]);
x2=((1.0)*x1);
x3=IKsin(j[4]);
x4=IKcos(j[3]);
x5=((1.0)*x4);
x6=IKcos(j[0]);
x7=IKsin(j[1]);
x8=IKsin(j[2]);
x9=(x7*x8);
x10=(x6*x9);
x11=IKcos(j[1]);
x12=IKcos(j[2]);
x13=(x11*x12);
x14=((1.0)*x13);
x15=(x14*x6);
x16=(x10+(((-1.0)*(1.0)*x15)));
x17=IKsin(j[3]);
x18=((1.0)*x17);
x19=(x12*x7);
x20=((1.0)*x19);
x21=(x11*x8);
x22=((1.0)*x21);
x23=(x6*((x22+x20)));
x24=IKsin(j[5]);
x25=((1.0)*x9);
x26=((((-1.0)*(1.0)*x23*x5))+((x18*((((x25*x6))+(((-1.0)*(1.0)*x15)))))));
x27=IKcos(j[5]);
x28=(x2*x3);
x29=(x16*x4);
x30=(x17*x23);
x31=(x0*((x30+x29)));
x32=((0.1)*x1);
x33=((0.425)*x11);
x34=((0.392)*x11*x12);
x35=((0.1)*x9);
x36=((0.1)*x13);
x37=((0.1)*x19);
x38=((0.1)*x21);
x39=(x0*x6);
x40=(x1*x9);
x41=(x13*x2);
x42=((((-1.0)*(1.0)*x41))+x40);
x43=(x2*((x19+x21)));
x44=(((x18*(((((-1.0)*(1.0)*x41))+((x2*x9))))))+(((-1.0)*(1.0)*x43*x5)));
x45=(x3*x6);
x46=(x4*x42);
x47=(x17*x43);
x48=(x0*((x46+x47)));
x49=(x4*((x19+x21)));
x50=(x14+(((-1.0)*(1.0)*x25)));
x51=(x17*x50);
x52=((((-1.0)*(1.0)*x49))+(((-1.0)*(1.0)*x51)));
x53=(((x18*((x22+x20))))+(((-1.0)*(1.0)*x5*x50)));
eerot[0]=((((-1.0)*(1.0)*x0*x2))+((x3*(((((-1.0)*(1.0)*x18*x23))+(((-1.0)*(1.0)*x16*x5)))))));
eerot[1]=(((x27*((x28+(((-1.0)*(1.0)*x31))))))+((x24*x26)));
eerot[2]=(((x26*x27))+((x24*((x31+(((-1.0)*(1.0)*x28)))))));
IkReal x54=((1.0)*x6);
eetrans[0]=((((-1.0)*(1.0)*x0*x32))+((x17*(((((-1.0)*x36*x54))+((x35*x6))))))+(((-1.0)*(0.134)*x1))+((x4*(((((-1.0)*x37*x54))+(((-1.0)*x38*x54))))))+((x33*x6))+((x3*(((((-1.0)*(0.1)*x29))+(((-1.0)*(0.1)*x30))))))+(((-1.0)*(0.392)*x10))+((x34*x6)));
eerot[3]=(x39+((x3*(((((-1.0)*(1.0)*x18*x43))+(((-1.0)*(1.0)*x42*x5)))))));
eerot[4]=(((x27*(((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x45))))))+((x24*x44)));
eerot[5]=(((x24*((x48+x45))))+((x27*x44)));
IkReal x55=((1.0)*x32);
eetrans[1]=(((x17*((((x32*x9))+(((-1.0)*x13*x55))))))+((x4*(((((-1.0)*x21*x55))+(((-1.0)*x19*x55))))))+((x1*x33))+(((0.1)*x39))+((x3*(((((-1.0)*(0.1)*x46))+(((-1.0)*(0.1)*x47))))))+(((0.134)*x6))+(((-1.0)*(0.392)*x40))+((x1*x34)));
eerot[6]=(x3*x52);
eerot[7]=(((x0*x27*x52))+((x24*x53)));
eerot[8]=(((x27*x53))+((x0*x24*((x49+x51)))));
eetrans[2]=((0.163)+(((-1.0)*(0.425)*x7))+((x3*(((((-1.0)*(0.1)*x51))+(((-1.0)*(0.1)*x49))))))+((x4*((x35+(((-1.0)*(1.0)*x36))))))+(((-1.0)*(0.392)*x21))+(((-1.0)*(0.392)*x19))+((x17*((x37+x38)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r01)));
new_r01=((-1.0)*(((1.0)*r02)));
new_r02=r00;
new_px=((((-1.0)*(0.1)*r00))+px);
new_r10=((-1.0)*(((1.0)*r11)));
new_r11=((-1.0)*(((1.0)*r12)));
new_r12=r10;
new_py=(py+(((-1.0)*(0.1)*r10)));
new_r20=((-1.0)*(((1.0)*r21)));
new_r21=((-1.0)*(((1.0)*r22)));
new_r22=r20;
new_pz=((-0.163)+pz+(((-1.0)*(0.1)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*py);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x56)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x58))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x56)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x58))+((py*r01)));
rxp2_0=((((-1.0)*r22*x56))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x57))+((px*r22)));
rxp2_2=((((-1.0)*r12*x58))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x59=((0.1)*r20);
IkReal x60=((-1.0)*x59);
IkReal x61=((0.2)*npx);
IkReal x62=((-1.0)*(((1.0)*r20)));
IkReal x63=((-1.0)*(((1.0)*rxp0_2)));
IkReal x64=((0.1)*r21);
IkReal x65=((-1.0)*x64);
IkReal x66=((0.2)*npy);
IkReal x67=((-1.0)*(((1.0)*r21)));
IkReal x68=((-1.0)*(((1.0)*rxp1_2)));
IkReal x69=((-1.0)*(((1.0)*r22)));
IkReal x70=((0.1)*r22);
IkReal x71=((-1.0)*(((1.0)*npz)));
IkReal x72=((-1.0)*(((1.0)*npx)));
matrixinvcoeffs[0]=x60;
matrixinvcoeffs[1]=x61;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x62;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x63;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x60;
matrixinvcoeffs[19]=x61;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x62;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x63;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x65;
matrixinvcoeffs[33]=x66;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x67;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x68;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x65;
matrixinvcoeffs[51]=x66;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x67;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x68;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x69;
matrixinvcoeffs[76]=x70;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*(((1.0)*rxp2_2)));
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x71;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x70;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x68;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x65;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x68;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x64;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x62;
matrixinvcoeffs[133]=x72;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x59;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x62;
matrixinvcoeffs[151]=x72;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x60;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x69;
matrixinvcoeffs[165]=x71;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x70;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x69;
matrixinvcoeffs[183]=x71;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-1.0)*x70);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x67;
matrixinvcoeffs[204]=x64;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x68;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*(((1.0)*npy)));
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x64;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x72;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x60;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x62;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x60;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x63;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x73=((0.00134)*r22);
IkReal x74=((0.00134)*r21);
IkReal x75=((0.00134)*r20);
IkReal x76=((0.268)*npz*pz);
IkReal x77=((0.134)*pp*r22);
IkReal x78=((0.268)*npy*pz);
IkReal x79=((0.134)*pp*r21);
IkReal x80=((0.268)*npx*pz);
IkReal x81=((0.134)*pp*r20);
IkReal x82=((((-1.0)*gclwh8_5*x81))+((gclwh6_5*x74))+((gclwh10_5*x76))+(((-1.0)*gclwh8_5*x75))+(((-1.0)*gclwh6_5*x78))+((gclwh6_5*x79))+(((-1.0)*gclwh10_5*x73))+(((-1.0)*gclwh10_5*x77))+((gclwh8_5*x80)));
IkReal x83=(gclwh10_12*r22);
IkReal x84=(gclwh12_14*rxp1_2);
IkReal x85=((0.0268)*x84);
IkReal x86=(gclwh12_8*rxp1_2);
IkReal x87=(gclwh14_14*rxp0_2);
IkReal x88=((0.0268)*x87);
IkReal x89=(gclwh14_8*rxp0_2);
IkReal x90=((0.0268)*rxp2_2);
IkReal x91=(gclwh4_14*x90);
IkReal x92=(gclwh4_8*rxp2_2);
IkReal x93=(gclwh6_12*r21);
IkReal x94=(gclwh8_12*r20);
IkReal x95=(gclwh10_12*npz*pz);
IkReal x96=(gclwh10_12*pp*r22);
IkReal x97=(gclwh6_12*npy*pz);
IkReal x98=(gclwh6_12*pp*r21);
IkReal x99=(gclwh8_12*npx*pz);
IkReal x100=(gclwh8_12*pp*r20);
IkReal x101=(gclwh10_11*r22);
IkReal x102=((0.01)*x101);
IkReal x103=(gclwh12_11*rxp1_2);
IkReal x104=((0.2)*x103);
IkReal x105=(gclwh12_3*rxp1_2);
IkReal x106=(gclwh14_11*rxp0_2);
IkReal x107=((0.2)*x106);
IkReal x108=(gclwh14_3*rxp0_2);
IkReal x109=(gclwh4_11*rxp2_2);
IkReal x110=((0.2)*x109);
IkReal x111=(gclwh4_3*rxp2_2);
IkReal x112=(gclwh6_11*r21);
IkReal x113=((0.01)*x112);
IkReal x114=(gclwh8_11*r20);
IkReal x115=((0.01)*x114);
IkReal x116=(pp*x101);
IkReal x117=(pp*x114);
IkReal x118=(gclwh10_11*npz*pz);
IkReal x119=((2.0)*x118);
IkReal x120=(gclwh6_11*npy*pz);
IkReal x121=((2.0)*x120);
IkReal x122=(pp*x112);
IkReal x123=(gclwh8_11*npx*pz);
IkReal x124=((2.0)*x123);
IkReal x125=((0.01)*pz);
IkReal x126=(gclwh10_2*r22);
IkReal x127=((0.2)*pz);
IkReal x128=(gclwh12_2*rxp1_2);
IkReal x129=((0.2)*pp);
IkReal x130=(gclwh14_2*rxp0_2);
IkReal x131=(gclwh4_2*rxp2_2);
IkReal x132=(gclwh6_2*r21);
IkReal x133=((0.01)*r20);
IkReal x134=(gclwh8_2*pz);
IkReal x135=(gclwh10_2*pp*r22);
IkReal x136=(pp*r20);
IkReal x137=((1.0)*pp*pz);
IkReal x138=pz*pz;
IkReal x139=((2.0)*npz*x138);
IkReal x140=((2.0)*npy*x138);
IkReal x141=((2.0)*npx*x138);
IkReal x142=(((x127*x130))+(((-1.0)*x132*x137))+(((-1.0)*x125*x132))+(((-1.0)*x127*x128))+((x111*x129))+((x133*x134))+((x134*x136))+(((-1.0)*gclwh8_2*x141))+((pz*x135))+(((0.02)*x92))+(((-0.02)*x89))+((x105*x129))+(((-1.0)*x127*x131))+(((-1.0)*x108*x129))+((x125*x126))+(((0.02)*x86))+((gclwh6_2*x140))+(((-1.0)*gclwh10_2*x139)));
IkReal x143=((0.02)*x101);
IkReal x144=((0.4)*x103);
IkReal x145=((0.4)*x106);
IkReal x146=((0.4)*x109);
IkReal x147=((0.02)*x112);
IkReal x148=((0.02)*x114);
IkReal x149=((4.0)*x118);
IkReal x150=((2.0)*x116);
IkReal x151=((4.0)*x120);
IkReal x152=((2.0)*x122);
IkReal x153=((4.0)*x123);
IkReal x154=((2.0)*x117);
IkReal x155=(x150+x151+x154+x148+x145+x143+(((-1.0)*x152))+(((-1.0)*x146))+(((-1.0)*x153))+(((-1.0)*x147))+(((-1.0)*x144))+(((-1.0)*x149)));
IkReal x156=((0.0536)*x84);
IkReal x157=((0.0536)*x87);
IkReal x158=(gclwh4_14*rxp2_2);
IkReal x159=((0.0536)*x158);
IkReal x160=(x157+(((-1.0)*x159))+(((-1.0)*x156)));
IkReal x161=((0.1568)*rxp2_2);
IkReal x162=((0.00784)*r21);
IkReal x163=((0.00784)*r20);
IkReal x164=(gclwh10_2*npz*pz);
IkReal x165=((0.784)*pp);
IkReal x166=((1.568)*npy*pz);
IkReal x167=((1.568)*npx);
IkReal x168=((0.784)*pp*r20);
IkReal x169=(gclwh11_10*r22);
IkReal x170=((0.01)*x169);
IkReal x171=(gclwh13_1*rxp1_2);
IkReal x172=(gclwh13_10*rxp1_2);
IkReal x173=((0.2)*x172);
IkReal x174=(gclwh15_1*rxp0_2);
IkReal x175=(gclwh15_10*rxp0_2);
IkReal x176=((0.2)*x175);
IkReal x177=(gclwh5_1*rxp2_2);
IkReal x178=(gclwh5_10*rxp2_2);
IkReal x179=((0.2)*x178);
IkReal x180=(gclwh7_10*r21);
IkReal x181=((0.01)*x180);
IkReal x182=(gclwh9_10*r20);
IkReal x183=((0.01)*x182);
IkReal x184=(pp*x180);
IkReal x185=(gclwh11_10*npz*pz);
IkReal x186=((2.0)*x185);
IkReal x187=(pp*x169);
IkReal x188=(gclwh7_10*npy*pz);
IkReal x189=((2.0)*x188);
IkReal x190=(gclwh9_10*npx*pz);
IkReal x191=((2.0)*x190);
IkReal x192=(pp*x182);
IkReal x193=(gclwh13_9*rxp1_2);
IkReal x194=(gclwh15_9*rxp0_2);
IkReal x195=(gclwh5_9*rxp2_2);
IkReal x196=(gclwh11_0*r22);
IkReal x197=(gclwh13_0*rxp1_2);
IkReal x198=(gclwh15_0*rxp0_2);
IkReal x199=(gclwh5_0*rxp2_2);
IkReal x200=(gclwh7_0*r21);
IkReal x201=(gclwh9_0*pz);
IkReal x202=(gclwh11_0*pp*r22);
IkReal x203=((((-1.0)*x137*x200))+(((-0.02)*x194))+(((0.02)*x195))+((gclwh7_0*x140))+((x129*x171))+(((-1.0)*x125*x200))+(((-1.0)*x127*x197))+((x129*x177))+(((-1.0)*x129*x174))+(((-1.0)*gclwh9_0*x141))+((pz*x202))+(((0.02)*x193))+((x136*x201))+((x125*x196))+((x127*x198))+((x133*x201))+(((-1.0)*gclwh11_0*x139))+(((-1.0)*x127*x199)));
IkReal x204=(((gclwh7_7*x79))+(((-1.0)*gclwh9_7*x81))+((gclwh11_7*x76))+((gclwh7_7*x74))+((gclwh9_7*x80))+(((-1.0)*gclwh11_7*x77))+(((-1.0)*gclwh7_7*x78))+(((-1.0)*gclwh11_7*x73))+(((-1.0)*gclwh9_7*x75)));
IkReal x205=(gclwh11_13*r22);
IkReal x206=(gclwh13_15*rxp1_2);
IkReal x207=((0.0268)*x206);
IkReal x208=(gclwh15_15*rxp0_2);
IkReal x209=((0.0268)*x208);
IkReal x210=(gclwh5_15*x90);
IkReal x211=(gclwh7_13*r21);
IkReal x212=(gclwh9_13*r20);
IkReal x213=(gclwh11_13*npz*pz);
IkReal x214=(gclwh11_13*pp*r22);
IkReal x215=(gclwh7_13*npy*pz);
IkReal x216=(gclwh7_13*pp*r21);
IkReal x217=(gclwh9_13*npx*pz);
IkReal x218=(gclwh9_13*pp*r20);
IkReal x219=((0.0536)*x206);
IkReal x220=((0.0536)*x208);
IkReal x221=(gclwh5_15*rxp2_2);
IkReal x222=((0.0536)*x221);
IkReal x223=((((-1.0)*x220))+x219+x222);
IkReal x224=(gclwh11_0*npz*pz);
IkReal x225=((0.02)*x169);
IkReal x226=((0.4)*x172);
IkReal x227=((0.4)*x175);
IkReal x228=((0.4)*x178);
IkReal x229=((0.02)*x180);
IkReal x230=((0.02)*x182);
IkReal x231=((4.0)*x185);
IkReal x232=((2.0)*x187);
IkReal x233=((4.0)*x188);
IkReal x234=((2.0)*x184);
IkReal x235=((4.0)*x190);
IkReal x236=((2.0)*x192);
IkReal x237=((((-1.0)*x231))+(((-1.0)*x235))+(((-1.0)*x234))+(((-1.0)*x228))+(((-1.0)*x226))+(((-1.0)*x229))+x227+x225+x236+x230+x232+x233);
IkReal x238=((0.0268)*rxp1_2);
IkReal x239=((0.0268)*rxp0_2);
IkReal x240=(((gclwh8_5*x239))+((gclwh10_5*x90))+(((-1.0)*gclwh6_5*x238)));
IkReal x241=(gclwh10_12*rxp2_2);
IkReal x242=(gclwh12_14*r21);
IkReal x243=((0.00134)*x242);
IkReal x244=(gclwh12_8*r21);
IkReal x245=(gclwh14_14*r20);
IkReal x246=((0.00134)*x245);
IkReal x247=(gclwh14_8*r20);
IkReal x248=(gclwh4_14*x73);
IkReal x249=(gclwh4_8*r22);
IkReal x250=(gclwh6_12*rxp1_2);
IkReal x251=(gclwh8_12*rxp0_2);
IkReal x252=(gclwh12_14*npy*pz);
IkReal x253=((0.268)*x252);
IkReal x254=(gclwh12_14*pp*r21);
IkReal x255=((0.134)*x254);
IkReal x256=(gclwh12_8*npy*pz);
IkReal x257=(gclwh12_8*pp*r21);
IkReal x258=(gclwh14_14*npx*pz);
IkReal x259=((0.268)*x258);
IkReal x260=(gclwh14_14*pp*r20);
IkReal x261=((0.134)*x260);
IkReal x262=(gclwh14_8*npx*pz);
IkReal x263=(gclwh14_8*pp*r20);
IkReal x264=(gclwh4_14*x76);
IkReal x265=(gclwh4_14*pp*r22);
IkReal x266=((0.134)*x265);
IkReal x267=(gclwh4_8*npz*pz);
IkReal x268=(gclwh4_8*pp*r22);
IkReal x269=(gclwh10_11*rxp2_2);
IkReal x270=((0.2)*x269);
IkReal x271=(gclwh12_11*r21);
IkReal x272=((0.01)*x271);
IkReal x273=(gclwh12_3*r21);
IkReal x274=(gclwh14_11*r20);
IkReal x275=((0.01)*x274);
IkReal x276=(gclwh14_3*r20);
IkReal x277=(gclwh1_3*r20);
IkReal x278=(gclwh3_3*r21);
IkReal x279=(gclwh4_11*r22);
IkReal x280=((0.01)*x279);
IkReal x281=(gclwh4_3*r22);
IkReal x282=(gclwh6_11*rxp1_2);
IkReal x283=((0.2)*x282);
IkReal x284=(gclwh8_11*rxp0_2);
IkReal x285=((0.2)*x284);
IkReal x286=(pp*x274);
IkReal x287=(gclwh12_11*npy*pz);
IkReal x288=((2.0)*x287);
IkReal x289=(pp*x271);
IkReal x290=(gclwh12_3*npy*pz);
IkReal x291=(gclwh12_3*pp*r21);
IkReal x292=(gclwh14_11*npx*pz);
IkReal x293=((2.0)*x292);
IkReal x294=(gclwh14_3*npx*pz);
IkReal x295=(gclwh14_3*pp*r20);
IkReal x296=(gclwh1_3*npx*pz);
IkReal x297=(gclwh1_3*pp*r20);
IkReal x298=(gclwh3_3*npy*pz);
IkReal x299=(gclwh3_3*pp*r21);
IkReal x300=(gclwh4_11*npz*pz);
IkReal x301=((2.0)*x300);
IkReal x302=(pp*x279);
IkReal x303=(gclwh4_3*npz*pz);
IkReal x304=(gclwh4_3*pp*r22);
IkReal x305=(gclwh10_2*rxp2_2);
IkReal x306=(gclwh12_2*r21);
IkReal x307=(gclwh14_2*pz);
IkReal x308=(gclwh1_2*pz);
IkReal x309=(gclwh3_2*r21);
IkReal x310=(gclwh4_2*r22);
IkReal x311=((0.2)*npz*pz);
IkReal x312=(gclwh6_2*rxp1_2);
IkReal x313=(gclwh8_2*rxp0_2);
IkReal x314=pp*pp;
IkReal x315=((2.0)*pp);
IkReal x316=((1.0)*pp*r20);
IkReal x317=((1.0)*x314);
IkReal x318=((((-1.0)*x125*x310))+((x294*x315))+x127+(((-0.001)*x247))+(((-1.0)*x127*x313))+((x277*x314))+(((-1.0)*x303*x315))+((x136*x307))+(((-1.0)*x127*x305))+((x127*x312))+((x133*x307))+(((-1.0)*x137*x310))+(((-1.0)*x125*x306))+(((-1.0)*x296*x315))+(((0.001)*x249))+((x273*x314))+(((0.1)*x268))+((gclwh14_8*npx*x127))+((x133*x308))+(((-1.0)*gclwh14_2*x141))+(((-1.0)*x308*x316))+((gclwh12_2*x140))+(((0.1)*x257))+((x281*x314))+((x125*x309))+(((-1.0)*x137*x309))+(((-1.0)*x298*x315))+(((-1.0)*gclwh12_8*npy*x127))+((gclwh4_2*x139))+((gclwh1_2*x141))+(((-1.0)*x276*x317))+((x278*x314))+(((-1.0)*x137*x306))+(((0.001)*x244))+(((-0.1)*x263))+((gclwh3_2*x140))+(((-1.0)*x290*x315))+(((-1.0)*gclwh4_8*x311)));
IkReal x319=((0.4)*x269);
IkReal x320=((0.02)*x271);
IkReal x321=((0.02)*x274);
IkReal x322=((0.02)*x279);
IkReal x323=((0.4)*x282);
IkReal x324=((0.4)*x284);
IkReal x325=((4.0)*x287);
IkReal x326=((2.0)*x289);
IkReal x327=((4.0)*x292);
IkReal x328=((2.0)*x286);
IkReal x329=((4.0)*x300);
IkReal x330=((2.0)*x302);
IkReal x331=((((-1.0)*x326))+(((-1.0)*x322))+(((-1.0)*x319))+(((-1.0)*x324))+x329+x328+x325+x323+x321+(((-1.0)*x327))+(((-1.0)*x330))+(((-1.0)*x320)));
IkReal x332=(gclwh4_14*r22);
IkReal x333=(gclwh4_14*npz*pz);
IkReal x334=((((-0.00268)*x242))+(((0.536)*x252))+(((-0.268)*x254))+(((-0.268)*x265))+(((-0.00268)*x332))+(((0.00268)*x245))+(((-0.536)*x258))+(((0.268)*x260))+(((0.536)*x333)));
IkReal x335=(gclwh12_2*npy*pz);
IkReal x336=(gclwh4_2*npz*pz);
IkReal x337=(gclwh0_1*r20);
IkReal x338=(gclwh11_10*rxp2_2);
IkReal x339=((0.2)*x338);
IkReal x340=(gclwh13_1*r21);
IkReal x341=(gclwh13_10*r21);
IkReal x342=((0.01)*x341);
IkReal x343=(gclwh15_1*r20);
IkReal x344=(gclwh15_10*r20);
IkReal x345=((0.01)*x344);
IkReal x346=(gclwh2_1*r21);
IkReal x347=(gclwh5_1*r22);
IkReal x348=(gclwh5_10*r22);
IkReal x349=((0.01)*x348);
IkReal x350=(gclwh7_10*rxp1_2);
IkReal x351=((0.2)*x350);
IkReal x352=(gclwh9_10*rxp0_2);
IkReal x353=((0.2)*x352);
IkReal x354=(pp*x344);
IkReal x355=(gclwh0_1*npx*pz);
IkReal x356=(gclwh0_1*pp*r20);
IkReal x357=(gclwh13_1*npy*pz);
IkReal x358=(gclwh13_1*pp*r21);
IkReal x359=(gclwh13_10*npy*pz);
IkReal x360=((2.0)*x359);
IkReal x361=(pp*x341);
IkReal x362=(gclwh15_1*npx*pz);
IkReal x363=(gclwh15_1*pp*r20);
IkReal x364=(gclwh15_10*npx*pz);
IkReal x365=((2.0)*x364);
IkReal x366=(gclwh2_1*npy*pz);
IkReal x367=(gclwh2_1*pp*r21);
IkReal x368=(gclwh5_1*npz*pz);
IkReal x369=(gclwh5_1*pp*r22);
IkReal x370=(gclwh5_10*npz*pz);
IkReal x371=((2.0)*x370);
IkReal x372=(pp*x348);
IkReal x373=(gclwh13_9*r21);
IkReal x374=(gclwh15_9*r20);
IkReal x375=(gclwh5_9*r22);
IkReal x376=(gclwh0_0*pz);
IkReal x377=(gclwh13_0*r21);
IkReal x378=(gclwh13_9*pp*r21);
IkReal x379=(gclwh15_0*pz);
IkReal x380=(gclwh15_9*pp*r20);
IkReal x381=(gclwh2_0*r21);
IkReal x382=(gclwh5_0*r22);
IkReal x383=(gclwh5_9*pp*r22);
IkReal x384=(gclwh7_0*rxp1_2);
IkReal x385=(gclwh9_0*rxp0_2);
IkReal x386=(pp*pz);
IkReal x387=(((x125*x377))+(((-1.0)*gclwh5_0*x139))+(((0.1)*x380))+x127+((x315*x368))+(((-0.1)*x378))+((x133*x376))+((x314*x346))+((gclwh15_0*x141))+(((-1.0)*x315*x355))+((gclwh5_9*x311))+((x125*x382))+(((-1.0)*x315*x366))+((x314*x337))+((gclwh2_0*x140))+(((-1.0)*gclwh13_0*x140))+(((-1.0)*x317*x340))+((gclwh0_0*x141))+((gclwh11_0*rxp2_2*x127))+(((-0.001)*x375))+(((-1.0)*x317*x347))+(((-1.0)*x316*x376))+(((-0.1)*x383))+(((-1.0)*x316*x379))+((x125*x381))+((x127*x385))+(((0.001)*x374))+((x382*x386))+((x315*x357))+((x377*x386))+((gclwh13_9*npy*x127))+(((-1.0)*x133*x379))+(((-1.0)*gclwh15_9*npx*x127))+(((-1.0)*x127*x384))+(((-0.001)*x373))+(((-1.0)*x137*x381))+((x314*x343))+(((-1.0)*x315*x362)));
IkReal x388=((((-1.0)*gclwh11_7*x90))+(((-1.0)*gclwh9_7*x239))+((gclwh7_7*x238)));
IkReal x389=(gclwh11_13*rxp2_2);
IkReal x390=(gclwh13_15*r21);
IkReal x391=((0.00134)*x390);
IkReal x392=(gclwh15_15*r20);
IkReal x393=((0.00134)*x392);
IkReal x394=(gclwh5_15*x73);
IkReal x395=(gclwh7_13*rxp1_2);
IkReal x396=(gclwh9_13*rxp0_2);
IkReal x397=(gclwh13_15*npy*pz);
IkReal x398=((0.268)*x397);
IkReal x399=(gclwh13_15*pp*r21);
IkReal x400=((0.134)*x399);
IkReal x401=(gclwh13_9*npy*pz);
IkReal x402=(gclwh15_15*npx*pz);
IkReal x403=((0.268)*x402);
IkReal x404=(gclwh15_15*pp*r20);
IkReal x405=((0.134)*x404);
IkReal x406=(gclwh15_9*npx*pz);
IkReal x407=(gclwh5_15*x76);
IkReal x408=(gclwh5_15*pp*r22);
IkReal x409=((0.134)*x408);
IkReal x410=(gclwh5_9*npz*pz);
IkReal x411=(npz*pz);
IkReal x412=((0.01634)*r21);
IkReal x413=((0.01634)*r20);
IkReal x414=((3.268)*npy*pz);
IkReal x415=((1.634)*pp);
IkReal x416=((3.268)*npx);
IkReal x417=((1.634)*pp*r20);
IkReal x418=((0.00066)*r21);
IkReal x419=((0.00066)*r20);
IkReal x420=((0.132)*npy*pz);
IkReal x421=((0.066)*pp);
IkReal x422=((0.132)*npx);
IkReal x423=((0.066)*pp*r20);
op[0]=((((-0.817)*x100))+(((0.1634)*x89))+x91+(((-0.1634)*x86))+(((-0.00817)*x83))+x85+x82+(((-1.0)*x88))+(((-0.00817)*x94))+(((1.634)*x99))+(((0.817)*x98))+(((-0.817)*x96))+(((-0.1634)*x92))+(((0.00817)*x93))+(((-1.634)*x97))+(((1.634)*x95)));
op[1]=((((0.135089)*x108))+x102+x107+(((-1.0)*x110))+x121+(((-0.135089)*x111))+(((-1.0)*x113))+x142+(((-1.0)*x122))+(((-1.0)*x104))+(((-1.0)*x124))+(((-0.135089)*x105))+(((-1.0)*x119))+x115+x117+x116);
op[2]=((-0.210112)+x155);
op[3]=((((-0.17)*x89))+(((-1.568)*x164))+(((-0.1568)*x128))+(((-1.0)*x132*x165))+(((0.00784)*x126))+(((0.17)*x86))+(((0.1568)*x130))+((x126*x165))+(((-1.0)*gclwh6_2*x162))+((gclwh8_2*x168))+(((0.17)*x92))+(((-1.0)*gclwh4_2*x161))+((gclwh8_2*x163))+x160+(((-1.0)*x134*x167))+((gclwh6_2*x166)));
op[4]=((((-0.033)*x100))+(((-0.00033)*x83))+(((0.0066)*x92))+(((0.066)*x95))+(((-0.0066)*x89))+(((0.0066)*x86))+(((0.00033)*x93))+x88+x82+(((-1.0)*x91))+(((-0.066)*x97))+(((-1.0)*x85))+(((-0.00033)*x94))+(((0.066)*x99))+(((-0.033)*x96))+(((0.033)*x98)));
op[5]=(x104+(((-1.0)*x117))+x124+x122+(((-0.001809)*x111))+(((-1.0)*x116))+(((-1.0)*x121))+x142+(((-0.001809)*x105))+(((-1.0)*x115))+(((-1.0)*x107))+(((0.001809)*x108))+(((-1.0)*x102))+x119+x113+x110);
op[6]=((((-1.0)*x170))+(((-0.135089)*x171))+(((-1.0)*x192))+(((-1.0)*x189))+(((-1.0)*x176))+(((-0.135089)*x177))+(((-1.0)*x183))+(((-1.0)*x187))+x173+x179+x203+(((0.135089)*x174))+x191+x181+x184+x186);
op[7]=((((-0.00817)*x212))+(((1.634)*x213))+(((1.634)*x217))+(((-0.817)*x218))+(((-0.1634)*x193))+(((0.00817)*x211))+(((-1.0)*x209))+(((-0.817)*x214))+(((0.1634)*x194))+x210+(((0.817)*x216))+x204+x207+(((-0.00817)*x205))+(((-0.1634)*x195))+(((-1.634)*x215)));
op[8]=((((0.17)*x194))+((gclwh9_0*x168))+(((-1.0)*gclwh5_0*x161))+(((-1.0)*x167*x201))+(((-1.568)*x224))+(((-1.0)*x165*x200))+((x165*x196))+(((-0.17)*x193))+(((-0.17)*x195))+(((0.00784)*x196))+((gclwh9_0*x163))+(((0.1568)*x198))+(((-0.1568)*x197))+(((-1.0)*gclwh7_0*x162))+x223+((gclwh7_0*x166)));
op[9]=((-0.210112)+x237);
op[10]=((((-0.001809)*x177))+(((-1.0)*x186))+(((-1.0)*x191))+(((-1.0)*x184))+(((-1.0)*x179))+(((-1.0)*x173))+(((0.001809)*x174))+(((-0.001809)*x171))+x170+x176+x203+x192+(((-1.0)*x181))+x189+x183+x187);
op[11]=((((0.066)*x213))+(((-1.0)*x207))+(((-0.066)*x215))+(((0.0066)*x193))+(((-0.033)*x218))+(((0.066)*x217))+(((0.0066)*x195))+(((-1.0)*x210))+x209+x204+(((0.033)*x216))+(((-0.00033)*x212))+(((-0.00033)*x205))+(((0.00033)*x211))+(((-0.0066)*x194))+(((-0.033)*x214)));
op[12]=((((0.00817)*x247))+(((-1.0)*x261))+(((0.817)*x263))+(((-0.00817)*x249))+(((0.1634)*x241))+(((-1.0)*x253))+x266+(((0.1634)*x251))+x248+x243+x240+(((1.634)*x267))+(((-0.00817)*x244))+x255+x259+(((-0.1634)*x250))+(((-1.0)*x264))+(((-1.634)*x262))+(((-1.0)*x246))+(((1.634)*x256))+(((-0.817)*x268))+(((-0.817)*x257)));
op[13]=((-0.685445)+(((0.00675445)*x276))+(((-0.685445)*x299))+x301+(((0.00675445)*x277))+(((-0.665445)*x304))+(((1.35089)*x298))+(((-0.00675445)*x281))+(((0.00675445)*x278))+(((0.665445)*x295))+(((-0.685445)*x297))+(((1.35089)*x296))+(((-1.35089)*x294))+(((-1.0)*x302))+(((-1.0)*x280))+x275+(((1.35089)*x290))+(((-1.0)*x270))+x318+(((-1.0)*x293))+(((-0.00675445)*x273))+(((-1.0)*x289))+(((-1.0)*x272))+x288+x286+x283+(((1.35089)*x303))+(((-0.665445)*x291))+(((-1.0)*x285)));
op[14]=((-0.089834)+x331);
op[15]=((((-0.1568)*x305))+(((-1.7)*x256))+(((0.0085)*x249))+((x167*x308))+((gclwh1_2*x163))+((gclwh3_2*x166))+(((-1.0)*x165*x309))+(((0.0085)*x244))+((gclwh14_2*x168))+(((1.568)*x336))+(((-0.00784)*x310))+(((-0.85)*x263))+(((0.85)*x257))+x334+(((-1.0)*gclwh1_2*x168))+(((1.568)*x335))+(((1.7)*x262))+((gclwh14_2*x163))+(((-1.0)*x165*x310))+(((-0.00784)*x306))+((gclwh3_2*x162))+(((-0.0085)*x247))+(((-1.0)*x167*x307))+(((-1.0)*x165*x306))+(((0.1568)*x312))+(((-1.7)*x267))+(((-0.1568)*x313))+(((0.85)*x268)));
op[16]=((((-0.066)*x256))+(((-1.0)*x259))+(((0.0066)*x251))+(((0.0066)*x241))+(((-1.0)*x248))+(((0.00033)*x244))+x264+x261+(((0.066)*x262))+(((0.00033)*x249))+(((-1.0)*x255))+(((-0.0066)*x250))+x246+x240+(((-0.033)*x263))+(((-1.0)*x266))+(((-1.0)*x243))+x253+(((0.033)*x257))+(((-0.066)*x267))+(((-0.00033)*x247))+(((0.033)*x268)));
op[17]=((0.019045)+(((-1.0)*x283))+(((-1.0)*x286))+(((-0.019045)*x299))+x293+x302+(((0.000955)*x291))+(((-0.01809)*x294))+(((-9.045e-5)*x273))+(((-1.0)*x275))+(((-0.019045)*x297))+(((0.01809)*x290))+(((0.01809)*x298))+(((-0.000955)*x295))+x272+x270+(((0.01809)*x303))+(((0.01809)*x296))+(((0.000955)*x304))+x318+(((-1.0)*x301))+(((9.045e-5)*x277))+(((-9.045e-5)*x281))+(((-1.0)*x288))+(((9.045e-5)*x278))+(((9.045e-5)*x276))+x289+x285+x280);
op[18]=((0.685445)+(((0.00675445)*x347))+(((1.35089)*x366))+(((0.665445)*x369))+(((1.35089)*x355))+(((-1.0)*x349))+(((0.665445)*x358))+(((-0.665445)*x363))+(((0.00675445)*x340))+(((-1.0)*x361))+(((-1.35089)*x368))+(((1.35089)*x362))+(((0.00675445)*x337))+(((-0.685445)*x356))+(((-1.0)*x342))+x351+x354+(((-1.35089)*x357))+(((-0.685445)*x367))+x387+(((-1.0)*x353))+(((-1.0)*x372))+x360+(((-0.00675445)*x343))+x345+(((-1.0)*x339))+x371+(((0.00675445)*x346))+(((-1.0)*x365)));
op[19]=(x398+x393+(((-1.0)*x403))+(((-0.00817)*x374))+(((0.00817)*x373))+(((1.634)*x406))+(((0.1634)*x395))+(((-1.634)*x410))+(((0.817)*x383))+(((-1.0)*x400))+(((-1.0)*x409))+(((-1.0)*x394))+(((-0.1634)*x389))+(((-0.817)*x380))+x407+x405+x388+(((-0.1634)*x396))+(((-1.634)*x401))+(((-1.0)*x391))+(((0.817)*x378))+(((0.00817)*x375)));
op[20]=((((0.00268)*x392))+(((0.0085)*x373))+(((-0.00268)*gclwh5_15*r22))+((gclwh2_0*x166))+(((0.85)*x383))+(((-1.0)*gclwh15_0*x168))+(((-0.85)*x380))+(((0.268)*x404))+(((0.0085)*x375))+(((-1.0)*gclwh13_0*x166))+(((1.7)*x406))+(((-0.268)*x408))+(((0.536)*gclwh5_15*x411))+(((-1.0)*gclwh15_0*x163))+(((0.85)*x378))+(((0.1568)*x385))+(((-0.268)*x399))+(((-1.7)*x401))+(((-1.0)*x165*x381))+((gclwh2_0*x162))+(((-0.1568)*x384))+((gclwh13_0*x162))+((gclwh11_0*x161))+(((-1.568)*gclwh5_0*x411))+((x165*x382))+((x167*x379))+(((-0.0085)*x374))+(((-0.536)*x402))+(((-1.7)*x410))+((gclwh0_0*x163))+(((0.00784)*x382))+(((0.536)*x397))+(((-0.00268)*x390))+(((-1.0)*gclwh0_0*x168))+((x167*x376))+((x165*x377)));
op[21]=((-0.089834)+(((0.02)*x348))+(((2.0)*x361))+(((-4.0)*x359))+(((0.4)*x352))+(((2.0)*x372))+(((0.02)*x341))+(((-0.02)*x344))+(((-2.0)*x354))+(((0.4)*x338))+(((4.0)*x364))+(((-0.4)*x350))+(((-4.0)*x370)));
op[22]=((-0.019045)+(((-0.000955)*x369))+(((-1.0)*x351))+(((9.045e-5)*x337))+(((9.045e-5)*x340))+(((-1.0)*x371))+(((9.045e-5)*x347))+x353+(((-9.045e-5)*x343))+(((9.045e-5)*x346))+x339+x387+(((-0.019045)*x356))+(((0.01809)*x355))+(((-0.000955)*x358))+x361+x365+(((-0.01809)*x357))+(((0.01809)*x362))+(((-1.0)*x354))+x349+x342+(((-0.019045)*x367))+(((-1.0)*x345))+x372+(((0.01809)*x366))+(((-0.01809)*x368))+(((-1.0)*x360))+(((0.000955)*x363)));
op[23]=(x394+x391+(((-0.00033)*x375))+(((0.00033)*x374))+(((-1.0)*x407))+(((-0.033)*x378))+(((-0.00033)*x373))+(((-0.0066)*x396))+(((0.066)*x410))+(((-0.0066)*x389))+x409+x403+x400+x388+(((0.033)*x380))+(((-0.066)*x406))+(((-1.0)*x405))+(((0.066)*x401))+(((-0.033)*x383))+(((0.0066)*x395))+(((-1.0)*x398))+(((-1.0)*x393)));
op[24]=((-0.437912)+x155);
op[25]=((((-1.0)*x132*x415))+(((1.634)*x135))+(((-0.3268)*x131))+(((0.01634)*x126))+(((-0.3268)*x128))+(((-1.0)*gclwh6_2*x412))+((gclwh6_2*x414))+((gclwh8_2*x417))+x160+(((-3.268)*x164))+(((0.3268)*x130))+(((-1.0)*x134*x416))+((gclwh8_2*x413)));
op[26]=((((-3.136)*x99))+(((1.568)*x96))+(((-0.1072)*x158))+(((-1.568)*x98))+(((-0.1072)*x84))+(((0.01568)*x94))+(((-0.01568)*x93))+(((3.136)*x97))+(((1.568)*x100))+(((0.01568)*x83))+(((0.1072)*x87))+(((-3.136)*x95)));
op[27]=((((0.8)*x109))+(((4.0)*x122))+(((0.04)*x112))+(((-0.8)*x106))+(((-4.0)*x117))+(((-0.04)*x114))+(((8.0)*x123))+(((8.0)*x118))+(((0.8)*x103))+(((-4.0)*x116))+(((-8.0)*x120))+(((-0.04)*x101)));
op[28]=((-0.017688)+(((-1.0)*x154))+x152+x153+(((-1.0)*x151))+(((-1.0)*x148))+(((-1.0)*x150))+x149+x147+x146+x144+(((-1.0)*x145))+(((-1.0)*x143)));
op[29]=((((-1.0)*x134*x422))+((gclwh8_2*x419))+(((-1.0)*x132*x421))+(((-0.132)*x164))+(((0.0132)*x130))+x159+x156+(((-1.0)*gclwh6_2*x418))+((gclwh6_2*x420))+(((0.066)*x135))+(((0.00066)*x126))+(((-1.0)*x157))+(((-0.0132)*x131))+((gclwh8_2*x423))+(((-0.0132)*x128)));
op[30]=((((-0.3268)*x197))+((gclwh9_0*x413))+(((-3.268)*x224))+(((-1.0)*x201*x416))+((gclwh9_0*x417))+(((0.3268)*x198))+(((-1.0)*gclwh7_0*x412))+(((-0.3268)*x199))+(((0.01634)*x196))+(((-1.0)*x200*x415))+x223+((gclwh7_0*x414))+(((1.634)*x202)));
op[31]=((-0.437912)+x237);
op[32]=((((-8.0)*x185))+(((-0.8)*x172))+(((0.04)*x169))+(((4.0)*x192))+(((-0.04)*x180))+(((-8.0)*x190))+(((4.0)*x187))+(((-0.8)*x178))+(((0.04)*x182))+(((8.0)*x188))+(((0.8)*x175))+(((-4.0)*x184)));
op[33]=((((1.568)*x214))+(((0.01568)*x212))+(((0.01568)*x205))+(((-1.568)*x216))+(((-3.136)*x217))+(((1.568)*x218))+(((-0.01568)*x211))+(((0.1072)*x208))+(((-0.1072)*x221))+(((-3.136)*x213))+(((3.136)*x215))+(((-0.1072)*x206)));
op[34]=(((gclwh9_0*x423))+(((-1.0)*gclwh7_0*x418))+(((-0.132)*x224))+((gclwh7_0*x420))+(((-1.0)*x219))+(((0.066)*x202))+(((-0.0132)*x197))+(((0.0132)*x198))+(((-0.0132)*x199))+(((-1.0)*x200*x421))+(((0.00066)*x196))+((gclwh9_0*x419))+(((-1.0)*x201*x422))+x220+(((-1.0)*x222)));
op[35]=((-0.017688)+(((-1.0)*x233))+(((-1.0)*x230))+(((-1.0)*x232))+(((-1.0)*x225))+(((-1.0)*x227))+x226+x229+x228+(((-1.0)*x236))+x231+x234+x235);
op[36]=((1.299066)+x331);
op[37]=((((-1.0)*x310*x415))+(((3.268)*x335))+(((-0.3268)*x313))+((gclwh14_2*x413))+(((3.268)*x336))+(((0.3268)*x312))+(((-0.01634)*x310))+(((-0.01634)*x306))+((gclwh14_2*x417))+x334+(((-1.0)*gclwh1_2*x417))+((gclwh1_2*x413))+((gclwh3_2*x414))+(((-1.0)*x306*x415))+((gclwh3_2*x412))+((x308*x416))+(((-0.3268)*x305))+(((-1.0)*x307*x416))+(((-1.0)*x309*x415)));
op[38]=((((0.3136)*x250))+(((-1.072)*x258))+(((1.072)*x333))+(((0.536)*x260))+(((-0.3136)*x241))+(((1.072)*x252))+(((-0.00536)*x332))+(((-0.536)*x265))+(((-0.536)*x254))+(((-0.3136)*x251))+(((-0.00536)*x242))+(((0.00536)*x245)));
op[39]=((-0.03602)+(((-4.0)*x286))+(((0.8)*x269))+(((0.04)*x279))+(((-0.8)*x282))+(((-8.0)*x300))+(((-0.04)*x274))+(((0.04)*x271))+(((4.0)*x302))+(((4.0)*x289))+(((0.8)*x284))+(((-8.0)*x287))+(((8.0)*x292)));
op[40]=((0.033734)+(((-1.0)*x323))+(((-1.0)*x329))+(((-1.0)*x328))+(((-1.0)*x325))+x330+x326+x327+x324+x322+x320+x319+(((-1.0)*x321)));
IkReal x424=(gclwh12_14*r21);
IkReal x425=(gclwh14_14*r20);
IkReal x426=((0.00268)*r22);
IkReal x427=(gclwh12_14*npy*pz);
IkReal x428=(gclwh12_14*pp*r21);
IkReal x429=(gclwh14_14*npx*pz);
IkReal x430=(gclwh14_14*pp*r20);
IkReal x431=((0.536)*npz*pz);
IkReal x432=((0.268)*pp);
IkReal x433=((((-0.00268)*x425))+(((0.00268)*x424))+(((0.268)*x428))+((gclwh4_14*x426))+(((-0.268)*x430))+(((0.536)*x429))+(((-1.0)*gclwh4_14*x431))+((gclwh4_14*r22*x432))+(((-0.536)*x427)));
IkReal x434=(gclwh10_2*rxp2_2);
IkReal x435=(gclwh12_2*r21);
IkReal x436=(gclwh14_2*r20);
IkReal x437=(gclwh1_2*r20);
IkReal x438=(gclwh3_2*r21);
IkReal x439=((0.00066)*r22);
IkReal x440=((0.0132)*rxp1_2);
IkReal x441=((0.0132)*rxp0_2);
IkReal x442=(gclwh12_2*npy*pz);
IkReal x443=((0.066)*pp);
IkReal x444=(gclwh14_2*npx*pz);
IkReal x445=(gclwh1_2*npx*pz);
IkReal x446=(gclwh3_2*npy*pz);
IkReal x447=((0.132)*npz*pz);
IkReal x448=(gclwh4_2*r22);
IkReal x449=(gclwh0_0*r20);
IkReal x450=(gclwh11_0*rxp2_2);
IkReal x451=(gclwh13_0*r21);
IkReal x452=(gclwh13_15*r21);
IkReal x453=((0.00268)*x452);
IkReal x454=(gclwh15_0*r20);
IkReal x455=(gclwh15_15*r20);
IkReal x456=((0.00268)*x455);
IkReal x457=(gclwh2_0*r21);
IkReal x458=(gclwh5_0*r22);
IkReal x459=(gclwh5_15*x426);
IkReal x460=(gclwh7_0*rxp1_2);
IkReal x461=(gclwh9_0*rxp0_2);
IkReal x462=(gclwh0_0*npx*pz);
IkReal x463=(gclwh0_0*pp*r20);
IkReal x464=(gclwh13_0*npy*pz);
IkReal x465=((1.634)*pp);
IkReal x466=(gclwh13_15*npy*pz);
IkReal x467=((0.536)*x466);
IkReal x468=(gclwh13_15*pp*r21);
IkReal x469=((0.268)*x468);
IkReal x470=(gclwh15_0*npx*pz);
IkReal x471=(gclwh15_15*npx*pz);
IkReal x472=((0.536)*x471);
IkReal x473=(gclwh15_15*pp*r20);
IkReal x474=((0.268)*x473);
IkReal x475=(gclwh2_0*npy*pz);
IkReal x476=(npz*pz);
IkReal x477=(gclwh5_15*x431);
IkReal x478=(gclwh5_15*r22);
IkReal x479=(x432*x478);
IkReal x480=(gclwh11_10*rxp2_2);
IkReal x481=((0.4)*x480);
IkReal x482=(gclwh13_10*r21);
IkReal x483=((0.02)*x482);
IkReal x484=(gclwh15_10*r20);
IkReal x485=((0.02)*x484);
IkReal x486=(gclwh5_10*r22);
IkReal x487=((0.02)*x486);
IkReal x488=(gclwh7_10*rxp1_2);
IkReal x489=((0.4)*x488);
IkReal x490=(gclwh9_10*rxp0_2);
IkReal x491=((0.4)*x490);
IkReal x492=(gclwh13_10*npy*pz);
IkReal x493=((4.0)*x492);
IkReal x494=(pp*x482);
IkReal x495=((2.0)*x494);
IkReal x496=(gclwh15_10*npx*pz);
IkReal x497=((4.0)*x496);
IkReal x498=(pp*x484);
IkReal x499=((2.0)*x498);
IkReal x500=(gclwh5_10*npz*pz);
IkReal x501=((4.0)*x500);
IkReal x502=(pp*x486);
IkReal x503=((2.0)*x502);
IkReal x504=(gclwh11_13*rxp2_2);
IkReal x505=(gclwh7_13*rxp1_2);
IkReal x506=(gclwh9_13*rxp0_2);
IkReal x507=(gclwh5_15*pp*r22);
IkReal x508=(x479+x472+(((-1.0)*x477))+x453+x459+(((-1.0)*x456))+(((-1.0)*x467))+(((-1.0)*x474))+x469);
IkReal x509=((((-1.0)*x491))+(((-1.0)*x503))+(((-1.0)*x483))+(((-1.0)*x497))+x501+(((-1.0)*x481))+(((-1.0)*x487))+(((-1.0)*x495))+x489+x485+x499+x493);
IkReal x510=((0.00134)*r22);
IkReal x511=((0.00134)*r21);
IkReal x512=((0.00134)*r20);
IkReal x513=((0.268)*npz*pz);
IkReal x514=((0.134)*pp*r22);
IkReal x515=((0.268)*npy*pz);
IkReal x516=((0.134)*pp*r21);
IkReal x517=((0.268)*npx*pz);
IkReal x518=((0.134)*pp*r20);
IkReal x519=x82;
IkReal x520=(gclwh10_12*r22);
IkReal x521=(gclwh12_14*rxp1_2);
IkReal x522=((0.0268)*x521);
IkReal x523=(gclwh12_8*rxp1_2);
IkReal x524=(gclwh14_14*rxp0_2);
IkReal x525=((0.0268)*x524);
IkReal x526=(gclwh14_8*rxp0_2);
IkReal x527=((0.0268)*rxp2_2);
IkReal x528=(gclwh4_14*x527);
IkReal x529=(gclwh4_8*rxp2_2);
IkReal x530=(gclwh6_12*r21);
IkReal x531=(gclwh8_12*r20);
IkReal x532=(gclwh10_12*npz*pz);
IkReal x533=(gclwh10_12*pp*r22);
IkReal x534=(gclwh6_12*npy*pz);
IkReal x535=(gclwh6_12*pp*r21);
IkReal x536=(gclwh8_12*npx*pz);
IkReal x537=(gclwh8_12*pp*r20);
IkReal x538=(gclwh10_11*r22);
IkReal x539=((0.01)*x538);
IkReal x540=(gclwh12_11*rxp1_2);
IkReal x541=((0.2)*x540);
IkReal x542=(gclwh12_3*rxp1_2);
IkReal x543=(gclwh14_11*rxp0_2);
IkReal x544=((0.2)*x543);
IkReal x545=(gclwh14_3*rxp0_2);
IkReal x546=(gclwh4_11*rxp2_2);
IkReal x547=((0.2)*x546);
IkReal x548=(gclwh4_3*rxp2_2);
IkReal x549=(gclwh6_11*r21);
IkReal x550=((0.01)*x549);
IkReal x551=(gclwh8_11*r20);
IkReal x552=((0.01)*x551);
IkReal x553=(pp*x549);
IkReal x554=(gclwh10_11*npz*pz);
IkReal x555=((2.0)*x554);
IkReal x556=(pp*x538);
IkReal x557=(gclwh6_11*npy*pz);
IkReal x558=((2.0)*x557);
IkReal x559=(gclwh8_11*npx*pz);
IkReal x560=((2.0)*x559);
IkReal x561=(pp*x551);
IkReal x562=((0.01)*pz);
IkReal x563=(gclwh10_2*r22);
IkReal x564=((0.2)*pz*rxp1_2);
IkReal x565=((0.2)*pp);
IkReal x566=((0.2)*pz*rxp0_2);
IkReal x567=((0.2)*pz*rxp2_2);
IkReal x568=(gclwh6_2*r21);
IkReal x569=(gclwh8_2*r20);
IkReal x570=(pp*pz);
IkReal x571=((1.0)*pp*pz);
IkReal x572=pz*pz;
IkReal x573=((2.0)*npz*x572);
IkReal x574=((2.0)*npy*x572);
IkReal x575=((2.0)*npx*x572);
IkReal x576=(((x548*x565))+(((0.02)*x529))+(((-1.0)*gclwh8_2*x575))+((x562*x563))+((x542*x565))+(((-1.0)*x545*x565))+(((0.02)*x523))+((gclwh6_2*x574))+((x563*x570))+(((-1.0)*gclwh4_2*x567))+(((-1.0)*x562*x568))+(((-1.0)*gclwh12_2*x564))+(((-0.02)*x526))+((x569*x570))+(((-1.0)*x568*x571))+((gclwh14_2*x566))+((x562*x569))+(((-1.0)*gclwh10_2*x573)));
IkReal x577=((0.00784)*r22);
IkReal x578=((0.1568)*rxp1_2);
IkReal x579=((0.1568)*rxp0_2);
IkReal x580=((0.0536)*rxp2_2);
IkReal x581=((0.1568)*rxp2_2);
IkReal x582=((0.00784)*r21);
IkReal x583=((0.00784)*r20);
IkReal x584=((1.568)*npz*pz);
IkReal x585=((0.784)*pp);
IkReal x586=((1.568)*npy*pz);
IkReal x587=((1.568)*npx*pz);
IkReal x588=(gclwh11_10*r22);
IkReal x589=((0.01)*x588);
IkReal x590=(gclwh13_1*rxp1_2);
IkReal x591=(gclwh13_10*rxp1_2);
IkReal x592=((0.2)*x591);
IkReal x593=(gclwh15_1*rxp0_2);
IkReal x594=(gclwh15_10*rxp0_2);
IkReal x595=((0.2)*x594);
IkReal x596=(gclwh5_1*rxp2_2);
IkReal x597=(gclwh5_10*rxp2_2);
IkReal x598=((0.2)*x597);
IkReal x599=(gclwh7_10*r21);
IkReal x600=((0.01)*x599);
IkReal x601=(gclwh9_10*r20);
IkReal x602=((0.01)*x601);
IkReal x603=(pp*x588);
IkReal x604=(pp*x601);
IkReal x605=(gclwh11_10*npz*pz);
IkReal x606=((2.0)*x605);
IkReal x607=(gclwh7_10*npy*pz);
IkReal x608=((2.0)*x607);
IkReal x609=(pp*x599);
IkReal x610=(gclwh9_10*npx*pz);
IkReal x611=((2.0)*x610);
IkReal x612=(gclwh13_9*rxp1_2);
IkReal x613=(gclwh15_9*rxp0_2);
IkReal x614=(gclwh5_9*rxp2_2);
IkReal x615=(gclwh11_0*r22);
IkReal x616=(gclwh7_0*r21);
IkReal x617=(gclwh9_0*r20);
IkReal x618=(((gclwh15_0*x566))+((x570*x617))+((x565*x596))+((x570*x615))+(((-1.0)*gclwh5_0*x567))+(((-1.0)*gclwh11_0*x573))+(((-1.0)*x562*x616))+((x562*x617))+(((-1.0)*x571*x616))+(((-0.02)*x613))+(((0.02)*x612))+(((-1.0)*x565*x593))+((x562*x615))+((x565*x590))+(((-1.0)*gclwh13_0*x564))+(((0.02)*x614))+(((-1.0)*gclwh9_0*x575))+((gclwh7_0*x574)));
IkReal x619=x204;
IkReal x620=(gclwh11_13*r22);
IkReal x621=(gclwh13_15*rxp1_2);
IkReal x622=((0.0268)*x621);
IkReal x623=(gclwh15_15*rxp0_2);
IkReal x624=((0.0268)*x623);
IkReal x625=(gclwh5_15*x527);
IkReal x626=(gclwh7_13*r21);
IkReal x627=(gclwh9_13*r20);
IkReal x628=(gclwh11_13*npz*pz);
IkReal x629=(gclwh11_13*pp*r22);
IkReal x630=(gclwh7_13*npy*pz);
IkReal x631=(gclwh7_13*pp*r21);
IkReal x632=(gclwh9_13*npx*pz);
IkReal x633=(gclwh9_13*pp*r20);
IkReal x634=((0.0268)*rxp1_2);
IkReal x635=((0.0268)*rxp0_2);
IkReal x636=x240;
IkReal x637=(gclwh10_12*rxp2_2);
IkReal x638=((0.00134)*x424);
IkReal x639=(gclwh12_8*r21);
IkReal x640=((0.00134)*x425);
IkReal x641=(gclwh14_8*r20);
IkReal x642=(gclwh4_14*x510);
IkReal x643=(gclwh4_8*r22);
IkReal x644=(gclwh6_12*rxp1_2);
IkReal x645=(gclwh8_12*rxp0_2);
IkReal x646=((0.268)*x427);
IkReal x647=((0.134)*x428);
IkReal x648=(gclwh12_8*npy*pz);
IkReal x649=(gclwh12_8*pp*r21);
IkReal x650=((0.268)*x429);
IkReal x651=((0.134)*x430);
IkReal x652=(gclwh14_8*npx*pz);
IkReal x653=(gclwh14_8*pp*r20);
IkReal x654=(gclwh4_14*x513);
IkReal x655=(gclwh4_14*x514);
IkReal x656=(gclwh4_8*npz*pz);
IkReal x657=(gclwh4_8*pp*r22);
IkReal x658=(gclwh10_11*rxp2_2);
IkReal x659=((0.2)*x658);
IkReal x660=(gclwh12_11*r21);
IkReal x661=((0.01)*x660);
IkReal x662=(gclwh12_3*r21);
IkReal x663=(gclwh14_11*r20);
IkReal x664=((0.01)*x663);
IkReal x665=(gclwh14_3*r20);
IkReal x666=(gclwh1_3*r20);
IkReal x667=(gclwh3_3*r21);
IkReal x668=(gclwh4_11*r22);
IkReal x669=((0.01)*x668);
IkReal x670=(gclwh4_3*r22);
IkReal x671=(gclwh6_11*rxp1_2);
IkReal x672=((0.2)*x671);
IkReal x673=(gclwh8_11*rxp0_2);
IkReal x674=((0.2)*x673);
IkReal x675=(pp*x660);
IkReal x676=(pp*x668);
IkReal x677=(gclwh12_11*npy*pz);
IkReal x678=((2.0)*x677);
IkReal x679=(gclwh12_3*npy*pz);
IkReal x680=(gclwh12_3*pp*r21);
IkReal x681=(gclwh14_11*npx*pz);
IkReal x682=((2.0)*x681);
IkReal x683=(pp*x663);
IkReal x684=(gclwh14_3*npx*pz);
IkReal x685=(gclwh14_3*pp*r20);
IkReal x686=(gclwh1_3*npx*pz);
IkReal x687=(gclwh1_3*pp*r20);
IkReal x688=(gclwh3_3*npy*pz);
IkReal x689=(gclwh3_3*pp*r21);
IkReal x690=(gclwh4_11*npz*pz);
IkReal x691=((2.0)*x690);
IkReal x692=(gclwh4_3*npz*pz);
IkReal x693=(gclwh4_3*pp*r22);
IkReal x694=((0.2)*pz);
IkReal x695=((0.2)*npz*pz);
IkReal x696=pp*pp;
IkReal x697=((2.0)*pp);
IkReal x698=((1.0)*x696);
IkReal x699=((((-1.0)*x438*x571))+(((-1.0)*x435*x571))+((gclwh14_8*npx*x694))+(((-1.0)*x448*x562))+(((-1.0)*gclwh14_2*x575))+((x667*x696))+(((0.1)*x657))+((x684*x697))+((gclwh1_2*x575))+((x436*x562))+(((-1.0)*x679*x697))+((x436*x570))+(((-0.1)*x653))+(((-1.0)*x665*x698))+(((-1.0)*x692*x697))+(((-0.001)*x641))+(((-1.0)*x448*x571))+((gclwh3_2*x574))+(((0.1)*x649))+(((-1.0)*gclwh8_2*x566))+((x437*x562))+(((-1.0)*x435*x562))+x694+((gclwh6_2*x564))+((x670*x696))+(((-1.0)*gclwh12_8*npy*x694))+(((-1.0)*gclwh4_8*x695))+(((-1.0)*x437*x571))+(((-1.0)*x434*x694))+((gclwh12_2*x574))+((x666*x696))+((gclwh4_2*x573))+(((0.001)*x639))+(((0.001)*x643))+(((-1.0)*x686*x697))+((x438*x562))+((x662*x696))+(((-1.0)*x688*x697)));
IkReal x700=(gclwh0_1*r20);
IkReal x701=((0.2)*x480);
IkReal x702=(gclwh13_1*r21);
IkReal x703=((0.01)*x482);
IkReal x704=(gclwh15_1*r20);
IkReal x705=((0.01)*x484);
IkReal x706=(gclwh2_1*r21);
IkReal x707=(gclwh5_1*r22);
IkReal x708=((0.01)*x486);
IkReal x709=((0.2)*x488);
IkReal x710=((0.2)*x490);
IkReal x711=(gclwh0_1*npx*pz);
IkReal x712=(gclwh0_1*pp*r20);
IkReal x713=(gclwh13_1*npy*pz);
IkReal x714=(gclwh13_1*pp*r21);
IkReal x715=((2.0)*x492);
IkReal x716=(gclwh15_1*npx*pz);
IkReal x717=(gclwh15_1*pp*r20);
IkReal x718=((2.0)*x496);
IkReal x719=(gclwh2_1*npy*pz);
IkReal x720=(gclwh2_1*pp*r21);
IkReal x721=(gclwh5_1*npz*pz);
IkReal x722=(gclwh5_1*pp*r22);
IkReal x723=((2.0)*x500);
IkReal x724=(gclwh13_9*r21);
IkReal x725=(gclwh15_9*r20);
IkReal x726=(gclwh5_9*r22);
IkReal x727=(gclwh13_9*pp*r21);
IkReal x728=(gclwh15_9*pp*r20);
IkReal x729=(gclwh5_9*pp*r22);
IkReal x730=(((gclwh15_0*x575))+((x697*x713))+((x451*x570))+((gclwh2_0*x574))+((x696*x706))+(((-1.0)*x460*x694))+((x449*x562))+((x450*x694))+(((-0.001)*x726))+((x458*x562))+((x451*x562))+((x696*x700))+(((-1.0)*x697*x711))+((x457*x562))+(((-1.0)*x698*x707))+(((-1.0)*x454*x562))+(((0.001)*x725))+(((-1.0)*gclwh5_0*x573))+(((-1.0)*x454*x571))+(((0.1)*x728))+(((-0.1)*x727))+(((-1.0)*x457*x571))+((x696*x704))+(((-0.001)*x724))+x694+((gclwh13_9*npy*x694))+(((-1.0)*gclwh15_9*npx*x694))+(((-1.0)*x697*x716))+(((-1.0)*x698*x702))+(((-1.0)*gclwh13_0*x574))+((x461*x694))+(((-1.0)*x697*x719))+((x697*x721))+((x458*x570))+((gclwh0_0*x575))+((gclwh5_9*x695))+(((-1.0)*pz*x463))+(((-0.1)*x729)));
IkReal x731=x388;
IkReal x732=((0.00134)*x452);
IkReal x733=((0.00134)*x455);
IkReal x734=(gclwh5_15*x510);
IkReal x735=((0.268)*x466);
IkReal x736=((0.134)*x468);
IkReal x737=(gclwh13_9*npy*pz);
IkReal x738=((0.268)*x471);
IkReal x739=((0.134)*x473);
IkReal x740=(gclwh15_9*npx*pz);
IkReal x741=(gclwh5_15*x513);
IkReal x742=((0.134)*x507);
IkReal x743=(gclwh5_9*npz*pz);
op[41]=((((-1.0)*gclwh8_2*x441))+(((-1.0)*gclwh4_2*x439))+((x436*x443))+((gclwh4_2*x447))+(((0.00066)*x438))+(((0.00066)*x436))+(((-0.132)*x444))+(((0.00066)*x437))+((gclwh6_2*x440))+(((-1.0)*x443*x448))+(((-0.00066)*x435))+(((0.132)*x442))+(((-1.0)*x435*x443))+(((-0.0132)*x434))+(((0.132)*x446))+x433+(((-1.0)*x437*x443))+(((-1.0)*x438*x443))+(((0.132)*x445)));
op[42]=(x477+x474+(((0.3268)*x461))+(((-0.3268)*x460))+(((-3.268)*x464))+(((-1.0)*x479))+(((-1.0)*x469))+(((0.01634)*x458))+(((-3.268)*gclwh5_0*x476))+(((0.01634)*x457))+((x451*x465))+(((3.268)*x475))+(((-0.01634)*x454))+((x458*x465))+(((0.3268)*x450))+(((-1.0)*x453))+(((3.268)*x462))+x456+(((-1.0)*x472))+(((-1.634)*x463))+(((0.01634)*x451))+(((-1.0)*x459))+(((0.01634)*x449))+(((3.268)*x470))+(((-1.0)*x454*x465))+x467+(((-1.0)*x457*x465)));
op[43]=((1.299066)+x503+(((-1.0)*x499))+(((-1.0)*x501))+(((-1.0)*x485))+(((-1.0)*x489))+x487+x481+x483+(((-1.0)*x493))+x495+x497+x491);
op[44]=((0.03602)+(((-8.0)*x492))+(((-0.8)*x488))+(((-0.04)*x484))+(((4.0)*x494))+(((4.0)*x502))+(((0.8)*x490))+(((-4.0)*x498))+(((0.04)*x486))+(((0.8)*x480))+(((0.04)*x482))+(((8.0)*x496))+(((-8.0)*x500)));
op[45]=((((0.3136)*x506))+(((0.00536)*x478))+(((1.072)*x471))+(((0.536)*x468))+(((-1.072)*gclwh5_15*x476))+(((0.536)*x507))+(((-0.536)*x473))+(((0.3136)*x504))+(((-0.00536)*x455))+(((-1.072)*x466))+(((-0.3136)*x505))+(((0.00536)*x452)));
op[46]=(((gclwh5_0*x439))+(((-1.0)*x443*x454))+x508+(((0.132)*x462))+(((0.00066)*x451))+(((-0.00066)*x454))+(((-0.132)*x464))+(((0.00066)*x457))+((x443*x451))+((gclwh9_0*x441))+(((-1.0)*gclwh5_0*x447))+(((0.132)*x470))+(((-0.066)*x463))+(((0.00066)*x449))+(((-1.0)*gclwh7_0*x440))+((x443*x458))+(((0.132)*x475))+(((-1.0)*x443*x457))+(((0.0132)*x450)));
op[47]=((0.033734)+x509);
op[48]=((((0.00817)*x531))+(((1.634)*x534))+(((-1.0)*x522))+(((0.00817)*x520))+(((-0.817)*x535))+(((0.1634)*x526))+(((-1.634)*x532))+(((-0.1634)*x523))+(((-1.634)*x536))+x519+(((0.817)*x537))+(((-1.0)*x528))+(((-0.1634)*x529))+(((-0.00817)*x530))+x525+(((0.817)*x533)));
op[49]=((((-1.0)*x539))+(((-0.135089)*x542))+(((-0.135089)*x548))+x576+(((-1.0)*x544))+(((-1.0)*x558))+(((-1.0)*x556))+x550+x555+x553+(((-1.0)*x561))+(((-1.0)*x552))+(((0.135089)*x545))+x547+x541+x560);
op[50]=((0.210112)+(((2.0)*x553))+(((-2.0)*x561))+(((0.4)*x546))+(((4.0)*x554))+(((0.4)*x540))+(((-0.4)*x543))+(((-0.02)*x538))+(((4.0)*x559))+(((-4.0)*x557))+(((-2.0)*x556))+(((0.02)*x549))+(((-0.02)*x551)));
op[51]=(((gclwh8_2*x587))+((gclwh10_2*x584))+(((-1.0)*x563*x585))+(((-1.0)*x569*x585))+(((-1.0)*gclwh8_2*x583))+(((-0.0536)*x524))+(((-1.0)*gclwh6_2*x586))+((gclwh6_2*x582))+((gclwh4_14*x580))+((x568*x585))+(((-1.0)*gclwh14_2*x579))+(((0.0536)*x521))+(((0.17)*x529))+((gclwh4_2*x581))+((gclwh12_2*x578))+(((-1.0)*gclwh10_2*x577))+(((-0.17)*x526))+(((0.17)*x523)));
op[52]=((((0.0066)*x523))+(((-0.066)*x532))+(((-1.0)*x525))+(((-0.00033)*x530))+(((-0.0066)*x526))+(((0.033)*x533))+(((-0.033)*x535))+(((0.00033)*x531))+(((-0.066)*x536))+(((0.00033)*x520))+(((0.066)*x534))+(((0.0066)*x529))+x519+x528+x522+(((0.033)*x537)));
op[53]=(x539+(((-0.001809)*x542))+x576+(((-1.0)*x560))+x556+x558+x552+(((0.001809)*x545))+(((-1.0)*x547))+(((-1.0)*x541))+(((-1.0)*x550))+(((-1.0)*x553))+(((-1.0)*x555))+(((-0.001809)*x548))+x544+x561);
op[54]=((((-1.0)*x592))+x618+(((-1.0)*x598))+(((-1.0)*x606))+(((-1.0)*x611))+(((-1.0)*x600))+(((-0.135089)*x590))+(((0.135089)*x593))+(((-0.135089)*x596))+(((-1.0)*x609))+x589+x595+x603+x608+x602+x604);
op[55]=(x619+(((-1.0)*x622))+(((0.00817)*x620))+(((0.817)*x629))+(((0.00817)*x627))+(((-0.00817)*x626))+(((-0.1634)*x612))+x624+(((-0.817)*x631))+(((-1.634)*x632))+(((-0.1634)*x614))+(((1.634)*x630))+(((-1.0)*x625))+(((0.817)*x633))+(((0.1634)*x613))+(((-1.634)*x628)));
op[56]=(((x585*x616))+((gclwh9_0*x587))+(((-0.0536)*x621))+(((-0.17)*x614))+(((-1.0)*gclwh15_0*x579))+(((-0.17)*x612))+(((-1.0)*x585*x617))+(((-1.0)*gclwh5_15*x580))+((gclwh11_0*x584))+(((-1.0)*gclwh11_0*x577))+(((-1.0)*gclwh9_0*x583))+(((-1.0)*x585*x615))+((gclwh5_0*x581))+(((0.0536)*x623))+(((-1.0)*gclwh7_0*x586))+((gclwh7_0*x582))+(((0.17)*x613))+((gclwh13_0*x578)));
op[57]=((0.210112)+(((4.0)*x605))+(((-2.0)*x604))+(((-2.0)*x603))+(((-0.02)*x601))+(((0.4)*x597))+(((0.4)*x591))+(((2.0)*x609))+(((0.02)*x599))+(((-4.0)*x607))+(((-0.4)*x594))+(((-0.02)*x588))+(((4.0)*x610)));
op[58]=(x611+x618+(((-1.0)*x604))+(((-1.0)*x589))+(((-0.001809)*x590))+(((-1.0)*x603))+(((-0.001809)*x596))+(((0.001809)*x593))+(((-1.0)*x602))+(((-1.0)*x595))+x598+x592+(((-1.0)*x608))+x609+x600+x606);
op[59]=(x619+(((0.00033)*x620))+(((-0.066)*x628))+(((0.033)*x629))+(((0.066)*x630))+(((0.00033)*x627))+(((-1.0)*x624))+(((0.033)*x633))+x622+x625+(((0.0066)*x614))+(((0.0066)*x612))+(((-0.033)*x631))+(((-0.066)*x632))+(((-0.00033)*x626))+(((-0.0066)*x613)));
op[60]=((((-0.1634)*x637))+(((-1.634)*x652))+(((-0.00817)*x643))+(((0.00817)*x641))+(((-1.0)*x642))+(((-1.0)*x647))+x636+(((-0.817)*x649))+(((-0.1634)*x645))+(((-1.0)*x638))+x651+x654+(((-1.0)*x650))+(((1.634)*x648))+(((0.817)*x653))+x640+x646+(((-1.0)*x655))+(((1.634)*x656))+(((-0.00817)*x639))+(((0.1634)*x644))+(((-0.817)*x657)));
op[61]=((0.685445)+(((-1.0)*x683))+(((-0.00675445)*x670))+(((-1.35089)*x684))+(((1.35089)*x679))+(((-1.0)*x691))+(((-1.0)*x672))+(((-0.685445)*x689))+(((-0.685445)*x687))+(((-0.00675445)*x662))+(((0.00675445)*x667))+(((1.35089)*x688))+(((-0.665445)*x693))+(((0.00675445)*x666))+(((-1.0)*x678))+(((-0.665445)*x680))+x659+(((0.665445)*x685))+x699+(((1.35089)*x692))+x661+x669+(((1.35089)*x686))+(((0.00675445)*x665))+x676+x674+x675+x682+(((-1.0)*x664)));
op[62]=((0.089834)+(((4.0)*x681))+(((0.4)*x658))+(((-2.0)*x683))+(((-4.0)*x677))+(((0.4)*x673))+(((2.0)*x676))+(((0.02)*x668))+(((-0.4)*x671))+(((-0.02)*x663))+(((2.0)*x675))+(((-4.0)*x690))+(((0.02)*x660)));
op[63]=((((-0.00784)*x436))+((x437*x585))+(((-1.0)*x436*x585))+(((-0.00784)*x438))+(((1.568)*x444))+(((-0.00784)*x437))+(((0.00784)*x435))+(((-1.568)*x442))+(((0.0085)*x643))+(((-0.85)*x653))+(((0.85)*x657))+(((0.0085)*x639))+(((-1.7)*x648))+(((-1.0)*gclwh4_2*x584))+(((0.85)*x649))+(((-1.0)*gclwh6_2*x578))+((x435*x585))+(((-1.7)*x656))+x433+(((1.7)*x652))+(((0.1568)*x434))+((gclwh4_2*x577))+(((-0.0085)*x641))+((x448*x585))+(((-1.568)*x445))+(((-1.568)*x446))+((x438*x585))+((gclwh8_2*x579)));
op[64]=((((0.033)*x657))+(((-1.0)*x646))+(((0.00033)*x639))+(((-0.00033)*x641))+(((-0.066)*x648))+(((-0.066)*x656))+(((-0.033)*x653))+x638+x636+x650+x655+(((-1.0)*x651))+(((-0.0066)*x645))+(((-1.0)*x654))+(((0.033)*x649))+x642+x647+(((0.0066)*x644))+(((-0.0066)*x637))+(((0.066)*x652))+(((-1.0)*x640))+(((0.00033)*x643)));
op[65]=((-0.019045)+(((-1.0)*x659))+(((-0.01809)*x684))+(((-1.0)*x676))+(((-9.045e-5)*x662))+(((-1.0)*x669))+(((-1.0)*x682))+(((0.01809)*x688))+(((-0.019045)*x689))+(((0.000955)*x693))+(((9.045e-5)*x665))+(((-1.0)*x675))+(((0.01809)*x692))+(((-9.045e-5)*x670))+(((0.000955)*x680))+(((-0.000955)*x685))+(((-1.0)*x661))+(((-0.019045)*x687))+x699+x691+(((-1.0)*x674))+(((0.01809)*x679))+x664+(((9.045e-5)*x666))+x678+x672+x683+(((9.045e-5)*x667))+(((0.01809)*x686)));
op[66]=((-0.685445)+(((1.35089)*x716))+(((1.35089)*x719))+(((-0.685445)*x712))+(((-1.0)*x709))+(((-1.35089)*x721))+x502+(((-1.0)*x723))+(((0.665445)*x714))+(((-0.665445)*x717))+(((0.00675445)*x702))+(((-1.0)*x498))+(((0.00675445)*x706))+(((-1.35089)*x713))+(((-0.00675445)*x704))+(((-1.0)*x715))+x701+x703+x708+(((0.00675445)*x700))+x710+x718+x730+(((1.35089)*x711))+(((0.00675445)*x707))+x494+(((-1.0)*x705))+(((0.665445)*x722))+(((-0.685445)*x720)));
op[67]=((((-1.0)*x739))+(((0.817)*x727))+(((-1.0)*x733))+(((-0.00817)*x725))+(((0.1634)*x504))+(((0.00817)*x726))+(((-1.0)*x735))+(((-1.0)*x741))+(((-0.1634)*x505))+(((-1.634)*x737))+(((-0.817)*x728))+(((0.00817)*x724))+(((1.634)*x740))+(((0.817)*x729))+x738+x736+x732+x731+x734+x742+(((-1.634)*x743))+(((0.1634)*x506)));
op[68]=((((-1.0)*gclwh9_0*x579))+(((1.7)*x740))+(((0.0085)*x724))+(((-0.0085)*x725))+(((-1.7)*x743))+x508+(((-0.00784)*x449))+(((0.85)*x727))+(((-1.568)*x462))+(((0.0085)*x726))+((gclwh7_0*x578))+(((0.85)*x729))+(((-1.0)*x458*x585))+(((0.00784)*x454))+(((-0.00784)*x451))+(((-0.1568)*x450))+(((-1.0)*x451*x585))+(((-1.568)*x470))+(((-1.0)*gclwh5_0*x577))+(((-1.568)*x475))+((x457*x585))+((gclwh5_0*x584))+(((1.568)*x464))+(((-1.7)*x737))+(((-0.00784)*x457))+(((-0.85)*x728))+(((0.784)*x463))+((x454*x585)));
op[69]=((0.089834)+x509);
op[70]=((0.019045)+(((9.045e-5)*x706))+(((-0.000955)*x714))+(((9.045e-5)*x702))+(((-0.01809)*x721))+(((-0.01809)*x713))+(((0.000955)*x717))+(((-1.0)*x718))+(((0.01809)*x711))+(((-1.0)*x708))+(((-9.045e-5)*x704))+x705+x709+(((-1.0)*x703))+x715+(((9.045e-5)*x707))+x730+(((-1.0)*x710))+(((-0.019045)*x720))+(((-0.019045)*x712))+(((9.045e-5)*x700))+(((-1.0)*x701))+(((0.01809)*x719))+x498+(((0.01809)*x716))+(((-0.000955)*x722))+x723+(((-1.0)*x502))+(((-1.0)*x494)));
op[71]=((((-0.033)*x727))+(((-0.0066)*x505))+(((-0.00033)*x724))+(((0.0066)*x506))+(((0.066)*x737))+(((0.00033)*x725))+(((0.066)*x743))+(((-1.0)*x738))+(((-0.033)*x729))+(((-1.0)*x734))+x739+x735+x731+x733+(((0.033)*x728))+x741+(((0.0066)*x504))+(((-0.066)*x740))+(((-0.00033)*x726))+(((-1.0)*x732))+(((-1.0)*x742))+(((-1.0)*x736)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x744=htj1*htj1;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(((1.0)+x744),-1);
if(!x745.valid){
continue;
}
cj1array[numsolutions]=((x745.value)*(((1.0)+(((-1.0)*x744)))));
CheckValue<IkReal> x746=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x746.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x746.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x747=htj2*htj2;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(((1.0)+x747),-1);
if(!x748.valid){
continue;
}
cj2array[numsolutions]=((x748.value)*(((1.0)+(((-1.0)*x747)))));
CheckValue<IkReal> x749=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x749.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x749.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x750=htj3*htj3;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(((1.0)+x750),-1);
if(!x751.valid){
continue;
}
cj3array[numsolutions]=((x751.value)*(((1.0)+(((-1.0)*x750)))));
CheckValue<IkReal> x752=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x752.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x752.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x753=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x753);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x753);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x754=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x754);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x754);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x755=IKPowWithIntegerCheck(r22,-1);
if(!x755.valid){
continue;
}
CheckValue<IkReal> x756=IKPowWithIntegerCheck(sj3,-1);
if(!x756.valid){
continue;
}
sj4array[0]=((x755.value)*(x756.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x757=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x757);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x757);
IkReal x758=(r10*sj3);
IkReal x759=(cj3*cj4*r11);
IkReal x760=(cj1*cj2*r01*sj4);
IkReal x761=(r01*sj1*sj2*sj4);
IkReal x762=(r00*sj3);
IkReal x763=(cj3*cj4*r01);
IkReal x764=(cj1*cj2*r11*sj4);
IkReal x765=(r11*sj1*sj2*sj4);
IkReal x766=(cj3*r12*sj4);
IkReal x767=(cj1*cj2*cj4*r02);
IkReal x768=(cj4*r02*sj1*sj2);
IkReal x769=((((12.0)*x768))+(((-12.0)*x766))+(((-12.0)*x767)));
IkReal x770=((4.0)*sj3);
IkReal x771=(r11*x770);
IkReal x772=((4.0)*cj3*cj4);
IkReal x773=(r10*x772);
IkReal x774=((4.0)*cj1*cj2*sj4);
IkReal x775=(r00*x774);
IkReal x776=((4.0)*sj1*sj2*sj4);
IkReal x777=(r00*x776);
IkReal x778=((((-1.0)*x773))+(((-1.0)*x777))+x771+x775);
IkReal x779=(cj3*r02*sj4);
IkReal x780=(cj1*cj2*cj4*r12);
IkReal x781=(cj4*r12*sj1*sj2);
IkReal x782=(r01*x770);
IkReal x783=(r00*x772);
IkReal x784=(r10*x774);
IkReal x785=(r10*x776);
IkReal x786=(x785+x782+(((-1.0)*x783))+(((-1.0)*x784)));
IkReal x787=((((-12.0)*x779))+(((-12.0)*x781))+(((12.0)*x780)));
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x775))+x769+(((-1.0)*x771))+x777+x773)))))+(((0.5)*(IKabs(((((-16.0)*x762))+(((16.0)*x765))+(((-16.0)*x764))+(((-16.0)*x763)))))))+(((0.5)*(IKabs((x786+x787)))))+(((0.5)*(IKabs(((((-4.0)*x767))+(((4.0)*x768))+(((-4.0)*x766))+x778)))))+(IKabs(((((-8.0)*x763))+(((-8.0)*x762))+(((8.0)*x765))+(((-8.0)*x764)))))+(IKabs(((((-8.0)*x758))+(((-8.0)*x761))+(((8.0)*x760))+(((-8.0)*x759)))))+(((0.5)*(IKabs(((((16.0)*x760))+(((-16.0)*x759))+(((-16.0)*x758))+(((-16.0)*x761)))))))+(((0.5)*(IKabs((x787+x784+x783+(((-1.0)*x785))+(((-1.0)*x782)))))))+(((0.5)*(IKabs((x786+(((-4.0)*x779))+(((-4.0)*x781))+(((4.0)*x780)))))))+(((0.5)*(IKabs((x769+x778))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x788=(cj3*r12*sj4);
IkReal x789=(cj1*cj2*cj4*r02);
IkReal x790=(cj4*r02*sj1*sj2);
IkReal x791=((((4.0)*x790))+(((-4.0)*x789))+(((-4.0)*x788)));
IkReal x792=((4.0)*r11*sj3);
IkReal x793=((((4.0)*r10))*((cj3*cj4)));
IkReal x794=((4.0)*r00);
IkReal x795=(cj1*cj2*sj4*x794);
IkReal x796=(sj1*sj2*sj4*x794);
IkReal x797=((((-1.0)*x796))+(((-1.0)*x793))+x795+x792);
IkReal x798=(r10*sj3);
IkReal x799=(cj3*cj4*r11);
IkReal x800=(cj1*cj2*r01*sj4);
IkReal x801=(r01*sj1*sj2*sj4);
IkReal x802=((((-8.0)*x801))+(((8.0)*x800))+(((-8.0)*x799))+(((-8.0)*x798)));
IkReal x803=((((12.0)*x790))+(((-12.0)*x788))+(((-12.0)*x789)));
IkReal x804=((((-1.0)*x792))+(((-1.0)*x795))+x796+x793);
op[0]=(x797+x791);
op[1]=x802;
op[2]=(x803+x797);
op[3]=((((-16.0)*x799))+(((16.0)*x800))+(((-16.0)*x798))+(((-16.0)*x801)));
op[4]=(x804+x803);
op[5]=x802;
op[6]=(x804+x791);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x805=((4.0)*r01*sj3);
IkReal x806=((((4.0)*r00))*((cj3*cj4)));
IkReal x807=((4.0)*r10);
IkReal x808=(cj1*cj2*sj4*x807);
IkReal x809=(sj1*sj2*sj4*x807);
IkReal x810=(x806+x808+(((-1.0)*x809))+(((-1.0)*x805)));
IkReal x811=(cj3*r02*sj4);
IkReal x812=((-4.0)*x811);
IkReal x813=(cj1*cj2*cj4*r12);
IkReal x814=((4.0)*x813);
IkReal x815=(cj4*r12*sj1*sj2);
IkReal x816=((-4.0)*x815);
IkReal x817=(r00*sj3);
IkReal x818=(cj3*cj4*r01);
IkReal x819=(cj1*cj2*r11*sj4);
IkReal x820=(r11*sj1*sj2*sj4);
IkReal x821=((((-8.0)*x818))+(((-8.0)*x817))+(((8.0)*x820))+(((-8.0)*x819)));
IkReal x822=((((-12.0)*x815))+(((12.0)*x813))+(((-12.0)*x811)));
IkReal x823=((((-1.0)*x806))+x805+x809+(((-1.0)*x808)));
j5evalpoly[0]=(((htj5*x821))+(((htj5*htj5*htj5)*(((((16.0)*x820))+(((-16.0)*x817))+(((-16.0)*x818))+(((-16.0)*x819))))))+(((htj5*htj5)*((x810+x822))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x814+x816+x812+x823))))+x814+x816+x810+x812+(((htj5*htj5*htj5*htj5)*((x823+x822))))+((x821*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x824=(sj4*sj5);
IkReal x825=(cj5*sj4);
if( IKabs((((r01*x824))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x825))+(((-1.0)*r11*x824))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x824))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x825))))+IKsqr((((r10*x825))+(((-1.0)*r11*x824))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x824))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x825))), (((r10*x825))+(((-1.0)*r11*x824))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x826=IKcos(j0);
IkReal x827=((1.0)*cj4);
IkReal x828=(sj4*sj5);
IkReal x829=((1.0)*cj5*sj4);
IkReal x830=IKsin(j0);
IkReal x831=((1.0)*x830);
IkReal x832=((0.1)*cj5);
IkReal x833=((0.1)*sj5);
IkReal x834=((0.425)*cj1);
IkReal x835=((0.392)*cj1*cj2);
IkReal x836=(sj1*sj2);
IkReal x837=(x826*x836);
IkReal x838=(x830*x836);
IkReal x839=(cj3*sj4);
IkReal x840=(cj5*sj3);
IkReal x841=(sj3*sj5);
IkReal x842=(cj3*cj4*sj5);
IkReal x843=(cj1*cj2);
IkReal x844=((1.0)*x826);
IkReal x845=((1.0)*cj3*cj4*cj5);
IkReal x846=(cj3*cj5);
IkReal x847=(cj3*sj5);
IkReal x848=((1.0)*sj3*sj4);
IkReal x849=(cj4*cj5*sj3);
IkReal x850=(cj1*sj2);
IkReal x851=(cj2*sj1);
IkReal x852=((1.0)*cj4*sj3*sj5);
evalcond[0]=((((-1.0)*r10*x829))+((r11*x828))+(((-1.0)*r12*x827))+x826);
evalcond[1]=((((-1.0)*r00*x829))+((r01*x828))+(((-1.0)*r02*x827))+(((-1.0)*x831)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.392)*x837))+(((-0.134)*x830))+((x826*x835))+(((-1.0)*r00*x833))+((x826*x834))+(((-1.0)*r01*x832)));
evalcond[3]=(((x830*x835))+(((-1.0)*(1.0)*py))+((x830*x834))+(((-1.0)*r10*x833))+(((-0.392)*x838))+(((0.134)*x826))+(((-1.0)*r11*x832)));
evalcond[4]=(x837+(((-1.0)*x843*x844))+((r01*x842))+((r02*x839))+(((-1.0)*r00*x845))+((r00*x841))+((r01*x840)));
evalcond[5]=(((r11*x840))+x838+(((-1.0)*x831*x843))+((r11*x842))+((r10*x841))+((r12*x839))+(((-1.0)*r10*x845)));
evalcond[6]=(((r00*x847))+(((-1.0)*r02*x848))+((r00*x849))+((r01*x846))+(((-1.0)*x844*x850))+(((-1.0)*x844*x851))+(((-1.0)*r01*x852)));
evalcond[7]=((((-1.0)*r12*x848))+(((-1.0)*x831*x851))+(((-1.0)*x831*x850))+((r11*x846))+((r10*x847))+(((-1.0)*r11*x852))+((r10*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x853=IKPowWithIntegerCheck(cj3,-1);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(r22,-1);
if(!x854.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x853.value)*(x854.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x855=((1.0)*r22);
evalcond[0]=((-1.0)*x855*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x855*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x856=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x856);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x856);
IkReal x857=(r10*sj3);
IkReal x858=(cj3*cj4*r11);
IkReal x859=(cj1*cj2*r01*sj4);
IkReal x860=(r01*sj1*sj2*sj4);
IkReal x861=(r00*sj3);
IkReal x862=(cj3*cj4*r01);
IkReal x863=(cj1*cj2*r11*sj4);
IkReal x864=(r11*sj1*sj2*sj4);
IkReal x865=(cj3*r12*sj4);
IkReal x866=(cj1*cj2*cj4*r02);
IkReal x867=(cj4*r02*sj1*sj2);
IkReal x868=((((12.0)*x867))+(((-12.0)*x865))+(((-12.0)*x866)));
IkReal x869=((4.0)*sj3);
IkReal x870=(r11*x869);
IkReal x871=((4.0)*cj3*cj4);
IkReal x872=(r10*x871);
IkReal x873=((4.0)*cj1*cj2*sj4);
IkReal x874=(r00*x873);
IkReal x875=((4.0)*sj1*sj2*sj4);
IkReal x876=(r00*x875);
IkReal x877=((((-1.0)*x872))+(((-1.0)*x876))+x870+x874);
IkReal x878=(cj3*r02*sj4);
IkReal x879=(cj1*cj2*cj4*r12);
IkReal x880=(cj4*r12*sj1*sj2);
IkReal x881=(r01*x869);
IkReal x882=(r00*x871);
IkReal x883=(r10*x873);
IkReal x884=(r10*x875);
IkReal x885=((((-1.0)*x883))+x884+x881+(((-1.0)*x882)));
IkReal x886=((((-12.0)*x880))+(((-12.0)*x878))+(((12.0)*x879)));
j5eval[0]=((((0.5)*(IKabs(((((4.0)*x879))+(((-4.0)*x878))+x885+(((-4.0)*x880)))))))+(((0.5)*(IKabs((x868+x877)))))+(IKabs(((((-8.0)*x861))+(((-8.0)*x863))+(((-8.0)*x862))+(((8.0)*x864)))))+(((0.5)*(IKabs(((((-1.0)*x874))+x868+x872+x876+(((-1.0)*x870)))))))+(((0.5)*(IKabs(((((-1.0)*x884))+(((-1.0)*x881))+x882+x886+x883)))))+(((0.5)*(IKabs(((((-16.0)*x858))+(((16.0)*x859))+(((-16.0)*x860))+(((-16.0)*x857)))))))+(((0.5)*(IKabs(((((-4.0)*x865))+(((-4.0)*x866))+x877+(((4.0)*x867)))))))+(((0.5)*(IKabs(((((16.0)*x864))+(((-16.0)*x863))+(((-16.0)*x862))+(((-16.0)*x861)))))))+(IKabs(((((8.0)*x859))+(((-8.0)*x857))+(((-8.0)*x858))+(((-8.0)*x860)))))+(((0.5)*(IKabs((x886+x885))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x887=(cj3*r12*sj4);
IkReal x888=(cj1*cj2*cj4*r02);
IkReal x889=(cj4*r02*sj1*sj2);
IkReal x890=((((4.0)*x889))+(((-4.0)*x888))+(((-4.0)*x887)));
IkReal x891=((4.0)*r11*sj3);
IkReal x892=((((4.0)*r10))*((cj3*cj4)));
IkReal x893=((4.0)*r00);
IkReal x894=(cj1*cj2*sj4*x893);
IkReal x895=(sj1*sj2*sj4*x893);
IkReal x896=((((-1.0)*x895))+(((-1.0)*x892))+x894+x891);
IkReal x897=(r10*sj3);
IkReal x898=(cj3*cj4*r11);
IkReal x899=(cj1*cj2*r01*sj4);
IkReal x900=(r01*sj1*sj2*sj4);
IkReal x901=((((-8.0)*x898))+(((-8.0)*x897))+(((8.0)*x899))+(((-8.0)*x900)));
IkReal x902=((((12.0)*x889))+(((-12.0)*x887))+(((-12.0)*x888)));
IkReal x903=((((-1.0)*x891))+x895+x892+(((-1.0)*x894)));
op[0]=(x896+x890);
op[1]=x901;
op[2]=(x902+x896);
op[3]=((((-16.0)*x898))+(((16.0)*x899))+(((-16.0)*x897))+(((-16.0)*x900)));
op[4]=(x902+x903);
op[5]=x901;
op[6]=(x903+x890);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x904=((4.0)*r01*sj3);
IkReal x905=((((4.0)*r00))*((cj3*cj4)));
IkReal x906=((4.0)*r10);
IkReal x907=(cj1*cj2*sj4*x906);
IkReal x908=(sj1*sj2*sj4*x906);
IkReal x909=((((-1.0)*x908))+x907+x905+(((-1.0)*x904)));
IkReal x910=(cj3*r02*sj4);
IkReal x911=((-4.0)*x910);
IkReal x912=(cj1*cj2*cj4*r12);
IkReal x913=((4.0)*x912);
IkReal x914=(cj4*r12*sj1*sj2);
IkReal x915=((-4.0)*x914);
IkReal x916=(r00*sj3);
IkReal x917=(cj3*cj4*r01);
IkReal x918=(cj1*cj2*r11*sj4);
IkReal x919=(r11*sj1*sj2*sj4);
IkReal x920=((((-8.0)*x916))+(((-8.0)*x917))+(((8.0)*x919))+(((-8.0)*x918)));
IkReal x921=((((-12.0)*x914))+(((12.0)*x912))+(((-12.0)*x910)));
IkReal x922=(x908+x904+(((-1.0)*x907))+(((-1.0)*x905)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x911+x915+x913+x922))))+x911+x915+x913+((htj5*x920))+x909+(((htj5*htj5)*((x909+x921))))+((x920*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x922+x921))))+(((htj5*htj5*htj5)*(((((-16.0)*x918))+(((-16.0)*x917))+(((-16.0)*x916))+(((16.0)*x919)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x923=(sj4*sj5);
IkReal x924=(cj5*sj4);
if( IKabs((((r01*x923))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x924))+(((-1.0)*r11*x923))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x923))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x924))))+IKsqr((((r10*x924))+(((-1.0)*r11*x923))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x923))+(((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x924))), (((r10*x924))+(((-1.0)*r11*x923))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x925=IKcos(j0);
IkReal x926=((1.0)*cj4);
IkReal x927=(sj4*sj5);
IkReal x928=((1.0)*cj5*sj4);
IkReal x929=IKsin(j0);
IkReal x930=((1.0)*x929);
IkReal x931=((0.1)*cj5);
IkReal x932=((0.1)*sj5);
IkReal x933=((0.425)*cj1);
IkReal x934=((0.392)*cj1*cj2);
IkReal x935=(sj1*sj2);
IkReal x936=(x925*x935);
IkReal x937=(x929*x935);
IkReal x938=(cj3*sj4);
IkReal x939=(cj5*sj3);
IkReal x940=(sj3*sj5);
IkReal x941=(cj3*cj4*sj5);
IkReal x942=(cj1*cj2);
IkReal x943=((1.0)*x925);
IkReal x944=((1.0)*cj3*cj4*cj5);
IkReal x945=(cj3*cj5);
IkReal x946=(cj3*sj5);
IkReal x947=((1.0)*sj3*sj4);
IkReal x948=(cj4*cj5*sj3);
IkReal x949=(cj1*sj2);
IkReal x950=(cj2*sj1);
IkReal x951=((1.0)*cj4*sj3*sj5);
evalcond[0]=(((r11*x927))+(((-1.0)*r10*x928))+(((-1.0)*r12*x926))+x925);
evalcond[1]=((((-1.0)*x930))+(((-1.0)*r02*x926))+((r01*x927))+(((-1.0)*r00*x928)));
evalcond[2]=(((x925*x933))+(((-0.134)*x929))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x932))+((x925*x934))+(((-0.392)*x936))+(((-1.0)*r01*x931)));
evalcond[3]=(((x929*x933))+(((-1.0)*(1.0)*py))+(((0.134)*x925))+(((-1.0)*r10*x932))+((x929*x934))+(((-1.0)*r11*x931))+(((-0.392)*x937)));
evalcond[4]=((((-1.0)*r00*x944))+((r02*x938))+(((-1.0)*x942*x943))+((r00*x940))+((r01*x941))+x936+((r01*x939)));
evalcond[5]=(((r11*x941))+(((-1.0)*r10*x944))+((r11*x939))+((r10*x940))+((r12*x938))+(((-1.0)*x930*x942))+x937);
evalcond[6]=((((-1.0)*r01*x951))+(((-1.0)*x943*x949))+((r00*x948))+(((-1.0)*r02*x947))+((r01*x945))+(((-1.0)*x943*x950))+((r00*x946)));
evalcond[7]=(((r10*x946))+(((-1.0)*r11*x951))+((r10*x948))+(((-1.0)*r12*x947))+(((-1.0)*x930*x949))+((r11*x945))+(((-1.0)*x930*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x952=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x952);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x952);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x953=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x953);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x953);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x954=IKPowWithIntegerCheck(r22,-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955=IKPowWithIntegerCheck(sj3,-1);
if(!x955.valid){
continue;
}
sj4array[0]=((x954.value)*(x955.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x956=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x956);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x956);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x957=((4.0)*cj1*r01);
IkReal x958=(cj2*cj3*x957);
IkReal x959=(sj2*sj3*x957);
IkReal x960=((4.0)*r01*sj1);
IkReal x961=(cj2*sj3*x960);
IkReal x962=(cj3*sj2*x960);
IkReal x963=((4.0)*r00);
IkReal x964=(cj1*cj2*cj4*sj3*x963);
IkReal x965=(cj1*cj3*cj4*sj2*x963);
IkReal x966=(cj2*cj3*cj4*sj1*x963);
IkReal x967=(cj4*sj1*sj2*sj3*x963);
IkReal x968=(x959+(((-1.0)*x964))+(((-1.0)*x965))+(((-1.0)*x958))+x967+x961+x962+(((-1.0)*x966)));
IkReal x969=(cj1*cj2*cj3*r00);
IkReal x970=(cj1*r00*sj2*sj3);
IkReal x971=(cj2*r00*sj1*sj3);
IkReal x972=(cj3*r00*sj1*sj2);
IkReal x973=(cj1*cj2*cj4*r01*sj3);
IkReal x974=(cj1*cj3*cj4*r01*sj2);
IkReal x975=(cj2*cj3*cj4*r01*sj1);
IkReal x976=(cj4*r01*sj1*sj2*sj3);
IkReal x977=((((-8.0)*x970))+(((-8.0)*x971))+(((-8.0)*x972))+(((-8.0)*x973))+(((8.0)*x976))+(((8.0)*x969))+(((-8.0)*x974))+(((-8.0)*x975)));
IkReal x978=(x958+(((-1.0)*x959))+(((-1.0)*x961))+x966+x964+x965+(((-1.0)*x962))+(((-1.0)*x967)));
op[0]=x968;
op[1]=x977;
op[2]=x968;
op[3]=((((16.0)*x969))+(((-16.0)*x973))+(((-16.0)*x972))+(((-16.0)*x971))+(((-16.0)*x970))+(((-16.0)*x975))+(((-16.0)*x974))+(((16.0)*x976)));
op[4]=x978;
op[5]=x977;
op[6]=x978;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x979=(sj4*sj5);
IkReal x980=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x980))+((r01*x979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x979))+((r10*x980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x980))+((r01*x979))))+IKsqr(((((-1.0)*r11*x979))+((r10*x980))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x980))+((r01*x979))), ((((-1.0)*r11*x979))+((r10*x980))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x981=IKcos(j0);
IkReal x982=(sj4*sj5);
IkReal x983=((1.0)*cj5*sj4);
IkReal x984=IKsin(j0);
IkReal x985=((1.0)*x984);
IkReal x986=(cj5*sj3);
IkReal x987=(sj3*sj5);
IkReal x988=(sj1*sj2);
IkReal x989=(x981*x988);
IkReal x990=(cj3*cj4*sj5);
IkReal x991=(cj1*cj2);
IkReal x992=((1.0)*x981);
IkReal x993=((1.0)*cj3*cj4*cj5);
IkReal x994=(x984*x988);
IkReal x995=(cj3*cj5);
IkReal x996=(cj3*sj5);
IkReal x997=(cj4*cj5*sj3);
IkReal x998=(cj1*sj2);
IkReal x999=(cj2*sj1);
IkReal x1000=((1.0)*cj4*sj3*sj5);
IkReal x1001=((0.1)*cj5);
IkReal x1002=((0.1)*sj5);
IkReal x1003=((0.425)*cj1);
IkReal x1004=((0.392)*cj1*cj2);
evalcond[0]=(x981+((r11*x982))+(((-1.0)*r10*x983)));
evalcond[1]=(((r01*x982))+(((-1.0)*x985))+(((-1.0)*r00*x983)));
evalcond[2]=((((-1.0)*x991*x992))+((r00*x987))+((r01*x986))+(((-1.0)*r00*x993))+x989+((r01*x990)));
evalcond[3]=(((r11*x986))+(((-1.0)*r10*x993))+(((-1.0)*x985*x991))+((r10*x987))+x994+((r11*x990)));
evalcond[4]=(((r01*x995))+(((-1.0)*x992*x999))+(((-1.0)*r01*x1000))+((r00*x996))+(((-1.0)*x992*x998))+((r00*x997)));
evalcond[5]=(((r11*x995))+(((-1.0)*r11*x1000))+(((-1.0)*x985*x999))+(((-1.0)*x985*x998))+((r10*x997))+((r10*x996)));
evalcond[6]=(((x1003*x981))+(((-1.0)*(1.0)*px))+(((-0.134)*x984))+(((-1.0)*r01*x1001))+((x1004*x981))+(((-0.392)*x989))+(((-1.0)*r00*x1002)));
evalcond[7]=((((-1.0)*r11*x1001))+(((-1.0)*(1.0)*py))+((x1003*x984))+(((-0.392)*x994))+((x1004*x984))+(((0.134)*x981))+(((-1.0)*r10*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(cj3,-1);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(r22,-1);
if(!x1006.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x1005.value)*(x1006.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1007=((1.0)*r22);
evalcond[0]=((-1.0)*x1007*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x1007*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1008=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1008);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1008);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1009=((4.0)*cj1*r01);
IkReal x1010=(cj2*cj3*x1009);
IkReal x1011=(sj2*sj3*x1009);
IkReal x1012=((4.0)*r01*sj1);
IkReal x1013=(cj2*sj3*x1012);
IkReal x1014=(cj3*sj2*x1012);
IkReal x1015=((4.0)*r00);
IkReal x1016=(cj1*cj2*cj4*sj3*x1015);
IkReal x1017=(cj1*cj3*cj4*sj2*x1015);
IkReal x1018=(cj2*cj3*cj4*sj1*x1015);
IkReal x1019=(cj4*sj1*sj2*sj3*x1015);
IkReal x1020=(x1013+x1014+x1011+x1019+(((-1.0)*x1010))+(((-1.0)*x1016))+(((-1.0)*x1018))+(((-1.0)*x1017)));
IkReal x1021=(cj1*cj2*cj3*r00);
IkReal x1022=(cj1*r00*sj2*sj3);
IkReal x1023=(cj2*r00*sj1*sj3);
IkReal x1024=(cj3*r00*sj1*sj2);
IkReal x1025=(cj1*cj2*cj4*r01*sj3);
IkReal x1026=(cj1*cj3*cj4*r01*sj2);
IkReal x1027=(cj2*cj3*cj4*r01*sj1);
IkReal x1028=(cj4*r01*sj1*sj2*sj3);
IkReal x1029=((((-8.0)*x1022))+(((-8.0)*x1027))+(((-8.0)*x1024))+(((-8.0)*x1026))+(((-8.0)*x1025))+(((-8.0)*x1023))+(((8.0)*x1021))+(((8.0)*x1028)));
IkReal x1030=((((-1.0)*x1011))+(((-1.0)*x1013))+(((-1.0)*x1019))+x1016+x1017+x1010+x1018+(((-1.0)*x1014)));
op[0]=x1020;
op[1]=x1029;
op[2]=x1020;
op[3]=((((-16.0)*x1024))+(((-16.0)*x1027))+(((16.0)*x1021))+(((-16.0)*x1025))+(((-16.0)*x1023))+(((-16.0)*x1026))+(((16.0)*x1028))+(((-16.0)*x1022)));
op[4]=x1030;
op[5]=x1029;
op[6]=x1030;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1031=(sj4*sj5);
IkReal x1032=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1032))+((r01*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1032))+(((-1.0)*r11*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1032))+((r01*x1031))))+IKsqr((((r10*x1032))+(((-1.0)*r11*x1031))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1032))+((r01*x1031))), (((r10*x1032))+(((-1.0)*r11*x1031))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1033=IKcos(j0);
IkReal x1034=(sj4*sj5);
IkReal x1035=((1.0)*cj5*sj4);
IkReal x1036=IKsin(j0);
IkReal x1037=((1.0)*x1036);
IkReal x1038=(cj5*sj3);
IkReal x1039=(sj3*sj5);
IkReal x1040=(sj1*sj2);
IkReal x1041=(x1033*x1040);
IkReal x1042=(cj3*cj4*sj5);
IkReal x1043=(cj1*cj2);
IkReal x1044=((1.0)*x1033);
IkReal x1045=((1.0)*cj3*cj4*cj5);
IkReal x1046=(x1036*x1040);
IkReal x1047=(cj3*cj5);
IkReal x1048=(cj3*sj5);
IkReal x1049=(cj4*cj5*sj3);
IkReal x1050=(cj1*sj2);
IkReal x1051=(cj2*sj1);
IkReal x1052=((1.0)*cj4*sj3*sj5);
IkReal x1053=((0.1)*cj5);
IkReal x1054=((0.1)*sj5);
IkReal x1055=((0.425)*cj1);
IkReal x1056=((0.392)*cj1*cj2);
evalcond[0]=(x1033+(((-1.0)*r10*x1035))+((r11*x1034)));
evalcond[1]=((((-1.0)*r00*x1035))+((r01*x1034))+(((-1.0)*x1037)));
evalcond[2]=((((-1.0)*x1043*x1044))+(((-1.0)*r00*x1045))+((r01*x1038))+x1041+((r01*x1042))+((r00*x1039)));
evalcond[3]=(x1046+(((-1.0)*x1037*x1043))+((r11*x1038))+((r10*x1039))+((r11*x1042))+(((-1.0)*r10*x1045)));
evalcond[4]=(((r01*x1047))+((r00*x1049))+(((-1.0)*x1044*x1050))+(((-1.0)*x1044*x1051))+(((-1.0)*r01*x1052))+((r00*x1048)));
evalcond[5]=(((r10*x1048))+(((-1.0)*r11*x1052))+(((-1.0)*x1037*x1051))+((r11*x1047))+((r10*x1049))+(((-1.0)*x1037*x1050)));
evalcond[6]=((((-0.392)*x1041))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1053))+((x1033*x1056))+((x1033*x1055))+(((-0.134)*x1036))+(((-1.0)*r00*x1054)));
evalcond[7]=(((x1036*x1056))+(((-1.0)*(1.0)*py))+((x1036*x1055))+(((0.134)*x1033))+(((-0.392)*x1046))+(((-1.0)*r11*x1053))+(((-1.0)*r10*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(((-1.0)*(((0.1)*r21)))),IkReal(((-1.0)*(((0.1)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
IkReal x1057=((-1.0)*(x1059.value));
if((((((0.01)*(r21*r21)))+(((0.01)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r21*r21)))+(((0.01)*(r20*r20)))))),-1);
if(!x1060.valid){
continue;
}
if( (((-1.0)*(x1060.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1060.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1058=IKasin(((-1.0)*(x1060.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1))))));
j5array[0]=(x1057+x1058);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1057+(((-1.0)*x1058)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1061=(sj3*(r21*r21));
IkReal x1062=cj5*cj5;
IkReal x1063=((((-1.0)*(2.0)*cj5*r20*r21*sj3*sj5))+x1061+((sj3*(r22*r22)))+((sj3*x1062*(r20*r20)))+(((-1.0)*x1061*x1062)));
j4eval[0]=x1063;
j4eval[1]=IKsign(x1063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1064=(cj3*(r21*r21));
IkReal x1065=cj5*cj5;
IkReal x1066=((((-1.0)*(2.0)*cj3*cj5*r20*r21*sj5))+x1064+((cj3*x1065*(r20*r20)))+((cj3*(r22*r22)))+(((-1.0)*x1064*x1065)));
j4eval[0]=x1066;
j4eval[1]=IKsign(x1066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1067=cj1*cj1;
IkReal x1068=cj2*cj2;
IkReal x1069=(cj1*sj1*sj2);
IkReal x1070=(cj2*x1067);
IkReal x1071=(cj1*cj2*sj1*sj2);
IkReal x1072=(x1067*x1068);
j0eval[0]=((6.36549089425466)+(((-11.3989837172212)*x1071))+x1067+(((-5.69949185861059)*x1068))+(((-12.3585920403546)*x1069))+(((11.3989837172212)*x1072))+(((12.3585920403546)*x1070)));
j0eval[1]=IKsign(((42905.0)+(((-38416.0)*x1068))+(((6740.25)*x1067))+(((-83300.0)*x1069))+(((-76832.0)*x1071))+(((76832.0)*x1072))+(((83300.0)*x1070))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1073=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
IkReal x1074=((1.0)*cj5);
IkReal x1075=((1.0)*sj5);
j0eval[0]=x1073;
j0eval[1]=IKsign(x1073);
j0eval[2]=((IKabs(((((-1.0)*r00*x1075))+(((-1.0)*r01*x1074)))))+(IKabs(((((-1.0)*r10*x1075))+(((-1.0)*r11*x1074))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1076=r21*r21;
IkReal x1077=(r21*sj5);
IkReal x1078=cj5*cj5;
IkReal x1079=((((-2.0)*cj5*r20*x1077))+x1076+(((-1.0)*x1076*x1078))+(r22*r22)+((x1078*(r20*r20))));
IkReal x1080=(sj1*sj2);
IkReal x1081=((1.0)*cj1*cj2);
IkReal x1082=(cj5*r20);
j4eval[0]=x1079;
j4eval[1]=IKsign(x1079);
j4eval[2]=((IKabs(((((-1.0)*sj1*sj2*x1082))+((cj1*cj2*x1082))+((x1077*x1080))+(((-1.0)*x1077*x1081)))))+(IKabs(((((-1.0)*r22*x1081))+((r22*x1080))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1083=(cj1*cj2);
IkReal x1084=(sj1*sj2);
IkReal x1085=((500.0)*px);
IkReal x1086=((212.5)*cj1);
IkReal x1087=(cj5*r01);
IkReal x1088=(r00*sj5);
IkReal x1089=((146.0)*cj1*cj2);
IkReal x1090=((146.0)*sj1*sj2);
CheckValue<IkReal> x1091=IKPowWithIntegerCheck(((((67.0)*x1084))+(((-67.0)*x1083))),-1);
if(!x1091.valid){
continue;
}
CheckValue<IkReal> x1092=IKPowWithIntegerCheck((x1084+(((-1.0)*x1083))),-1);
if(!x1092.valid){
continue;
}
if( IKabs(((x1091.value)*((((x1088*x1090))+((x1083*x1085))+(((-1.0)*x1086*x1087))+((x1087*x1090))+(((-1.0)*x1084*x1085))+(((-1.0)*x1086*x1088))+(((-1.0)*x1088*x1089))+(((-1.0)*x1087*x1089)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1092.value)*(((((-1.0)*x1087))+(((-1.0)*x1088)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1091.value)*((((x1088*x1090))+((x1083*x1085))+(((-1.0)*x1086*x1087))+((x1087*x1090))+(((-1.0)*x1084*x1085))+(((-1.0)*x1086*x1088))+(((-1.0)*x1088*x1089))+(((-1.0)*x1087*x1089))))))+IKsqr(((x1092.value)*(((((-1.0)*x1087))+(((-1.0)*x1088))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1091.value)*((((x1088*x1090))+((x1083*x1085))+(((-1.0)*x1086*x1087))+((x1087*x1090))+(((-1.0)*x1084*x1085))+(((-1.0)*x1086*x1088))+(((-1.0)*x1088*x1089))+(((-1.0)*x1087*x1089))))), ((x1092.value)*(((((-1.0)*x1087))+(((-1.0)*x1088))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1093=(cj5*r01);
IkReal x1094=(r00*sj5);
IkReal x1095=IKcos(j0);
IkReal x1096=(sj1*sj2);
IkReal x1097=(x1095*x1096);
IkReal x1098=(cj1*cj2*x1095);
IkReal x1099=(cj5*r11);
IkReal x1100=(r10*sj5);
IkReal x1101=IKsin(j0);
IkReal x1102=(x1096*x1101);
IkReal x1103=(cj1*cj2*x1101);
IkReal x1104=((0.425)*cj1);
evalcond[0]=(x1097+x1094+x1093+(((-1.0)*x1098)));
evalcond[1]=((((-1.0)*x1103))+x1102+x1100+x1099);
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.134)*x1101))+(((-0.1)*x1094))+(((-0.1)*x1093))+(((0.392)*x1098))+(((-0.392)*x1097))+((x1095*x1104)));
evalcond[3]=((((0.134)*x1095))+(((-1.0)*(1.0)*py))+(((-0.1)*x1099))+(((-0.1)*x1100))+(((-0.392)*x1102))+(((0.392)*x1103))+((x1101*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1105=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1105;
j4eval[1]=IKsign(x1105);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1106=((1.0)*cj5);
IkReal x1107=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1106)));
j4eval[0]=x1107;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1106))))));
j4eval[2]=IKsign(x1107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1108=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1109=((1.0)*cj0);
IkReal x1110=((1.0)*sj0);
j4eval[0]=x1108;
j4eval[1]=((IKabs(((((-1.0)*r02*x1109))+(((-1.0)*r12*x1110)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1110))+(((-1.0)*r01*sj5*x1109))))));
j4eval[2]=IKsign(x1108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1111=((1.0)*cj0);
IkReal x1112=((1.0)*sj0);
CheckValue<IkReal> x1113 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1111))+(((-1.0)*r12*x1112)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1111))+(((-1.0)*r11*sj5*x1112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1113.valid){
continue;
}
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1113.value)+(((1.5707963267949)*(x1114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1115=IKcos(j4);
IkReal x1116=((1.0)*r22);
IkReal x1117=IKsin(j4);
IkReal x1118=(sj5*x1117);
IkReal x1119=((1.0)*cj5*x1117);
IkReal x1120=((1.0)*r12);
IkReal x1121=((1.0)*sj0);
IkReal x1122=((1.0)*r02);
IkReal x1123=(cj5*x1115);
IkReal x1124=((1.0)*sj5*x1115);
IkReal x1125=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1119))+(((-1.0)*x1115*x1116))+((r21*x1118)));
evalcond[1]=(((r11*x1118))+(((-1.0)*r10*x1119))+cj0+(((-1.0)*x1115*x1120)));
evalcond[2]=((((-1.0)*x1121))+(((-1.0)*x1115*x1122))+((r01*x1118))+(((-1.0)*r00*x1119)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1116*x1117))+(((-1.0)*r21*x1124))+((r20*x1123))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1125))+((r00*x1123))+(((-1.0)*x1117*x1122))+(((-1.0)*r01*x1124)));
evalcond[5]=(((r10*x1123))+(((-1.0)*x1117*x1120))+(((-1.0)*x1121*x1125))+(((-1.0)*r11*x1124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1126=((1.0)*cj5);
CheckValue<IkReal> x1127 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1127.valid){
continue;
}
CheckValue<IkReal> x1128=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1126)))),-1);
if(!x1128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1127.value)+(((1.5707963267949)*(x1128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1129=IKcos(j4);
IkReal x1130=((1.0)*r22);
IkReal x1131=IKsin(j4);
IkReal x1132=(sj5*x1131);
IkReal x1133=((1.0)*cj5*x1131);
IkReal x1134=((1.0)*r12);
IkReal x1135=((1.0)*sj0);
IkReal x1136=((1.0)*r02);
IkReal x1137=(cj5*x1129);
IkReal x1138=((1.0)*sj5*x1129);
IkReal x1139=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1133))+(((-1.0)*x1129*x1130))+((r21*x1132)));
evalcond[1]=((((-1.0)*x1129*x1134))+cj0+((r11*x1132))+(((-1.0)*r10*x1133)));
evalcond[2]=(((r01*x1132))+(((-1.0)*x1129*x1136))+(((-1.0)*r00*x1133))+(((-1.0)*x1135)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1138))+((r20*x1137))+((sj1*sj2))+(((-1.0)*x1130*x1131)));
evalcond[4]=((((-1.0)*r01*x1138))+((r00*x1137))+(((-1.0)*cj0*x1139))+(((-1.0)*x1131*x1136)));
evalcond[5]=((((-1.0)*r11*x1138))+((r10*x1137))+(((-1.0)*x1131*x1134))+(((-1.0)*x1135*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1140=((1.0)*sj0);
CheckValue<IkReal> x1141=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1141.valid){
continue;
}
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1140)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1141.value)))+(x1142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1143=IKcos(j4);
IkReal x1144=((1.0)*r22);
IkReal x1145=IKsin(j4);
IkReal x1146=(sj5*x1145);
IkReal x1147=((1.0)*cj5*x1145);
IkReal x1148=((1.0)*r12);
IkReal x1149=((1.0)*sj0);
IkReal x1150=((1.0)*r02);
IkReal x1151=(cj5*x1143);
IkReal x1152=((1.0)*sj5*x1143);
IkReal x1153=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1143*x1144))+(((-1.0)*r20*x1147))+((r21*x1146)));
evalcond[1]=((((-1.0)*x1143*x1148))+((r11*x1146))+cj0+(((-1.0)*r10*x1147)));
evalcond[2]=((((-1.0)*x1149))+(((-1.0)*x1143*x1150))+(((-1.0)*r00*x1147))+((r01*x1146)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1144*x1145))+((r20*x1151))+((sj1*sj2))+(((-1.0)*r21*x1152)));
evalcond[4]=((((-1.0)*cj0*x1153))+(((-1.0)*r01*x1152))+(((-1.0)*x1145*x1150))+((r00*x1151)));
evalcond[5]=(((r10*x1151))+(((-1.0)*r11*x1152))+(((-1.0)*x1149*x1153))+(((-1.0)*x1145*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1154=r21*r21;
IkReal x1155=(r21*sj5);
IkReal x1156=cj5*cj5;
IkReal x1157=(sj1*sj2);
IkReal x1158=((1.0)*cj1*cj2);
IkReal x1159=(cj5*r20);
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(IKsign((x1154+(((-1.0)*x1154*x1156))+(((-2.0)*cj5*r20*x1155))+((x1156*(r20*r20)))+(r22*r22))),-1);
if(!x1160.valid){
continue;
}
CheckValue<IkReal> x1161 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1158))+((r22*x1157)))),IkReal(((((-1.0)*x1155*x1158))+((x1155*x1157))+((cj1*cj2*x1159))+(((-1.0)*sj1*sj2*x1159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1160.value)))+(x1161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1162=IKcos(j4);
IkReal x1163=((1.0)*r22);
IkReal x1164=IKsin(j4);
IkReal x1165=(r21*sj5);
IkReal x1166=(cj5*r20);
evalcond[0]=((((-1.0)*x1164*x1166))+((x1164*x1165))+(((-1.0)*x1162*x1163)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1162*x1165))+((x1162*x1166))+((sj1*sj2))+(((-1.0)*x1163*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1167=(sj4*sj5);
IkReal x1168=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1168))+((r01*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1168))+(((-1.0)*r11*x1167))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1168))+((r01*x1167))))+IKsqr((((r10*x1168))+(((-1.0)*r11*x1167))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x1168))+((r01*x1167))), (((r10*x1168))+(((-1.0)*r11*x1167))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1169=IKcos(j0);
IkReal x1170=((1.0)*cj4);
IkReal x1171=(sj4*sj5);
IkReal x1172=((1.0)*cj5*sj4);
IkReal x1173=IKsin(j0);
IkReal x1174=((1.0)*x1173);
IkReal x1175=(cj5*r01);
IkReal x1176=(r00*sj5);
IkReal x1177=(sj1*sj2);
IkReal x1178=(x1169*x1177);
IkReal x1179=(cj1*cj2);
IkReal x1180=((1.0)*x1169);
IkReal x1181=(cj5*r11);
IkReal x1182=(r10*sj5);
IkReal x1183=(x1173*x1177);
IkReal x1184=((1.0)*sj4);
IkReal x1185=(cj4*cj5);
IkReal x1186=((1.0)*cj4*sj5);
IkReal x1187=IKsin((j1+j2));
IkReal x1188=((0.425)*cj1);
IkReal x1189=((0.392)*cj1*cj2);
evalcond[0]=((((-1.0)*r12*x1170))+((r11*x1171))+x1169+(((-1.0)*r10*x1172)));
evalcond[1]=(((r01*x1171))+(((-1.0)*r02*x1170))+(((-1.0)*r00*x1172))+(((-1.0)*x1174)));
evalcond[2]=((((-1.0)*x1179*x1180))+x1178+x1175+x1176);
evalcond[3]=((((-1.0)*x1174*x1179))+x1181+x1182+x1183);
evalcond[4]=((((-1.0)*r01*x1186))+(((-1.0)*x1180*x1187))+((r00*x1185))+(((-1.0)*r02*x1184)));
evalcond[5]=(((r10*x1185))+(((-1.0)*x1174*x1187))+(((-1.0)*r11*x1186))+(((-1.0)*r12*x1184)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.392)*x1178))+(((-0.1)*x1175))+(((-0.1)*x1176))+((x1169*x1188))+((x1169*x1189))+(((-0.134)*x1173)));
evalcond[7]=(((x1173*x1188))+(((-1.0)*(1.0)*py))+(((-0.392)*x1183))+((x1173*x1189))+(((0.134)*x1169))+(((-0.1)*x1181))+(((-0.1)*x1182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1190=((1.0)*cj5);
IkReal x1191=((1.0)*sj5);
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1192.valid){
continue;
}
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1191))+(((-1.0)*r11*x1190)))),IkReal(((((-1.0)*r00*x1191))+(((-1.0)*r01*x1190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1192.value)))+(x1193.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1194=(cj5*r01);
IkReal x1195=(r00*sj5);
IkReal x1196=IKcos(j0);
IkReal x1197=(sj1*sj2);
IkReal x1198=(x1196*x1197);
IkReal x1199=(cj1*cj2*x1196);
IkReal x1200=(cj5*r11);
IkReal x1201=(r10*sj5);
IkReal x1202=IKsin(j0);
IkReal x1203=(x1197*x1202);
IkReal x1204=(cj1*cj2*x1202);
IkReal x1205=((0.425)*cj1);
evalcond[0]=(x1195+x1194+x1198+(((-1.0)*x1199)));
evalcond[1]=((((-1.0)*x1204))+x1200+x1203+x1201);
evalcond[2]=((((-1.0)*(1.0)*px))+((x1196*x1205))+(((-0.392)*x1198))+(((-0.1)*x1195))+(((-0.134)*x1202))+(((0.392)*x1199))+(((-0.1)*x1194)));
evalcond[3]=((((-0.392)*x1203))+(((-1.0)*(1.0)*py))+(((-0.1)*x1200))+(((-0.1)*x1201))+(((0.134)*x1196))+(((0.392)*x1204))+((x1202*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1206=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1206;
j4eval[1]=IKsign(x1206);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1207=((1.0)*cj5);
IkReal x1208=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1207)));
j4eval[0]=x1208;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1207))))));
j4eval[2]=IKsign(x1208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1209=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1210=((1.0)*cj0);
IkReal x1211=((1.0)*sj0);
j4eval[0]=x1209;
j4eval[1]=((IKabs(((((-1.0)*r12*x1211))+(((-1.0)*r02*x1210)))))+(IKabs(((((-1.0)*r01*sj5*x1210))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1211))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1212=((1.0)*cj0);
IkReal x1213=((1.0)*sj0);
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1214.valid){
continue;
}
CheckValue<IkReal> x1215 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1212))+(((-1.0)*r12*x1213)))),IkReal(((((-1.0)*r11*sj5*x1213))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1214.value)))+(x1215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j4);
IkReal x1217=((1.0)*r22);
IkReal x1218=IKsin(j4);
IkReal x1219=(sj5*x1218);
IkReal x1220=((1.0)*cj5*x1218);
IkReal x1221=((1.0)*r12);
IkReal x1222=((1.0)*sj0);
IkReal x1223=((1.0)*r02);
IkReal x1224=(cj5*x1216);
IkReal x1225=((1.0)*sj5*x1216);
IkReal x1226=IKsin((j1+j2));
evalcond[0]=(((r21*x1219))+(((-1.0)*x1216*x1217))+(((-1.0)*r20*x1220)));
evalcond[1]=((((-1.0)*x1216*x1221))+cj0+((r11*x1219))+(((-1.0)*r10*x1220)));
evalcond[2]=(((r01*x1219))+(((-1.0)*x1222))+(((-1.0)*x1216*x1223))+(((-1.0)*r00*x1220)));
evalcond[3]=((((-1.0)*x1217*x1218))+(((-1.0)*(1.0)*cj1*cj2))+((r20*x1224))+(((-1.0)*r21*x1225))+((sj1*sj2)));
evalcond[4]=(((r00*x1224))+(((-1.0)*r01*x1225))+(((-1.0)*cj0*x1226))+(((-1.0)*x1218*x1223)));
evalcond[5]=((((-1.0)*r11*x1225))+(((-1.0)*x1218*x1221))+((r10*x1224))+(((-1.0)*x1222*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1227=((1.0)*cj5);
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1227)))),-1);
if(!x1228.valid){
continue;
}
CheckValue<IkReal> x1229 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1228.value)))+(x1229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1230=IKcos(j4);
IkReal x1231=((1.0)*r22);
IkReal x1232=IKsin(j4);
IkReal x1233=(sj5*x1232);
IkReal x1234=((1.0)*cj5*x1232);
IkReal x1235=((1.0)*r12);
IkReal x1236=((1.0)*sj0);
IkReal x1237=((1.0)*r02);
IkReal x1238=(cj5*x1230);
IkReal x1239=((1.0)*sj5*x1230);
IkReal x1240=IKsin((j1+j2));
evalcond[0]=(((r21*x1233))+(((-1.0)*r20*x1234))+(((-1.0)*x1230*x1231)));
evalcond[1]=((((-1.0)*r10*x1234))+cj0+(((-1.0)*x1230*x1235))+((r11*x1233)));
evalcond[2]=(((r01*x1233))+(((-1.0)*x1236))+(((-1.0)*x1230*x1237))+(((-1.0)*r00*x1234)));
evalcond[3]=(((r20*x1238))+(((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1239))+(((-1.0)*x1231*x1232))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1240))+(((-1.0)*r01*x1239))+(((-1.0)*x1232*x1237))+((r00*x1238)));
evalcond[5]=((((-1.0)*x1236*x1240))+(((-1.0)*x1232*x1235))+(((-1.0)*r11*x1239))+((r10*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1241=((1.0)*sj0);
CheckValue<IkReal> x1242 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1241)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1242.valid){
continue;
}
CheckValue<IkReal> x1243=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1242.value)+(((1.5707963267949)*(x1243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1244=IKcos(j4);
IkReal x1245=((1.0)*r22);
IkReal x1246=IKsin(j4);
IkReal x1247=(sj5*x1246);
IkReal x1248=((1.0)*cj5*x1246);
IkReal x1249=((1.0)*r12);
IkReal x1250=((1.0)*sj0);
IkReal x1251=((1.0)*r02);
IkReal x1252=(cj5*x1244);
IkReal x1253=((1.0)*sj5*x1244);
IkReal x1254=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1244*x1245))+(((-1.0)*r20*x1248))+((r21*x1247)));
evalcond[1]=(cj0+(((-1.0)*x1244*x1249))+((r11*x1247))+(((-1.0)*r10*x1248)));
evalcond[2]=(((r01*x1247))+(((-1.0)*x1250))+(((-1.0)*r00*x1248))+(((-1.0)*x1244*x1251)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1252))+(((-1.0)*x1245*x1246))+(((-1.0)*r21*x1253))+((sj1*sj2)));
evalcond[4]=(((r00*x1252))+(((-1.0)*r01*x1253))+(((-1.0)*cj0*x1254))+(((-1.0)*x1246*x1251)));
evalcond[5]=((((-1.0)*x1246*x1249))+(((-1.0)*x1250*x1254))+((r10*x1252))+(((-1.0)*r11*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1255=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1255;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1255);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1256=r21*r21;
IkReal x1257=(cj5*r20);
IkReal x1258=cj5*cj5;
IkReal x1259=(((x1258*(r20*r20)))+x1256+(((-1.0)*x1256*x1258))+(((-2.0)*r21*sj5*x1257))+(r22*r22));
IkReal x1260=(cj1*cj2);
IkReal x1261=((1.0)*sj1*sj2);
IkReal x1262=(r21*sj5);
j4eval[0]=x1259;
j4eval[1]=IKsign(x1259);
j4eval[2]=((IKabs(((((-1.0)*r22*x1261))+((r22*x1260)))))+(IKabs((((x1260*x1262))+((sj1*sj2*x1257))+(((-1.0)*x1261*x1262))+(((-1.0)*cj1*cj2*x1257))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1263=(cj1*cj2);
IkReal x1264=(sj1*sj2);
IkReal x1265=((500.0)*px);
IkReal x1266=((212.5)*cj1);
IkReal x1267=(cj5*r01);
IkReal x1268=(r00*sj5);
IkReal x1269=((246.0)*cj1*cj2);
IkReal x1270=((246.0)*sj1*sj2);
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(((((-67.0)*x1263))+(((67.0)*x1264))),-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(((((-1.0)*x1263))+x1264),-1);
if(!x1272.valid){
continue;
}
if( IKabs(((x1271.value)*(((((-1.0)*x1268*x1270))+((x1266*x1268))+(((-1.0)*x1267*x1270))+((x1267*x1269))+((x1268*x1269))+((x1266*x1267))+((x1263*x1265))+(((-1.0)*x1264*x1265)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1272.value)*((x1267+x1268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1271.value)*(((((-1.0)*x1268*x1270))+((x1266*x1268))+(((-1.0)*x1267*x1270))+((x1267*x1269))+((x1268*x1269))+((x1266*x1267))+((x1263*x1265))+(((-1.0)*x1264*x1265))))))+IKsqr(((x1272.value)*((x1267+x1268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1271.value)*(((((-1.0)*x1268*x1270))+((x1266*x1268))+(((-1.0)*x1267*x1270))+((x1267*x1269))+((x1268*x1269))+((x1266*x1267))+((x1263*x1265))+(((-1.0)*x1264*x1265))))), ((x1272.value)*((x1267+x1268))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1273=(cj5*r01);
IkReal x1274=(r00*sj5);
IkReal x1275=IKcos(j0);
IkReal x1276=(sj1*sj2);
IkReal x1277=(x1275*x1276);
IkReal x1278=(cj1*cj2*x1275);
IkReal x1279=(cj5*r11);
IkReal x1280=(r10*sj5);
IkReal x1281=IKsin(j0);
IkReal x1282=(x1276*x1281);
IkReal x1283=(cj1*cj2*x1281);
IkReal x1284=((0.425)*cj1);
evalcond[0]=(x1277+(((-1.0)*x1273))+(((-1.0)*x1274))+(((-1.0)*x1278)));
evalcond[1]=((((-1.0)*x1283))+x1282+(((-1.0)*x1279))+(((-1.0)*x1280)));
evalcond[2]=((((-0.134)*x1281))+(((-0.392)*x1277))+(((-1.0)*(1.0)*px))+(((-0.1)*x1274))+(((0.392)*x1278))+((x1275*x1284))+(((-0.1)*x1273)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.392)*x1283))+((x1281*x1284))+(((0.134)*x1275))+(((-0.1)*x1280))+(((-0.392)*x1282))+(((-0.1)*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1285=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1285;
j4eval[1]=IKsign(x1285);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1286=((1.0)*cj5);
IkReal x1287=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1286)));
j4eval[0]=x1287;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1286)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1288=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1289=((1.0)*cj0);
IkReal x1290=((1.0)*sj0);
j4eval[0]=x1288;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1290))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1289))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x1290))+(((-1.0)*r02*x1289))))));
j4eval[2]=IKsign(x1288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1291=((1.0)*cj0);
IkReal x1292=((1.0)*sj0);
CheckValue<IkReal> x1293 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1291))+(((-1.0)*r12*x1292)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1292))+(((-1.0)*r01*sj5*x1291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1293.valid){
continue;
}
CheckValue<IkReal> x1294=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1293.value)+(((1.5707963267949)*(x1294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1295=IKcos(j4);
IkReal x1296=((1.0)*x1295);
IkReal x1297=IKsin(j4);
IkReal x1298=(r21*sj5);
IkReal x1299=(cj5*r20);
IkReal x1300=((1.0)*x1297);
IkReal x1301=(r11*sj5);
IkReal x1302=(cj5*r10);
IkReal x1303=((1.0)*sj0);
IkReal x1304=(r01*sj5);
IkReal x1305=(cj5*r00);
IkReal x1306=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1299*x1300))+(((-1.0)*r22*x1296))+((x1297*x1298)));
evalcond[1]=(((x1297*x1301))+cj0+(((-1.0)*r12*x1296))+(((-1.0)*x1300*x1302)));
evalcond[2]=(((x1297*x1304))+(((-1.0)*x1303))+(((-1.0)*r02*x1296))+(((-1.0)*x1300*x1305)));
evalcond[3]=(((r22*x1297))+(((-1.0)*(1.0)*cj1*cj2))+((x1295*x1298))+(((-1.0)*x1296*x1299))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1296*x1305))+(((-1.0)*cj0*x1306))+((r02*x1297))+((x1295*x1304)));
evalcond[5]=((((-1.0)*x1303*x1306))+((r12*x1297))+(((-1.0)*x1296*x1302))+((x1295*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1307=((1.0)*cj5);
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1307)))),-1);
if(!x1308.valid){
continue;
}
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1307)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1308.value)))+(x1309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1310=IKcos(j4);
IkReal x1311=((1.0)*x1310);
IkReal x1312=IKsin(j4);
IkReal x1313=(r21*sj5);
IkReal x1314=(cj5*r20);
IkReal x1315=((1.0)*x1312);
IkReal x1316=(r11*sj5);
IkReal x1317=(cj5*r10);
IkReal x1318=((1.0)*sj0);
IkReal x1319=(r01*sj5);
IkReal x1320=(cj5*r00);
IkReal x1321=IKsin((j1+j2));
evalcond[0]=(((x1312*x1313))+(((-1.0)*x1314*x1315))+(((-1.0)*r22*x1311)));
evalcond[1]=(((x1312*x1316))+(((-1.0)*r12*x1311))+cj0+(((-1.0)*x1315*x1317)));
evalcond[2]=((((-1.0)*x1318))+((x1312*x1319))+(((-1.0)*x1315*x1320))+(((-1.0)*r02*x1311)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1311*x1314))+((x1310*x1313))+((sj1*sj2))+((r22*x1312)));
evalcond[4]=((((-1.0)*cj0*x1321))+(((-1.0)*x1311*x1320))+((x1310*x1319))+((r02*x1312)));
evalcond[5]=(((x1310*x1316))+(((-1.0)*x1311*x1317))+(((-1.0)*x1318*x1321))+((r12*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1322=((1.0)*sj0);
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1323.valid){
continue;
}
CheckValue<IkReal> x1324 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1322)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1323.value)))+(x1324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1325=IKcos(j4);
IkReal x1326=((1.0)*x1325);
IkReal x1327=IKsin(j4);
IkReal x1328=(r21*sj5);
IkReal x1329=(cj5*r20);
IkReal x1330=((1.0)*x1327);
IkReal x1331=(r11*sj5);
IkReal x1332=(cj5*r10);
IkReal x1333=((1.0)*sj0);
IkReal x1334=(r01*sj5);
IkReal x1335=(cj5*r00);
IkReal x1336=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1326))+((x1327*x1328))+(((-1.0)*x1329*x1330)));
evalcond[1]=((((-1.0)*r12*x1326))+((x1327*x1331))+cj0+(((-1.0)*x1330*x1332)));
evalcond[2]=((((-1.0)*x1333))+(((-1.0)*r02*x1326))+(((-1.0)*x1330*x1335))+((x1327*x1334)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1325*x1328))+((r22*x1327))+((sj1*sj2))+(((-1.0)*x1326*x1329)));
evalcond[4]=((((-1.0)*cj0*x1336))+((x1325*x1334))+(((-1.0)*x1326*x1335))+((r02*x1327)));
evalcond[5]=(((r12*x1327))+(((-1.0)*x1326*x1332))+((x1325*x1331))+(((-1.0)*x1333*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1337=r21*r21;
IkReal x1338=(cj5*r20);
IkReal x1339=cj5*cj5;
IkReal x1340=(cj1*cj2);
IkReal x1341=((1.0)*sj1*sj2);
IkReal x1342=(r21*sj5);
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1341))+((r22*x1340)))),IkReal((((x1340*x1342))+(((-1.0)*cj1*cj2*x1338))+(((-1.0)*x1341*x1342))+((sj1*sj2*x1338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1337*x1339))+((x1339*(r20*r20)))+x1337+(((-2.0)*r21*sj5*x1338))+(r22*r22))),-1);
if(!x1344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1343.value)+(((1.5707963267949)*(x1344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1345=IKcos(j4);
IkReal x1346=((1.0)*x1345);
IkReal x1347=IKsin(j4);
IkReal x1348=(r21*sj5);
IkReal x1349=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1346))+((x1347*x1348))+(((-1.0)*x1347*x1349)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1346*x1349))+((x1345*x1348))+((sj1*sj2))+((r22*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1350=(sj4*sj5);
IkReal x1351=(cj5*sj4);
if( IKabs((((r01*x1350))+(((-1.0)*r00*x1351))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1350))+((r10*x1351))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1350))+(((-1.0)*r00*x1351))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr(((((-1.0)*r11*x1350))+((r10*x1351))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1350))+(((-1.0)*r00*x1351))+(((-1.0)*(1.0)*cj4*r02))), ((((-1.0)*r11*x1350))+((r10*x1351))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1352=IKcos(j0);
IkReal x1353=((1.0)*cj4);
IkReal x1354=(sj4*sj5);
IkReal x1355=((1.0)*cj5*sj4);
IkReal x1356=IKsin(j0);
IkReal x1357=((1.0)*x1356);
IkReal x1358=(cj5*r01);
IkReal x1359=(r00*sj5);
IkReal x1360=(sj1*sj2);
IkReal x1361=(x1352*x1360);
IkReal x1362=(cj1*cj2);
IkReal x1363=((1.0)*x1352);
IkReal x1364=(cj5*r11);
IkReal x1365=(r10*sj5);
IkReal x1366=(x1356*x1360);
IkReal x1367=(cj4*sj5);
IkReal x1368=((1.0)*cj4*cj5);
IkReal x1369=IKsin((j1+j2));
IkReal x1370=((0.425)*cj1);
IkReal x1371=((0.392)*cj1*cj2);
evalcond[0]=((((-1.0)*r10*x1355))+x1352+((r11*x1354))+(((-1.0)*r12*x1353)));
evalcond[1]=(((r01*x1354))+(((-1.0)*x1357))+(((-1.0)*r02*x1353))+(((-1.0)*r00*x1355)));
evalcond[2]=((((-1.0)*x1359))+(((-1.0)*x1362*x1363))+x1361+(((-1.0)*x1358)));
evalcond[3]=((((-1.0)*x1365))+(((-1.0)*x1357*x1362))+x1366+(((-1.0)*x1364)));
evalcond[4]=((((-1.0)*r00*x1368))+((r01*x1367))+(((-1.0)*x1363*x1369))+((r02*sj4)));
evalcond[5]=(((r12*sj4))+((r11*x1367))+(((-1.0)*x1357*x1369))+(((-1.0)*r10*x1368)));
evalcond[6]=((((-1.0)*(1.0)*px))+((x1352*x1371))+(((-0.1)*x1359))+((x1352*x1370))+(((-0.134)*x1356))+(((-0.392)*x1361))+(((-0.1)*x1358)));
evalcond[7]=((((-1.0)*(1.0)*py))+((x1356*x1371))+(((-0.392)*x1366))+(((0.134)*x1352))+((x1356*x1370))+(((-0.1)*x1365))+(((-0.1)*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1372=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1372.valid){
continue;
}
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1372.value)))+(x1373.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1374=(cj5*r01);
IkReal x1375=(r00*sj5);
IkReal x1376=IKcos(j0);
IkReal x1377=(sj1*sj2);
IkReal x1378=(x1376*x1377);
IkReal x1379=(cj1*cj2*x1376);
IkReal x1380=(cj5*r11);
IkReal x1381=(r10*sj5);
IkReal x1382=IKsin(j0);
IkReal x1383=(x1377*x1382);
IkReal x1384=(cj1*cj2*x1382);
IkReal x1385=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1375))+x1378+(((-1.0)*x1374))+(((-1.0)*x1379)));
evalcond[1]=((((-1.0)*x1384))+(((-1.0)*x1380))+(((-1.0)*x1381))+x1383);
evalcond[2]=((((-0.134)*x1382))+(((-1.0)*(1.0)*px))+(((0.392)*x1379))+(((-0.1)*x1375))+(((-0.1)*x1374))+((x1376*x1385))+(((-0.392)*x1378)));
evalcond[3]=((((-0.1)*x1380))+(((-1.0)*(1.0)*py))+(((-0.1)*x1381))+(((-0.392)*x1383))+(((0.392)*x1384))+((x1382*x1385))+(((0.134)*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1386=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1386;
j4eval[1]=IKsign(x1386);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1387=((1.0)*cj5);
IkReal x1388=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1387)));
j4eval[0]=x1388;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1387))))));
j4eval[2]=IKsign(x1388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1389=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1390=((1.0)*cj0);
IkReal x1391=((1.0)*sj0);
j4eval[0]=x1389;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1391))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1390)))))+(IKabs(((((-1.0)*r02*x1390))+(((-1.0)*r12*x1391))))));
j4eval[2]=IKsign(x1389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1392=((1.0)*cj0);
IkReal x1393=((1.0)*sj0);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1394.valid){
continue;
}
CheckValue<IkReal> x1395 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1392))+(((-1.0)*r12*x1393)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1393))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1394.value)))+(x1395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1396=IKcos(j4);
IkReal x1397=((1.0)*x1396);
IkReal x1398=IKsin(j4);
IkReal x1399=(r21*sj5);
IkReal x1400=(cj5*r20);
IkReal x1401=((1.0)*x1398);
IkReal x1402=(r11*sj5);
IkReal x1403=(cj5*r10);
IkReal x1404=((1.0)*sj0);
IkReal x1405=(r01*sj5);
IkReal x1406=(cj5*r00);
IkReal x1407=IKsin((j1+j2));
evalcond[0]=(((x1398*x1399))+(((-1.0)*r22*x1397))+(((-1.0)*x1400*x1401)));
evalcond[1]=((((-1.0)*x1401*x1403))+((x1398*x1402))+(((-1.0)*r12*x1397))+cj0);
evalcond[2]=((((-1.0)*r02*x1397))+(((-1.0)*x1401*x1406))+(((-1.0)*x1404))+((x1398*x1405)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1397*x1400))+((r22*x1398))+((sj1*sj2))+((x1396*x1399)));
evalcond[4]=((((-1.0)*cj0*x1407))+((x1396*x1405))+(((-1.0)*x1397*x1406))+((r02*x1398)));
evalcond[5]=((((-1.0)*x1397*x1403))+((x1396*x1402))+((r12*x1398))+(((-1.0)*x1404*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1408=((1.0)*cj5);
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1408))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1409.value)))+(x1410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1411=IKcos(j4);
IkReal x1412=((1.0)*x1411);
IkReal x1413=IKsin(j4);
IkReal x1414=(r21*sj5);
IkReal x1415=(cj5*r20);
IkReal x1416=((1.0)*x1413);
IkReal x1417=(r11*sj5);
IkReal x1418=(cj5*r10);
IkReal x1419=((1.0)*sj0);
IkReal x1420=(r01*sj5);
IkReal x1421=(cj5*r00);
IkReal x1422=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1415*x1416))+((x1413*x1414))+(((-1.0)*r22*x1412)));
evalcond[1]=((((-1.0)*r12*x1412))+(((-1.0)*x1416*x1418))+((x1413*x1417))+cj0);
evalcond[2]=((((-1.0)*x1416*x1421))+(((-1.0)*r02*x1412))+((x1413*x1420))+(((-1.0)*x1419)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1411*x1414))+(((-1.0)*x1412*x1415))+((r22*x1413))+((sj1*sj2)));
evalcond[4]=(((r02*x1413))+(((-1.0)*x1412*x1421))+((x1411*x1420))+(((-1.0)*cj0*x1422)));
evalcond[5]=((((-1.0)*x1419*x1422))+((x1411*x1417))+((r12*x1413))+(((-1.0)*x1412*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1423=((1.0)*sj0);
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1424.valid){
continue;
}
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1423)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1424.value)))+(x1425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1426=IKcos(j4);
IkReal x1427=((1.0)*x1426);
IkReal x1428=IKsin(j4);
IkReal x1429=(r21*sj5);
IkReal x1430=(cj5*r20);
IkReal x1431=((1.0)*x1428);
IkReal x1432=(r11*sj5);
IkReal x1433=(cj5*r10);
IkReal x1434=((1.0)*sj0);
IkReal x1435=(r01*sj5);
IkReal x1436=(cj5*r00);
IkReal x1437=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1430*x1431))+((x1428*x1429))+(((-1.0)*r22*x1427)));
evalcond[1]=((((-1.0)*r12*x1427))+(((-1.0)*x1431*x1433))+cj0+((x1428*x1432)));
evalcond[2]=((((-1.0)*r02*x1427))+(((-1.0)*x1431*x1436))+((x1428*x1435))+(((-1.0)*x1434)));
evalcond[3]=((((-1.0)*x1427*x1430))+(((-1.0)*(1.0)*cj1*cj2))+((x1426*x1429))+((r22*x1428))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1437))+((r02*x1428))+(((-1.0)*x1427*x1436))+((x1426*x1435)));
evalcond[5]=(((r12*x1428))+(((-1.0)*x1427*x1433))+((x1426*x1432))+(((-1.0)*x1434*x1437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1438=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x1439=((1.0)*cj5);
IkReal x1440=((1.0)*sj5);
j0eval[0]=x1438;
j0eval[1]=((IKabs(((((-1.0)*r10*x1440))+(((-1.0)*r11*x1439)))))+(IKabs(((((-1.0)*r00*x1440))+(((-1.0)*r01*x1439))))));
j0eval[2]=IKsign(x1438);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1441=r21*r21;
IkReal x1442=(cj5*r20);
IkReal x1443=cj5*cj5;
IkReal x1444=((((-1.0)*x1441*x1443))+(((-2.0)*r21*sj5*x1442))+x1441+(r22*r22)+((x1443*(r20*r20))));
IkReal x1445=(cj1*sj2);
IkReal x1446=(cj2*sj1);
IkReal x1447=((1.0)*r21*sj5);
j4eval[0]=x1444;
j4eval[1]=IKsign(x1444);
j4eval[2]=((IKabs((((x1442*x1446))+(((-1.0)*x1445*x1447))+(((-1.0)*x1446*x1447))+((x1442*x1445)))))+(IKabs((((r22*x1446))+((r22*x1445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1448=(cj1*sj2);
IkReal x1449=(cj2*sj1);
IkReal x1450=((212.5)*cj1);
IkReal x1451=(cj5*r01);
IkReal x1452=((500.0)*px);
IkReal x1453=(r00*sj5);
IkReal x1454=((50.0)*cj1*sj2);
IkReal x1455=((50.0)*cj2*sj1);
IkReal x1456=((196.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(((((-67.0)*x1449))+(((-67.0)*x1448))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(((((-1.0)*x1448))+(((-1.0)*x1449))),-1);
if(!x1458.valid){
continue;
}
if( IKabs(((x1457.value)*((((x1451*x1454))+((x1449*x1452))+((x1448*x1452))+((x1451*x1455))+((x1453*x1454))+(((-1.0)*x1450*x1451))+(((-1.0)*x1450*x1453))+(((-1.0)*x1451*x1456))+((x1453*x1455))+(((-1.0)*x1453*x1456)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1458.value)*(((((-1.0)*x1451))+(((-1.0)*x1453)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1457.value)*((((x1451*x1454))+((x1449*x1452))+((x1448*x1452))+((x1451*x1455))+((x1453*x1454))+(((-1.0)*x1450*x1451))+(((-1.0)*x1450*x1453))+(((-1.0)*x1451*x1456))+((x1453*x1455))+(((-1.0)*x1453*x1456))))))+IKsqr(((x1458.value)*(((((-1.0)*x1451))+(((-1.0)*x1453))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1457.value)*((((x1451*x1454))+((x1449*x1452))+((x1448*x1452))+((x1451*x1455))+((x1453*x1454))+(((-1.0)*x1450*x1451))+(((-1.0)*x1450*x1453))+(((-1.0)*x1451*x1456))+((x1453*x1455))+(((-1.0)*x1453*x1456))))), ((x1458.value)*(((((-1.0)*x1451))+(((-1.0)*x1453))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1459=(cj5*r01);
IkReal x1460=(r00*sj5);
IkReal x1461=IKcos(j0);
IkReal x1462=((1.0)*cj1*sj2);
IkReal x1463=((1.0)*cj2*sj1);
IkReal x1464=(cj5*r11);
IkReal x1465=(r10*sj5);
IkReal x1466=IKsin(j0);
IkReal x1467=((0.425)*cj1);
IkReal x1468=((0.392)*(IKcos((j1+j2))));
evalcond[0]=(x1460+(((-1.0)*x1461*x1462))+x1459+(((-1.0)*x1461*x1463)));
evalcond[1]=((((-1.0)*x1463*x1466))+x1465+x1464+(((-1.0)*x1462*x1466)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1)*x1460))+(((-0.134)*x1466))+((x1461*x1467))+(((-0.1)*x1459))+((x1461*x1468)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1)*x1465))+(((-0.1)*x1464))+(((0.134)*x1461))+((x1466*x1467))+((x1466*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1469=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1469;
j4eval[1]=IKsign(x1469);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1470=((1.0)*cj5);
IkReal x1471=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1470)));
j4eval[0]=x1471;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1470))))));
j4eval[2]=IKsign(x1471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1472=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1473=((1.0)*cj0);
IkReal x1474=((1.0)*sj0);
j4eval[0]=x1472;
j4eval[1]=((IKabs(((((-1.0)*r02*x1473))+(((-1.0)*r12*x1474)))))+(IKabs(((((-1.0)*r01*sj5*x1473))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1474))))));
j4eval[2]=IKsign(x1472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1475=((1.0)*cj0);
IkReal x1476=((1.0)*sj0);
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1475))+(((-1.0)*r12*x1476)))),IkReal(((((-1.0)*r11*sj5*x1476))+(((-1.0)*r01*sj5*x1475))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1477.value)+(((1.5707963267949)*(x1478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1479=IKcos(j4);
IkReal x1480=((1.0)*x1479);
IkReal x1481=IKsin(j4);
IkReal x1482=(r21*sj5);
IkReal x1483=(cj5*r20);
IkReal x1484=((1.0)*x1481);
IkReal x1485=(r11*sj5);
IkReal x1486=(cj5*r10);
IkReal x1487=((1.0)*sj0);
IkReal x1488=(r01*sj5);
IkReal x1489=(cj5*r00);
IkReal x1490=IKcos((j1+j2));
evalcond[0]=(((x1481*x1482))+(((-1.0)*x1483*x1484))+(((-1.0)*r22*x1480)));
evalcond[1]=(((x1481*x1485))+cj0+(((-1.0)*x1484*x1486))+(((-1.0)*r12*x1480)));
evalcond[2]=((((-1.0)*r02*x1480))+((x1481*x1488))+(((-1.0)*x1487))+(((-1.0)*x1484*x1489)));
evalcond[3]=(((x1479*x1482))+((cj1*sj2))+(((-1.0)*x1480*x1483))+((r22*x1481))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1480*x1489))+((x1479*x1488))+((r02*x1481))+(((-1.0)*cj0*x1490)));
evalcond[5]=(((r12*x1481))+((x1479*x1485))+(((-1.0)*x1487*x1490))+(((-1.0)*x1480*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1491=((1.0)*cj5);
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1491)))),-1);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1492.value)))+(x1493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKcos(j4);
IkReal x1495=((1.0)*x1494);
IkReal x1496=IKsin(j4);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r20);
IkReal x1499=((1.0)*x1496);
IkReal x1500=(r11*sj5);
IkReal x1501=(cj5*r10);
IkReal x1502=((1.0)*sj0);
IkReal x1503=(r01*sj5);
IkReal x1504=(cj5*r00);
IkReal x1505=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1495))+(((-1.0)*x1498*x1499))+((x1496*x1497)));
evalcond[1]=((((-1.0)*r12*x1495))+(((-1.0)*x1499*x1501))+cj0+((x1496*x1500)));
evalcond[2]=((((-1.0)*x1502))+(((-1.0)*r02*x1495))+(((-1.0)*x1499*x1504))+((x1496*x1503)));
evalcond[3]=(((cj1*sj2))+((r22*x1496))+(((-1.0)*x1495*x1498))+((x1494*x1497))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1505))+(((-1.0)*x1495*x1504))+((x1494*x1503))+((r02*x1496)));
evalcond[5]=((((-1.0)*x1502*x1505))+(((-1.0)*x1495*x1501))+((x1494*x1500))+((r12*x1496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1506=((1.0)*sj0);
CheckValue<IkReal> x1507=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1507.valid){
continue;
}
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1506)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1507.value)))+(x1508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1509=IKcos(j4);
IkReal x1510=((1.0)*x1509);
IkReal x1511=IKsin(j4);
IkReal x1512=(r21*sj5);
IkReal x1513=(cj5*r20);
IkReal x1514=((1.0)*x1511);
IkReal x1515=(r11*sj5);
IkReal x1516=(cj5*r10);
IkReal x1517=((1.0)*sj0);
IkReal x1518=(r01*sj5);
IkReal x1519=(cj5*r00);
IkReal x1520=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1510))+(((-1.0)*x1513*x1514))+((x1511*x1512)));
evalcond[1]=(((x1511*x1515))+(((-1.0)*x1514*x1516))+cj0+(((-1.0)*r12*x1510)));
evalcond[2]=((((-1.0)*x1514*x1519))+((x1511*x1518))+(((-1.0)*x1517))+(((-1.0)*r02*x1510)));
evalcond[3]=((((-1.0)*x1510*x1513))+((cj1*sj2))+((r22*x1511))+((x1509*x1512))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1520))+((r02*x1511))+(((-1.0)*x1510*x1519))+((x1509*x1518)));
evalcond[5]=(((r12*x1511))+((x1509*x1515))+(((-1.0)*x1517*x1520))+(((-1.0)*x1510*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1521=r21*r21;
IkReal x1522=(cj5*r20);
IkReal x1523=cj5*cj5;
IkReal x1524=((1.0)*r22);
IkReal x1525=(cj1*sj2);
IkReal x1526=(cj2*sj1);
IkReal x1527=((1.0)*r21*sj5);
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal(((((-1.0)*x1524*x1525))+(((-1.0)*x1524*x1526)))),IkReal(((((-1.0)*x1525*x1527))+(((-1.0)*x1526*x1527))+((x1522*x1526))+((x1522*x1525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
CheckValue<IkReal> x1529=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*r21*sj5*x1522))+x1521+((x1523*(r20*r20)))+(((-1.0)*x1521*x1523)))),-1);
if(!x1529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1528.value)+(((1.5707963267949)*(x1529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1530=IKcos(j4);
IkReal x1531=((1.0)*x1530);
IkReal x1532=IKsin(j4);
IkReal x1533=(r21*sj5);
IkReal x1534=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1531))+((x1532*x1533))+(((-1.0)*x1532*x1534)));
evalcond[1]=(((x1530*x1533))+((cj1*sj2))+(((-1.0)*x1531*x1534))+((r22*x1532))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1535=(sj4*sj5);
IkReal x1536=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1536))+((r01*x1535))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1535))+((r10*x1536))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1536))+((r01*x1535))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr(((((-1.0)*r11*x1535))+((r10*x1536))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1536))+((r01*x1535))+(((-1.0)*(1.0)*cj4*r02))), ((((-1.0)*r11*x1535))+((r10*x1536))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1537=IKcos(j0);
IkReal x1538=((1.0)*cj4);
IkReal x1539=(sj4*sj5);
IkReal x1540=((1.0)*cj5*sj4);
IkReal x1541=IKsin(j0);
IkReal x1542=((1.0)*x1541);
IkReal x1543=(cj5*r01);
IkReal x1544=(r00*sj5);
IkReal x1545=(cj1*sj2);
IkReal x1546=((1.0)*x1537);
IkReal x1547=(cj2*sj1);
IkReal x1548=(cj5*r11);
IkReal x1549=(r10*sj5);
IkReal x1550=(cj4*sj5);
IkReal x1551=((1.0)*cj4*cj5);
IkReal x1552=IKcos((j1+j2));
IkReal x1553=((0.425)*cj1);
IkReal x1554=((0.392)*x1552);
evalcond[0]=((((-1.0)*r12*x1538))+((r11*x1539))+x1537+(((-1.0)*r10*x1540)));
evalcond[1]=((((-1.0)*r02*x1538))+(((-1.0)*r00*x1540))+(((-1.0)*x1542))+((r01*x1539)));
evalcond[2]=((((-1.0)*x1546*x1547))+(((-1.0)*x1545*x1546))+x1543+x1544);
evalcond[3]=(x1548+x1549+(((-1.0)*x1542*x1545))+(((-1.0)*x1542*x1547)));
evalcond[4]=((((-1.0)*x1546*x1552))+((r02*sj4))+(((-1.0)*r00*x1551))+((r01*x1550)));
evalcond[5]=(((r12*sj4))+(((-1.0)*r10*x1551))+((r11*x1550))+(((-1.0)*x1542*x1552)));
evalcond[6]=((((-1.0)*(1.0)*px))+((x1537*x1553))+(((-0.134)*x1541))+((x1537*x1554))+(((-0.1)*x1543))+(((-0.1)*x1544)));
evalcond[7]=((((-0.1)*x1548))+(((-1.0)*(1.0)*py))+((x1541*x1553))+(((-0.1)*x1549))+((x1541*x1554))+(((0.134)*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1555=((1.0)*cj5);
IkReal x1556=((1.0)*sj5);
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1557.valid){
continue;
}
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1556))+(((-1.0)*r11*x1555)))),IkReal(((((-1.0)*r01*x1555))+(((-1.0)*r00*x1556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1557.value)))+(x1558.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1559=(cj5*r01);
IkReal x1560=(r00*sj5);
IkReal x1561=IKcos(j0);
IkReal x1562=((1.0)*cj1*sj2);
IkReal x1563=((1.0)*cj2*sj1);
IkReal x1564=(cj5*r11);
IkReal x1565=(r10*sj5);
IkReal x1566=IKsin(j0);
IkReal x1567=((0.425)*cj1);
IkReal x1568=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1561*x1562))+x1559+(((-1.0)*x1561*x1563))+x1560);
evalcond[1]=((((-1.0)*x1563*x1566))+x1565+x1564+(((-1.0)*x1562*x1566)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x1561*x1567))+(((-0.1)*x1559))+(((-0.134)*x1566))+((x1561*x1568))+(((-0.1)*x1560)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1)*x1564))+(((0.134)*x1561))+((x1566*x1567))+(((-0.1)*x1565))+((x1566*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1569=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1569;
j4eval[1]=IKsign(x1569);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1570=((1.0)*cj5);
IkReal x1571=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1570)));
j4eval[0]=x1571;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1570))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1572=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1573=((1.0)*cj0);
IkReal x1574=((1.0)*sj0);
j4eval[0]=x1572;
j4eval[1]=((IKabs(((((-1.0)*r12*x1574))+(((-1.0)*r02*x1573)))))+(IKabs(((((-1.0)*r01*sj5*x1573))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1574))))));
j4eval[2]=IKsign(x1572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1575=((1.0)*cj0);
IkReal x1576=((1.0)*sj0);
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1575))+(((-1.0)*r12*x1576)))),IkReal(((((-1.0)*r11*sj5*x1576))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1575))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1577.value)))+(x1578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1579=IKcos(j4);
IkReal x1580=((1.0)*x1579);
IkReal x1581=IKsin(j4);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=((1.0)*x1581);
IkReal x1585=(r11*sj5);
IkReal x1586=(cj5*r10);
IkReal x1587=((1.0)*sj0);
IkReal x1588=(r01*sj5);
IkReal x1589=(cj5*r00);
IkReal x1590=IKcos((j1+j2));
evalcond[0]=(((x1581*x1582))+(((-1.0)*r22*x1580))+(((-1.0)*x1583*x1584)));
evalcond[1]=((((-1.0)*r12*x1580))+cj0+(((-1.0)*x1584*x1586))+((x1581*x1585)));
evalcond[2]=((((-1.0)*r02*x1580))+(((-1.0)*x1587))+(((-1.0)*x1584*x1589))+((x1581*x1588)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*x1580*x1583))+((r22*x1581))+((cj2*sj1))+((x1579*x1582)));
evalcond[4]=(((x1579*x1588))+(((-1.0)*cj0*x1590))+(((-1.0)*x1580*x1589))+((r02*x1581)));
evalcond[5]=(((r12*x1581))+(((-1.0)*x1580*x1586))+((x1579*x1585))+(((-1.0)*x1587*x1590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1591=((1.0)*cj5);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1591)))),-1);
if(!x1593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1594=IKcos(j4);
IkReal x1595=((1.0)*x1594);
IkReal x1596=IKsin(j4);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=((1.0)*x1596);
IkReal x1600=(r11*sj5);
IkReal x1601=(cj5*r10);
IkReal x1602=((1.0)*sj0);
IkReal x1603=(r01*sj5);
IkReal x1604=(cj5*r00);
IkReal x1605=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1595))+((x1596*x1597))+(((-1.0)*x1598*x1599)));
evalcond[1]=(((x1596*x1600))+(((-1.0)*r12*x1595))+(((-1.0)*x1599*x1601))+cj0);
evalcond[2]=((((-1.0)*x1599*x1604))+(((-1.0)*r02*x1595))+(((-1.0)*x1602))+((x1596*x1603)));
evalcond[3]=(((x1594*x1597))+((cj1*sj2))+((r22*x1596))+(((-1.0)*x1595*x1598))+((cj2*sj1)));
evalcond[4]=(((r02*x1596))+((x1594*x1603))+(((-1.0)*x1595*x1604))+(((-1.0)*cj0*x1605)));
evalcond[5]=((((-1.0)*x1595*x1601))+(((-1.0)*x1602*x1605))+((x1594*x1600))+((r12*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1606=((1.0)*sj0);
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1606)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1607.value)))+(x1608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1609=IKcos(j4);
IkReal x1610=((1.0)*x1609);
IkReal x1611=IKsin(j4);
IkReal x1612=(r21*sj5);
IkReal x1613=(cj5*r20);
IkReal x1614=((1.0)*x1611);
IkReal x1615=(r11*sj5);
IkReal x1616=(cj5*r10);
IkReal x1617=((1.0)*sj0);
IkReal x1618=(r01*sj5);
IkReal x1619=(cj5*r00);
IkReal x1620=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1613*x1614))+((x1611*x1612))+(((-1.0)*r22*x1610)));
evalcond[1]=((((-1.0)*x1614*x1616))+((x1611*x1615))+cj0+(((-1.0)*r12*x1610)));
evalcond[2]=((((-1.0)*x1614*x1619))+(((-1.0)*r02*x1610))+((x1611*x1618))+(((-1.0)*x1617)));
evalcond[3]=(((r22*x1611))+((x1609*x1612))+((cj1*sj2))+(((-1.0)*x1610*x1613))+((cj2*sj1)));
evalcond[4]=(((r02*x1611))+(((-1.0)*cj0*x1620))+((x1609*x1618))+(((-1.0)*x1610*x1619)));
evalcond[5]=((((-1.0)*x1610*x1616))+((x1609*x1615))+(((-1.0)*x1617*x1620))+((r12*x1611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1621=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
j0eval[0]=x1621;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1621);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1622=r21*r21;
IkReal x1623=(r21*sj5);
IkReal x1624=cj5*cj5;
IkReal x1625=((((-2.0)*cj5*r20*x1623))+(((-1.0)*x1622*x1624))+x1622+(r22*r22)+((x1624*(r20*r20))));
IkReal x1626=(cj1*sj2);
IkReal x1627=(cj2*sj1);
IkReal x1628=((1.0)*cj5*r20);
j4eval[0]=x1625;
j4eval[1]=IKsign(x1625);
j4eval[2]=((IKabs(((((-1.0)*x1627*x1628))+(((-1.0)*x1626*x1628))+((x1623*x1627))+((x1623*x1626)))))+(IKabs((((r22*x1627))+((r22*x1626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1629=(cj1*sj2);
IkReal x1630=(cj2*sj1);
IkReal x1631=((212.5)*cj1);
IkReal x1632=(cj5*r01);
IkReal x1633=((500.0)*px);
IkReal x1634=(r00*sj5);
IkReal x1635=((50.0)*cj1*sj2);
IkReal x1636=((50.0)*cj2*sj1);
IkReal x1637=((196.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(((((-67.0)*x1629))+(((-67.0)*x1630))),-1);
if(!x1638.valid){
continue;
}
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(((((-1.0)*x1630))+(((-1.0)*x1629))),-1);
if(!x1639.valid){
continue;
}
if( IKabs(((x1638.value)*((((x1632*x1636))+((x1634*x1635))+((x1632*x1637))+((x1634*x1636))+((x1634*x1637))+((x1630*x1633))+((x1629*x1633))+((x1631*x1634))+((x1631*x1632))+((x1632*x1635)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1639.value)*((x1632+x1634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1638.value)*((((x1632*x1636))+((x1634*x1635))+((x1632*x1637))+((x1634*x1636))+((x1634*x1637))+((x1630*x1633))+((x1629*x1633))+((x1631*x1634))+((x1631*x1632))+((x1632*x1635))))))+IKsqr(((x1639.value)*((x1632+x1634))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1638.value)*((((x1632*x1636))+((x1634*x1635))+((x1632*x1637))+((x1634*x1636))+((x1634*x1637))+((x1630*x1633))+((x1629*x1633))+((x1631*x1634))+((x1631*x1632))+((x1632*x1635))))), ((x1639.value)*((x1632+x1634))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1640=(cj5*r01);
IkReal x1641=(r00*sj5);
IkReal x1642=IKcos(j0);
IkReal x1643=((1.0)*cj1*sj2);
IkReal x1644=((1.0)*cj2*sj1);
IkReal x1645=(cj5*r11);
IkReal x1646=(r10*sj5);
IkReal x1647=IKsin(j0);
IkReal x1648=((0.425)*cj1);
IkReal x1649=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1642*x1643))+(((-1.0)*x1641))+(((-1.0)*x1640))+(((-1.0)*x1642*x1644)));
evalcond[1]=((((-1.0)*x1645))+(((-1.0)*x1646))+(((-1.0)*x1643*x1647))+(((-1.0)*x1644*x1647)));
evalcond[2]=((((-0.134)*x1647))+(((-1.0)*(1.0)*px))+(((-0.1)*x1641))+((x1642*x1649))+((x1642*x1648))+(((-0.1)*x1640)));
evalcond[3]=((((-0.1)*x1646))+(((-0.1)*x1645))+(((-1.0)*(1.0)*py))+((x1647*x1648))+(((0.134)*x1642))+((x1647*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1650=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1650;
j4eval[1]=IKsign(x1650);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1651=((1.0)*cj5);
IkReal x1652=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1651)));
j4eval[0]=x1652;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1651))))));
j4eval[2]=IKsign(x1652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1653=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1654=((1.0)*cj0);
IkReal x1655=((1.0)*sj0);
j4eval[0]=x1653;
j4eval[1]=((IKabs(((((-1.0)*r12*x1655))+(((-1.0)*r02*x1654)))))+(IKabs(((((-1.0)*r11*sj5*x1655))+(((-1.0)*r01*sj5*x1654))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1656=((1.0)*cj0);
IkReal x1657=((1.0)*sj0);
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1657))+(((-1.0)*r02*x1656)))),IkReal(((((-1.0)*r11*sj5*x1657))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1656))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1658.value)))+(x1659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1660=IKcos(j4);
IkReal x1661=((1.0)*r22);
IkReal x1662=IKsin(j4);
IkReal x1663=(sj5*x1662);
IkReal x1664=((1.0)*cj5*x1662);
IkReal x1665=((1.0)*r12);
IkReal x1666=((1.0)*sj0);
IkReal x1667=((1.0)*r02);
IkReal x1668=(cj5*x1660);
IkReal x1669=((1.0)*sj5*x1660);
IkReal x1670=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1664))+((r21*x1663))+(((-1.0)*x1660*x1661)));
evalcond[1]=((((-1.0)*x1660*x1665))+(((-1.0)*r10*x1664))+((r11*x1663))+cj0);
evalcond[2]=((((-1.0)*r00*x1664))+(((-1.0)*x1666))+((r01*x1663))+(((-1.0)*x1660*x1667)));
evalcond[3]=(((r20*x1668))+((cj1*sj2))+(((-1.0)*r21*x1669))+((cj2*sj1))+(((-1.0)*x1661*x1662)));
evalcond[4]=((((-1.0)*cj0*x1670))+(((-1.0)*r01*x1669))+(((-1.0)*x1662*x1667))+((r00*x1668)));
evalcond[5]=(((r10*x1668))+(((-1.0)*x1666*x1670))+(((-1.0)*r11*x1669))+(((-1.0)*x1662*x1665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1671=((1.0)*cj5);
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1671)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1671))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKcos(j4);
IkReal x1675=((1.0)*r22);
IkReal x1676=IKsin(j4);
IkReal x1677=(sj5*x1676);
IkReal x1678=((1.0)*cj5*x1676);
IkReal x1679=((1.0)*r12);
IkReal x1680=((1.0)*sj0);
IkReal x1681=((1.0)*r02);
IkReal x1682=(cj5*x1674);
IkReal x1683=((1.0)*sj5*x1674);
IkReal x1684=IKcos((j1+j2));
evalcond[0]=(((r21*x1677))+(((-1.0)*r20*x1678))+(((-1.0)*x1674*x1675)));
evalcond[1]=((((-1.0)*r10*x1678))+(((-1.0)*x1674*x1679))+cj0+((r11*x1677)));
evalcond[2]=((((-1.0)*x1674*x1681))+(((-1.0)*x1680))+((r01*x1677))+(((-1.0)*r00*x1678)));
evalcond[3]=(((r20*x1682))+((cj1*sj2))+(((-1.0)*r21*x1683))+((cj2*sj1))+(((-1.0)*x1675*x1676)));
evalcond[4]=((((-1.0)*r01*x1683))+((r00*x1682))+(((-1.0)*x1676*x1681))+(((-1.0)*cj0*x1684)));
evalcond[5]=((((-1.0)*r11*x1683))+((r10*x1682))+(((-1.0)*x1680*x1684))+(((-1.0)*x1676*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1685=((1.0)*sj0);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1685)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1688=IKcos(j4);
IkReal x1689=((1.0)*r22);
IkReal x1690=IKsin(j4);
IkReal x1691=(sj5*x1690);
IkReal x1692=((1.0)*cj5*x1690);
IkReal x1693=((1.0)*r12);
IkReal x1694=((1.0)*sj0);
IkReal x1695=((1.0)*r02);
IkReal x1696=(cj5*x1688);
IkReal x1697=((1.0)*sj5*x1688);
IkReal x1698=IKcos((j1+j2));
evalcond[0]=(((r21*x1691))+(((-1.0)*r20*x1692))+(((-1.0)*x1688*x1689)));
evalcond[1]=(((r11*x1691))+cj0+(((-1.0)*r10*x1692))+(((-1.0)*x1688*x1693)));
evalcond[2]=(((r01*x1691))+(((-1.0)*x1688*x1695))+(((-1.0)*r00*x1692))+(((-1.0)*x1694)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*r21*x1697))+((r20*x1696))+(((-1.0)*x1689*x1690))+((cj2*sj1)));
evalcond[4]=((((-1.0)*r01*x1697))+(((-1.0)*cj0*x1698))+((r00*x1696))+(((-1.0)*x1690*x1695)));
evalcond[5]=((((-1.0)*x1694*x1698))+(((-1.0)*r11*x1697))+((r10*x1696))+(((-1.0)*x1690*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1699=(cj1*sj2);
IkReal x1700=(cj2*sj1);
IkReal x1701=(r21*sj5);
IkReal x1702=((1.0)*cj5*r20);
IkReal x1703=r21*r21;
IkReal x1704=cj5*cj5;
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((((r22*x1700))+((r22*x1699)))),IkReal((((x1700*x1701))+(((-1.0)*x1700*x1702))+(((-1.0)*x1699*x1702))+((x1699*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign((x1703+(((-2.0)*cj5*r20*x1701))+((x1704*(r20*r20)))+(((-1.0)*x1703*x1704))+(r22*r22))),-1);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1707=IKcos(j4);
IkReal x1708=((1.0)*r22);
IkReal x1709=IKsin(j4);
IkReal x1710=(r21*sj5);
IkReal x1711=(cj5*r20);
evalcond[0]=((((-1.0)*x1707*x1708))+(((-1.0)*x1709*x1711))+((x1709*x1710)));
evalcond[1]=(((x1707*x1711))+((cj1*sj2))+(((-1.0)*x1708*x1709))+((cj2*sj1))+(((-1.0)*x1707*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1712=(sj4*sj5);
IkReal x1713=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1713))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1712)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1712))+((r10*x1713))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1713))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1712))))+IKsqr(((((-1.0)*r11*x1712))+((r10*x1713))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1713))+(((-1.0)*(1.0)*cj4*r02))+((r01*x1712))), ((((-1.0)*r11*x1712))+((r10*x1713))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1714=IKcos(j0);
IkReal x1715=((1.0)*cj4);
IkReal x1716=(sj4*sj5);
IkReal x1717=((1.0)*cj5*sj4);
IkReal x1718=IKsin(j0);
IkReal x1719=((1.0)*x1718);
IkReal x1720=(cj5*r01);
IkReal x1721=(r00*sj5);
IkReal x1722=(cj1*sj2);
IkReal x1723=((1.0)*x1714);
IkReal x1724=(cj2*sj1);
IkReal x1725=(cj5*r11);
IkReal x1726=(r10*sj5);
IkReal x1727=((1.0)*sj4);
IkReal x1728=(cj4*cj5);
IkReal x1729=((1.0)*cj4*sj5);
IkReal x1730=IKcos((j1+j2));
IkReal x1731=((0.425)*cj1);
IkReal x1732=((0.392)*x1730);
evalcond[0]=((((-1.0)*r10*x1717))+((r11*x1716))+x1714+(((-1.0)*r12*x1715)));
evalcond[1]=((((-1.0)*r00*x1717))+(((-1.0)*x1719))+(((-1.0)*r02*x1715))+((r01*x1716)));
evalcond[2]=((((-1.0)*x1721))+(((-1.0)*x1722*x1723))+(((-1.0)*x1720))+(((-1.0)*x1723*x1724)));
evalcond[3]=((((-1.0)*x1726))+(((-1.0)*x1719*x1722))+(((-1.0)*x1725))+(((-1.0)*x1719*x1724)));
evalcond[4]=(((r00*x1728))+(((-1.0)*r01*x1729))+(((-1.0)*x1723*x1730))+(((-1.0)*r02*x1727)));
evalcond[5]=((((-1.0)*r11*x1729))+(((-1.0)*x1719*x1730))+(((-1.0)*r12*x1727))+((r10*x1728)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.1)*x1721))+((x1714*x1732))+(((-0.134)*x1718))+(((-0.1)*x1720))+((x1714*x1731)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((0.134)*x1714))+((x1718*x1732))+(((-0.1)*x1726))+((x1718*x1731))+(((-0.1)*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1733.value)))+(x1734.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1735=(cj5*r01);
IkReal x1736=(r00*sj5);
IkReal x1737=IKcos(j0);
IkReal x1738=((1.0)*cj1*sj2);
IkReal x1739=((1.0)*cj2*sj1);
IkReal x1740=(cj5*r11);
IkReal x1741=(r10*sj5);
IkReal x1742=IKsin(j0);
IkReal x1743=((0.425)*cj1);
IkReal x1744=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1736))+(((-1.0)*x1737*x1739))+(((-1.0)*x1737*x1738))+(((-1.0)*x1735)));
evalcond[1]=((((-1.0)*x1740))+(((-1.0)*x1741))+(((-1.0)*x1739*x1742))+(((-1.0)*x1738*x1742)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x1737*x1743))+((x1737*x1744))+(((-0.1)*x1735))+(((-0.1)*x1736))+(((-0.134)*x1742)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1)*x1740))+(((-0.1)*x1741))+(((0.134)*x1737))+((x1742*x1744))+((x1742*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1745=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1745;
j4eval[1]=IKsign(x1745);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1746=((1.0)*cj5);
IkReal x1747=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1746)));
j4eval[0]=x1747;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1746))))));
j4eval[2]=IKsign(x1747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1748=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1749=((1.0)*cj0);
IkReal x1750=((1.0)*sj0);
j4eval[0]=x1748;
j4eval[1]=((IKabs(((((-1.0)*r02*x1749))+(((-1.0)*r12*x1750)))))+(IKabs(((((-1.0)*r11*sj5*x1750))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1749))))));
j4eval[2]=IKsign(x1748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1751=((1.0)*cj0);
IkReal x1752=((1.0)*sj0);
CheckValue<IkReal> x1753=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1753.valid){
continue;
}
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1752))+(((-1.0)*r02*x1751)))),IkReal(((((-1.0)*r01*sj5*x1751))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1752))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1753.value)))+(x1754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1755=IKcos(j4);
IkReal x1756=((1.0)*r22);
IkReal x1757=IKsin(j4);
IkReal x1758=(sj5*x1757);
IkReal x1759=((1.0)*cj5*x1757);
IkReal x1760=((1.0)*r12);
IkReal x1761=((1.0)*sj0);
IkReal x1762=((1.0)*r02);
IkReal x1763=(cj5*x1755);
IkReal x1764=((1.0)*sj5*x1755);
IkReal x1765=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1755*x1756))+(((-1.0)*r20*x1759))+((r21*x1758)));
evalcond[1]=((((-1.0)*r10*x1759))+((r11*x1758))+cj0+(((-1.0)*x1755*x1760)));
evalcond[2]=((((-1.0)*r00*x1759))+(((-1.0)*x1761))+((r01*x1758))+(((-1.0)*x1755*x1762)));
evalcond[3]=((((-1.0)*x1756*x1757))+(((-1.0)*r21*x1764))+((r20*x1763))+((cj1*sj2))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1757*x1762))+(((-1.0)*cj0*x1765))+(((-1.0)*r01*x1764))+((r00*x1763)));
evalcond[5]=(((r10*x1763))+(((-1.0)*x1757*x1760))+(((-1.0)*r11*x1764))+(((-1.0)*x1761*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1766=((1.0)*cj5);
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1766)))),-1);
if(!x1767.valid){
continue;
}
CheckValue<IkReal> x1768 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1767.value)))+(x1768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1769=IKcos(j4);
IkReal x1770=((1.0)*r22);
IkReal x1771=IKsin(j4);
IkReal x1772=(sj5*x1771);
IkReal x1773=((1.0)*cj5*x1771);
IkReal x1774=((1.0)*r12);
IkReal x1775=((1.0)*sj0);
IkReal x1776=((1.0)*r02);
IkReal x1777=(cj5*x1769);
IkReal x1778=((1.0)*sj5*x1769);
IkReal x1779=IKcos((j1+j2));
evalcond[0]=(((r21*x1772))+(((-1.0)*r20*x1773))+(((-1.0)*x1769*x1770)));
evalcond[1]=(((r11*x1772))+cj0+(((-1.0)*r10*x1773))+(((-1.0)*x1769*x1774)));
evalcond[2]=((((-1.0)*x1769*x1776))+((r01*x1772))+(((-1.0)*r00*x1773))+(((-1.0)*x1775)));
evalcond[3]=((((-1.0)*r21*x1778))+((r20*x1777))+((cj1*sj2))+(((-1.0)*x1770*x1771))+((cj2*sj1)));
evalcond[4]=(((r00*x1777))+(((-1.0)*r01*x1778))+(((-1.0)*x1771*x1776))+(((-1.0)*cj0*x1779)));
evalcond[5]=((((-1.0)*r11*x1778))+(((-1.0)*x1775*x1779))+(((-1.0)*x1771*x1774))+((r10*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1780=((1.0)*sj0);
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1780)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1781.value)))+(x1782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1783=IKcos(j4);
IkReal x1784=((1.0)*r22);
IkReal x1785=IKsin(j4);
IkReal x1786=(sj5*x1785);
IkReal x1787=((1.0)*cj5*x1785);
IkReal x1788=((1.0)*r12);
IkReal x1789=((1.0)*sj0);
IkReal x1790=((1.0)*r02);
IkReal x1791=(cj5*x1783);
IkReal x1792=((1.0)*sj5*x1783);
IkReal x1793=IKcos((j1+j2));
evalcond[0]=(((r21*x1786))+(((-1.0)*x1783*x1784))+(((-1.0)*r20*x1787)));
evalcond[1]=((((-1.0)*r10*x1787))+cj0+((r11*x1786))+(((-1.0)*x1783*x1788)));
evalcond[2]=(((r01*x1786))+(((-1.0)*r00*x1787))+(((-1.0)*x1789))+(((-1.0)*x1783*x1790)));
evalcond[3]=(((cj1*sj2))+((r20*x1791))+(((-1.0)*x1784*x1785))+(((-1.0)*r21*x1792))+((cj2*sj1)));
evalcond[4]=(((r00*x1791))+(((-1.0)*cj0*x1793))+(((-1.0)*r01*x1792))+(((-1.0)*x1785*x1790)));
evalcond[5]=((((-1.0)*x1785*x1788))+((r10*x1791))+(((-1.0)*r11*x1792))+(((-1.0)*x1789*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1794=cj1*cj1;
IkReal x1795=cj2*cj2;
IkReal x1796=(cj1*sj1*sj2);
IkReal x1797=((106250.0)*cj1);
IkReal x1798=((3350.0)*cj5);
IkReal x1799=((3350.0)*sj5);
IkReal x1800=((98000.0)*cj1*cj2);
IkReal x1801=((10625.0)*cj1*cj5);
IkReal x1802=((10625.0)*cj1*sj5);
IkReal x1803=((98000.0)*sj1*sj2);
IkReal x1804=((9800.0)*cj1*cj2*cj5);
IkReal x1805=((9800.0)*cj1*cj2*sj5);
IkReal x1806=((9800.0)*cj5*sj1*sj2);
IkReal x1807=((9800.0)*sj1*sj2*sj5);
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(IKsign(((42905.0)+(((-38416.0)*x1795))+(((-76832.0)*cj2*x1796))+(((83300.0)*cj2*x1794))+(((-83300.0)*x1796))+(((6740.25)*x1794))+(((76832.0)*x1794*x1795)))),-1);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal((((r10*x1802))+(((-1.0)*r01*x1798))+(((-1.0)*r00*x1799))+((py*x1797))+(((-1.0)*r11*x1806))+((r11*x1804))+((r11*x1801))+(((-1.0)*r10*x1807))+(((-1.0)*(33500.0)*px))+((r10*x1805))+(((-1.0)*py*x1803))+((py*x1800)))),IkReal((((px*x1800))+((r00*x1802))+((px*x1797))+(((-1.0)*r01*x1806))+(((33500.0)*py))+(((-1.0)*px*x1803))+((r11*x1798))+((r01*x1804))+((r01*x1801))+((r10*x1799))+(((-1.0)*r00*x1807))+((r00*x1805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1808.value)))+(x1809.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1810=((0.1)*cj5);
IkReal x1811=((0.1)*sj5);
IkReal x1812=IKsin(j0);
IkReal x1813=IKcos(j0);
IkReal x1814=((0.425)*cj1);
IkReal x1815=((0.392)*cj1*cj2);
IkReal x1816=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*x1810))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1811))+(((-1.0)*x1813*x1816))+((x1813*x1815))+(((-0.134)*x1812))+((x1813*x1814)));
evalcond[1]=(((x1812*x1815))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1810))+(((-1.0)*r10*x1811))+(((-1.0)*x1812*x1816))+((x1812*x1814))+(((0.134)*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1817=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1817;
j4eval[1]=IKsign(x1817);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1818=((1.0)*cj5);
IkReal x1819=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1818)));
j4eval[0]=x1819;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1818))))));
j4eval[2]=IKsign(x1819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1820=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1821=((1.0)*cj0);
IkReal x1822=((1.0)*sj0);
j4eval[0]=x1820;
j4eval[1]=((IKabs(((((-1.0)*r12*x1822))+(((-1.0)*r02*x1821)))))+(IKabs(((((-1.0)*r11*sj5*x1822))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1821))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1823=((1.0)*r20);
IkReal x1825 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1825)==0){
continue;
}
IkReal x1824=pow(x1825,-0.5);
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1823)),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1826.value));
IkReal gconst1=(r21*x1824);
IkReal gconst2=((-1.0)*x1823*x1824);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1827.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1828=((1.0)*r20);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1828)),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal x1829=((-1.0)*(x1831.value));
IkReal x1830=x1824;
sj5=gconst1;
cj5=gconst2;
j5=x1829;
IkReal gconst0=x1829;
IkReal gconst1=(r21*x1830);
IkReal gconst2=((-1.0)*x1828*x1830);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1832=((1.0)*r20);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1832)),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
IkReal x1833=((-1.0)*(x1835.value));
IkReal x1834=x1824;
sj5=gconst1;
cj5=gconst2;
j5=x1833;
IkReal gconst0=x1833;
IkReal gconst1=(r21*x1834);
IkReal gconst2=((-1.0)*x1832*x1834);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1836=((1.0)*r20);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1836)),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
IkReal x1837=((-1.0)*(x1839.value));
IkReal x1838=x1824;
sj5=gconst1;
cj5=gconst2;
j5=x1837;
IkReal gconst0=x1837;
IkReal gconst1=(r21*x1838);
IkReal gconst2=((-1.0)*x1836*x1838);
IkReal x1840=r22*r22;
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1840))),-1);
if(!x1843.valid){
continue;
}
IkReal x1841=(sj3*(x1843.value));
IkReal x1842=(((x1841*(r20*r20*r20*r20)))+(((2.0)*x1841*(r20*r20)*(r21*r21)))+((sj3*x1840))+((x1841*(r21*r21*r21*r21))));
j4eval[0]=x1842;
j4eval[1]=IKsign(x1842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1844=(gconst1*r21);
IkReal x1845=gconst1*gconst1;
IkReal x1846=r21*r21;
IkReal x1847=gconst2*gconst2;
IkReal x1848=r20*r20;
IkReal x1849=(sj1*sj2);
IkReal x1850=((1.0)*cj1*cj2);
IkReal x1851=(cj3*r22);
IkReal x1852=(gconst2*r20);
IkReal x1853=(cj3*gconst1*gconst2);
IkReal x1854=(cj3*r20*r21);
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r20*sj3*x1844))+((sj3*(r22*r22)))+((sj3*x1847*x1848))+((sj3*x1845*x1846)))),-1);
if(!x1855.valid){
continue;
}
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal((((gconst2*r21*x1851))+(((-1.0)*r22*x1850))+((gconst1*r20*x1851))+((r22*x1849)))),IkReal(((((-1.0)*x1844*x1850))+((cj1*cj2*x1852))+(((-1.0)*x1848*x1853))+(((-1.0)*x1847*x1854))+((x1844*x1849))+(((-1.0)*sj1*sj2*x1852))+((x1846*x1853))+((x1845*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1855.value)))+(x1856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1857=IKcos(j4);
IkReal x1858=((1.0)*x1857);
IkReal x1859=IKsin(j4);
IkReal x1860=(gconst1*x1859);
IkReal x1861=((1.0)*gconst2*x1859);
IkReal x1862=((1.0)*sj0);
IkReal x1863=(cj1*sj2);
IkReal x1864=(cj2*sj1);
IkReal x1865=(gconst1*sj3);
IkReal x1866=(gconst2*sj3);
IkReal x1867=(cj3*x1859);
IkReal x1868=(cj3*gconst1*x1857);
IkReal x1869=((1.0)*cj3*gconst2*x1857);
IkReal x1870=(sj1*sj2);
IkReal x1871=((1.0)*cj1*cj2);
IkReal x1872=(cj3*gconst1);
IkReal x1873=(cj3*gconst2);
IkReal x1874=((1.0)*sj3*x1859);
IkReal x1875=(gconst2*sj3*x1857);
IkReal x1876=((1.0)*gconst1*sj3*x1857);
IkReal x1877=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1858))+(((-1.0)*r20*x1861))+((r21*x1860)));
evalcond[1]=((((-1.0)*r12*x1858))+cj0+(((-1.0)*r10*x1861))+((r11*x1860)));
evalcond[2]=(((r01*x1860))+(((-1.0)*r02*x1858))+(((-1.0)*r00*x1861))+(((-1.0)*x1862)));
evalcond[3]=(((r20*x1865))+((r22*x1867))+x1864+x1863+((r21*x1868))+((r21*x1866))+(((-1.0)*r20*x1869)));
evalcond[4]=(((r21*x1873))+(((-1.0)*x1871))+(((-1.0)*r22*x1874))+((r20*x1875))+x1870+(((-1.0)*r21*x1876))+((r20*x1872)));
evalcond[5]=((((-1.0)*r00*x1869))+((r02*x1867))+(((-1.0)*cj0*x1871))+((r01*x1868))+((r01*x1866))+((r00*x1865))+((cj0*x1870)));
evalcond[6]=(((r12*x1867))+((r11*x1866))+(((-1.0)*cj1*cj2*x1862))+((r11*x1868))+((r10*x1865))+((sj0*x1870))+(((-1.0)*r10*x1869)));
evalcond[7]=(((r00*x1872))+(((-1.0)*x1864*x1877))+((r01*x1873))+((r00*x1875))+(((-1.0)*r02*x1874))+(((-1.0)*x1863*x1877))+(((-1.0)*r01*x1876)));
evalcond[8]=((((-1.0)*r11*x1876))+((r11*x1873))+(((-1.0)*r12*x1874))+(((-1.0)*x1862*x1864))+((r10*x1872))+(((-1.0)*x1862*x1863))+((r10*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1878=((1.0)*gconst2);
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst1*r00))+(((-1.0)*r01*x1878)))),-1);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1878))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1879.value)))+(x1880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1881=IKcos(j4);
IkReal x1882=((1.0)*x1881);
IkReal x1883=IKsin(j4);
IkReal x1884=(gconst1*x1883);
IkReal x1885=((1.0)*gconst2*x1883);
IkReal x1886=((1.0)*sj0);
IkReal x1887=(cj1*sj2);
IkReal x1888=(cj2*sj1);
IkReal x1889=(gconst1*sj3);
IkReal x1890=(gconst2*sj3);
IkReal x1891=(cj3*x1883);
IkReal x1892=(cj3*gconst1*x1881);
IkReal x1893=((1.0)*cj3*gconst2*x1881);
IkReal x1894=(sj1*sj2);
IkReal x1895=((1.0)*cj1*cj2);
IkReal x1896=(cj3*gconst1);
IkReal x1897=(cj3*gconst2);
IkReal x1898=((1.0)*sj3*x1883);
IkReal x1899=(gconst2*sj3*x1881);
IkReal x1900=((1.0)*gconst1*sj3*x1881);
IkReal x1901=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1885))+((r21*x1884))+(((-1.0)*r22*x1882)));
evalcond[1]=((((-1.0)*r12*x1882))+((r11*x1884))+(((-1.0)*r10*x1885))+cj0);
evalcond[2]=(((r01*x1884))+(((-1.0)*r02*x1882))+(((-1.0)*x1886))+(((-1.0)*r00*x1885)));
evalcond[3]=(((r21*x1892))+((r21*x1890))+x1888+x1887+(((-1.0)*r20*x1893))+((r20*x1889))+((r22*x1891)));
evalcond[4]=(((r21*x1897))+(((-1.0)*x1895))+(((-1.0)*r22*x1898))+x1894+((r20*x1899))+((r20*x1896))+(((-1.0)*r21*x1900)));
evalcond[5]=((((-1.0)*cj0*x1895))+(((-1.0)*r00*x1893))+((cj0*x1894))+((r01*x1890))+((r02*x1891))+((r00*x1889))+((r01*x1892)));
evalcond[6]=(((sj0*x1894))+(((-1.0)*r10*x1893))+((r11*x1890))+(((-1.0)*cj1*cj2*x1886))+((r10*x1889))+((r12*x1891))+((r11*x1892)));
evalcond[7]=((((-1.0)*x1888*x1901))+((r01*x1897))+(((-1.0)*r02*x1898))+(((-1.0)*x1887*x1901))+((r00*x1896))+(((-1.0)*r01*x1900))+((r00*x1899)));
evalcond[8]=((((-1.0)*r11*x1900))+((r11*x1897))+(((-1.0)*x1886*x1888))+(((-1.0)*r12*x1898))+(((-1.0)*x1886*x1887))+((r10*x1899))+((r10*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1902=((1.0)*sj0);
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1902)),IkReal((((gconst2*r20*sj0))+(((-1.0)*gconst1*r21*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x1904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1903.value)+(((1.5707963267949)*(x1904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1905=IKcos(j4);
IkReal x1906=((1.0)*x1905);
IkReal x1907=IKsin(j4);
IkReal x1908=(gconst1*x1907);
IkReal x1909=((1.0)*gconst2*x1907);
IkReal x1910=((1.0)*sj0);
IkReal x1911=(cj1*sj2);
IkReal x1912=(cj2*sj1);
IkReal x1913=(gconst1*sj3);
IkReal x1914=(gconst2*sj3);
IkReal x1915=(cj3*x1907);
IkReal x1916=(cj3*gconst1*x1905);
IkReal x1917=((1.0)*cj3*gconst2*x1905);
IkReal x1918=(sj1*sj2);
IkReal x1919=((1.0)*cj1*cj2);
IkReal x1920=(cj3*gconst1);
IkReal x1921=(cj3*gconst2);
IkReal x1922=((1.0)*sj3*x1907);
IkReal x1923=(gconst2*sj3*x1905);
IkReal x1924=((1.0)*gconst1*sj3*x1905);
IkReal x1925=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1909))+((r21*x1908))+(((-1.0)*r22*x1906)));
evalcond[1]=((((-1.0)*r12*x1906))+(((-1.0)*r10*x1909))+cj0+((r11*x1908)));
evalcond[2]=((((-1.0)*r00*x1909))+((r01*x1908))+(((-1.0)*r02*x1906))+(((-1.0)*x1910)));
evalcond[3]=(((r21*x1916))+(((-1.0)*r20*x1917))+((r20*x1913))+((r22*x1915))+x1912+x1911+((r21*x1914)));
evalcond[4]=(((r20*x1920))+(((-1.0)*x1919))+(((-1.0)*r22*x1922))+((r21*x1921))+x1918+(((-1.0)*r21*x1924))+((r20*x1923)));
evalcond[5]=(((cj0*x1918))+((r01*x1916))+((r02*x1915))+(((-1.0)*cj0*x1919))+((r01*x1914))+((r00*x1913))+(((-1.0)*r00*x1917)));
evalcond[6]=(((r11*x1916))+((sj0*x1918))+(((-1.0)*r10*x1917))+((r10*x1913))+((r12*x1915))+(((-1.0)*cj1*cj2*x1910))+((r11*x1914)));
evalcond[7]=(((r01*x1921))+((r00*x1923))+((r00*x1920))+(((-1.0)*r01*x1924))+(((-1.0)*x1912*x1925))+(((-1.0)*r02*x1922))+(((-1.0)*x1911*x1925)));
evalcond[8]=((((-1.0)*r11*x1924))+((r10*x1923))+(((-1.0)*r12*x1922))+(((-1.0)*x1910*x1912))+((r10*x1920))+((r11*x1921))+(((-1.0)*x1910*x1911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1926=((1.0)*r21);
IkReal x1927=((1.0)*r20);
IkReal x1929 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1929)==0){
continue;
}
IkReal x1928=pow(x1929,-0.5);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(((-1.0)*x1926)),IkReal(((-1.0)*x1927)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1930.value))));
IkReal gconst4=((-1.0)*x1926*x1928);
IkReal gconst5=(x1927*x1928);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1931.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1932=((1.0)*r21);
IkReal x1933=((1.0)*r20);
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(((-1.0)*x1932)),IkReal(((-1.0)*x1933)),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
IkReal x1934=((-1.0)*(x1936.value));
IkReal x1935=x1928;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1934);
IkReal gconst3=((3.14159265358979)+x1934);
IkReal gconst4=((-1.0)*x1932*x1935);
IkReal gconst5=(x1933*x1935);
j4eval[0]=1.0;
j4eval[1]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1937=((1.0)*r21);
IkReal x1938=((1.0)*r20);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(((-1.0)*x1937)),IkReal(((-1.0)*x1938)),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
IkReal x1939=((-1.0)*(x1941.value));
IkReal x1940=x1928;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1939);
IkReal gconst3=((3.14159265358979)+x1939);
IkReal gconst4=((-1.0)*x1937*x1940);
IkReal gconst5=(x1938*x1940);
j4eval[0]=1.0;
j4eval[1]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1942=((1.0)*r21);
IkReal x1943=((1.0)*r20);
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(((-1.0)*x1942)),IkReal(((-1.0)*x1943)),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
IkReal x1944=((-1.0)*(x1946.value));
IkReal x1945=x1928;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1944);
IkReal gconst3=((3.14159265358979)+x1944);
IkReal gconst4=((-1.0)*x1942*x1945);
IkReal gconst5=(x1943*x1945);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=((-1.0)+(r22*r22));
j4eval[4]=((((r12*r12)*(sj0*sj0)))+(((cj0*cj0)*(r02*r02)))+(((2.0)*cj0*r02*r12*sj0)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=((1.0)*gconst4);
IkReal x1948=((1.0)*cj0);
CheckValue<IkReal> x1949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1947))+(((-1.0)*(1.0)*gconst5*r21)))),-1);
if(!x1949.valid){
continue;
}
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1948))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*gconst4*r01*x1948))+(((-1.0)*r11*sj0*x1947))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1949.value)))+(x1950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1951=IKcos(j4);
IkReal x1952=((1.0)*x1951);
IkReal x1953=IKsin(j4);
IkReal x1954=(gconst4*x1953);
IkReal x1955=((1.0)*gconst5*x1953);
IkReal x1956=((1.0)*sj0);
IkReal x1957=(cj1*sj2);
IkReal x1958=(cj2*sj1);
IkReal x1959=(gconst4*sj3);
IkReal x1960=(gconst5*sj3);
IkReal x1961=(cj3*x1953);
IkReal x1962=(cj3*gconst4*x1951);
IkReal x1963=((1.0)*cj3*gconst5*x1951);
IkReal x1964=(sj1*sj2);
IkReal x1965=((1.0)*cj1*cj2);
IkReal x1966=(cj3*gconst4);
IkReal x1967=(cj3*gconst5);
IkReal x1968=((1.0)*sj3*x1953);
IkReal x1969=(gconst5*sj3*x1951);
IkReal x1970=((1.0)*gconst4*sj3*x1951);
IkReal x1971=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1955))+((r21*x1954))+(((-1.0)*r22*x1952)));
evalcond[1]=((((-1.0)*r12*x1952))+((r11*x1954))+cj0+(((-1.0)*r10*x1955)));
evalcond[2]=(((r01*x1954))+(((-1.0)*r00*x1955))+(((-1.0)*x1956))+(((-1.0)*r02*x1952)));
evalcond[3]=(((r22*x1961))+((r20*x1959))+((r21*x1962))+(((-1.0)*r20*x1963))+((r21*x1960))+x1957+x1958);
evalcond[4]=(x1964+((r20*x1969))+(((-1.0)*r21*x1970))+(((-1.0)*x1965))+((r20*x1966))+(((-1.0)*r22*x1968))+((r21*x1967)));
evalcond[5]=(((r01*x1962))+(((-1.0)*cj0*x1965))+((r01*x1960))+((r02*x1961))+(((-1.0)*r00*x1963))+((r00*x1959))+((cj0*x1964)));
evalcond[6]=(((r10*x1959))+((r11*x1960))+((r11*x1962))+(((-1.0)*cj1*cj2*x1956))+((r12*x1961))+((sj0*x1964))+(((-1.0)*r10*x1963)));
evalcond[7]=((((-1.0)*r01*x1970))+(((-1.0)*r02*x1968))+(((-1.0)*x1957*x1971))+(((-1.0)*x1958*x1971))+((r01*x1967))+((r00*x1969))+((r00*x1966)));
evalcond[8]=((((-1.0)*x1956*x1958))+(((-1.0)*r11*x1970))+((r11*x1967))+((r10*x1966))+(((-1.0)*r12*x1968))+(((-1.0)*x1956*x1957))+((r10*x1969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1972=((1.0)*gconst5);
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1972))+(((-1.0)*(1.0)*gconst4*r00)))),-1);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1972))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1973.value)))+(x1974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1975=IKcos(j4);
IkReal x1976=((1.0)*x1975);
IkReal x1977=IKsin(j4);
IkReal x1978=(gconst4*x1977);
IkReal x1979=((1.0)*gconst5*x1977);
IkReal x1980=((1.0)*sj0);
IkReal x1981=(cj1*sj2);
IkReal x1982=(cj2*sj1);
IkReal x1983=(gconst4*sj3);
IkReal x1984=(gconst5*sj3);
IkReal x1985=(cj3*x1977);
IkReal x1986=(cj3*gconst4*x1975);
IkReal x1987=((1.0)*cj3*gconst5*x1975);
IkReal x1988=(sj1*sj2);
IkReal x1989=((1.0)*cj1*cj2);
IkReal x1990=(cj3*gconst4);
IkReal x1991=(cj3*gconst5);
IkReal x1992=((1.0)*sj3*x1977);
IkReal x1993=(gconst5*sj3*x1975);
IkReal x1994=((1.0)*gconst4*sj3*x1975);
IkReal x1995=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1979))+((r21*x1978))+(((-1.0)*r22*x1976)));
evalcond[1]=((((-1.0)*r10*x1979))+(((-1.0)*r12*x1976))+cj0+((r11*x1978)));
evalcond[2]=((((-1.0)*x1980))+((r01*x1978))+(((-1.0)*r00*x1979))+(((-1.0)*r02*x1976)));
evalcond[3]=(((r22*x1985))+x1981+x1982+((r20*x1983))+((r21*x1984))+((r21*x1986))+(((-1.0)*r20*x1987)));
evalcond[4]=(((r20*x1993))+(((-1.0)*x1989))+(((-1.0)*r22*x1992))+x1988+(((-1.0)*r21*x1994))+((r21*x1991))+((r20*x1990)));
evalcond[5]=((((-1.0)*cj0*x1989))+((r01*x1986))+((r02*x1985))+((cj0*x1988))+(((-1.0)*r00*x1987))+((r01*x1984))+((r00*x1983)));
evalcond[6]=(((r11*x1984))+(((-1.0)*cj1*cj2*x1980))+((r11*x1986))+((sj0*x1988))+((r10*x1983))+(((-1.0)*r10*x1987))+((r12*x1985)));
evalcond[7]=(((r01*x1991))+(((-1.0)*r01*x1994))+(((-1.0)*x1981*x1995))+(((-1.0)*r02*x1992))+(((-1.0)*x1982*x1995))+((r00*x1990))+((r00*x1993)));
evalcond[8]=((((-1.0)*x1980*x1982))+(((-1.0)*x1980*x1981))+((r11*x1991))+(((-1.0)*r11*x1994))+(((-1.0)*r12*x1992))+((r10*x1990))+((r10*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1996=((1.0)*sj0);
CheckValue<IkReal> x1997=IKPowWithIntegerCheck(IKsign((((gconst4*r10))+((gconst5*r11)))),-1);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1996)),IkReal((((gconst5*r20*sj0))+(((-1.0)*gconst4*r21*x1996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1997.value)))+(x1998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1999=IKcos(j4);
IkReal x2000=((1.0)*x1999);
IkReal x2001=IKsin(j4);
IkReal x2002=(gconst4*x2001);
IkReal x2003=((1.0)*gconst5*x2001);
IkReal x2004=((1.0)*sj0);
IkReal x2005=(cj1*sj2);
IkReal x2006=(cj2*sj1);
IkReal x2007=(gconst4*sj3);
IkReal x2008=(gconst5*sj3);
IkReal x2009=(cj3*x2001);
IkReal x2010=(cj3*gconst4*x1999);
IkReal x2011=((1.0)*cj3*gconst5*x1999);
IkReal x2012=(sj1*sj2);
IkReal x2013=((1.0)*cj1*cj2);
IkReal x2014=(cj3*gconst4);
IkReal x2015=(cj3*gconst5);
IkReal x2016=((1.0)*sj3*x2001);
IkReal x2017=(gconst5*sj3*x1999);
IkReal x2018=((1.0)*gconst4*sj3*x1999);
IkReal x2019=((1.0)*cj0);
evalcond[0]=(((r21*x2002))+(((-1.0)*r22*x2000))+(((-1.0)*r20*x2003)));
evalcond[1]=(((r11*x2002))+(((-1.0)*r10*x2003))+(((-1.0)*r12*x2000))+cj0);
evalcond[2]=((((-1.0)*r02*x2000))+((r01*x2002))+(((-1.0)*x2004))+(((-1.0)*r00*x2003)));
evalcond[3]=((((-1.0)*r20*x2011))+x2005+x2006+((r20*x2007))+((r21*x2010))+((r22*x2009))+((r21*x2008)));
evalcond[4]=((((-1.0)*r21*x2018))+((r20*x2014))+((r20*x2017))+x2012+((r21*x2015))+(((-1.0)*x2013))+(((-1.0)*r22*x2016)));
evalcond[5]=(((r01*x2010))+((r00*x2007))+((r02*x2009))+((cj0*x2012))+(((-1.0)*cj0*x2013))+((r01*x2008))+(((-1.0)*r00*x2011)));
evalcond[6]=((((-1.0)*r10*x2011))+((r12*x2009))+(((-1.0)*cj1*cj2*x2004))+((r11*x2008))+((sj0*x2012))+((r10*x2007))+((r11*x2010)));
evalcond[7]=((((-1.0)*x2005*x2019))+(((-1.0)*x2006*x2019))+(((-1.0)*r01*x2018))+((r01*x2015))+(((-1.0)*r02*x2016))+((r00*x2014))+((r00*x2017)));
evalcond[8]=((((-1.0)*r11*x2018))+((r10*x2014))+(((-1.0)*x2004*x2006))+((r10*x2017))+((r11*x2015))+(((-1.0)*r12*x2016))+(((-1.0)*x2004*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2020=((1.0)*r00);
IkReal x2022 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2022)==0){
continue;
}
IkReal x2021=pow(x2022,-0.5);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2020)),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2023.value));
IkReal gconst7=(r01*x2021);
IkReal gconst8=((-1.0)*x2020*x2021);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2024.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2025=((1.0)*r00);
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2025)),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
IkReal x2026=((-1.0)*(x2028.value));
IkReal x2027=x2021;
sj5=gconst7;
cj5=gconst8;
j5=x2026;
IkReal gconst6=x2026;
IkReal gconst7=(r01*x2027);
IkReal gconst8=((-1.0)*x2025*x2027);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2029=((1.0)*r00);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2029)),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
IkReal x2030=((-1.0)*(x2032.value));
IkReal x2031=x2021;
sj5=gconst7;
cj5=gconst8;
j5=x2030;
IkReal gconst6=x2030;
IkReal gconst7=(r01*x2031);
IkReal gconst8=((-1.0)*x2029*x2031);
IkReal x2033=(r12*sj0);
IkReal x2034=((1.0)*(r02*r02));
IkReal x2037 = ((1.0)+(((-1.0)*x2034)));
if(IKabs(x2037)==0){
continue;
}
IkReal x2035=pow(x2037,-0.5);
IkReal x2036=(cj0*x2035);
j4eval[0]=((IKabs(((((-1.0)*x2034*x2036))+(((-1.0)*r02*x2033*x2035))+x2036)))+(IKabs(((((-1.0)*cj0*r02))+(((-1.0)*x2033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2038=((1.0)*r00);
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2038)),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
IkReal x2039=((-1.0)*(x2041.value));
IkReal x2040=x2021;
sj5=gconst7;
cj5=gconst8;
j5=x2039;
IkReal gconst6=x2039;
IkReal gconst7=(r01*x2040);
IkReal gconst8=((-1.0)*x2038*x2040);
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r02*r02)))),-1);
if(!x2044.valid){
continue;
}
IkReal x2042=(cj3*(x2044.value));
IkReal x2043=(((x2042*(r01*r01)*(r21*r21)))+((cj3*(r22*r22)))+((x2042*(r00*r00)*(r20*r20)))+(((2.0)*r00*r01*r20*r21*x2042)));
j4eval[0]=x2043;
j4eval[1]=IKsign(x2043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2045=(gconst8*r20);
IkReal x2046=gconst7*gconst7;
IkReal x2047=r21*r21;
IkReal x2048=gconst8*gconst8;
IkReal x2049=r20*r20;
IkReal x2050=((1.0)*r22);
IkReal x2051=(cj1*sj2);
IkReal x2052=(cj2*sj1);
IkReal x2053=((1.0)*r22*sj3);
IkReal x2054=((1.0)*gconst7*r21);
IkReal x2055=(gconst7*gconst8*sj3);
IkReal x2056=(r20*r21*sj3);
CheckValue<IkReal> x2057 = IKatan2WithCheck(IkReal(((((-1.0)*gconst8*r21*x2053))+(((-1.0)*x2050*x2051))+(((-1.0)*x2050*x2052))+(((-1.0)*gconst7*r20*x2053)))),IkReal(((((-1.0)*x2051*x2054))+((x2045*x2051))+(((-1.0)*x2047*x2055))+(((-1.0)*x2052*x2054))+((x2045*x2052))+((x2049*x2055))+(((-1.0)*x2046*x2056))+((x2048*x2056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2057.valid){
continue;
}
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(IKsign((((cj3*x2048*x2049))+((cj3*(r22*r22)))+(((-2.0)*cj3*gconst7*r21*x2045))+((cj3*x2046*x2047)))),-1);
if(!x2058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2057.value)+(((1.5707963267949)*(x2058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2059=IKcos(j4);
IkReal x2060=((1.0)*x2059);
IkReal x2061=IKsin(j4);
IkReal x2062=(gconst7*x2061);
IkReal x2063=((1.0)*gconst8*x2061);
IkReal x2064=((1.0)*sj0);
IkReal x2065=(cj1*sj2);
IkReal x2066=(cj2*sj1);
IkReal x2067=(gconst7*sj3);
IkReal x2068=(gconst8*sj3);
IkReal x2069=(cj3*x2061);
IkReal x2070=(cj3*gconst7*x2059);
IkReal x2071=((1.0)*cj3*gconst8*x2059);
IkReal x2072=(sj1*sj2);
IkReal x2073=((1.0)*cj1*cj2);
IkReal x2074=(cj3*gconst7);
IkReal x2075=(cj3*gconst8);
IkReal x2076=((1.0)*sj3*x2061);
IkReal x2077=(gconst8*sj3*x2059);
IkReal x2078=((1.0)*gconst7*sj3*x2059);
IkReal x2079=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2060))+(((-1.0)*r20*x2063))+((r21*x2062)));
evalcond[1]=((((-1.0)*r10*x2063))+(((-1.0)*r12*x2060))+cj0+((r11*x2062)));
evalcond[2]=((((-1.0)*r02*x2060))+(((-1.0)*r00*x2063))+((r01*x2062))+(((-1.0)*x2064)));
evalcond[3]=(x2065+x2066+(((-1.0)*r20*x2071))+((r22*x2069))+((r21*x2068))+((r21*x2070))+((r20*x2067)));
evalcond[4]=(x2072+((r21*x2075))+(((-1.0)*x2073))+((r20*x2074))+((r20*x2077))+(((-1.0)*r22*x2076))+(((-1.0)*r21*x2078)));
evalcond[5]=((((-1.0)*r00*x2071))+((r00*x2067))+((r01*x2070))+((r01*x2068))+(((-1.0)*cj0*x2073))+((cj0*x2072))+((r02*x2069)));
evalcond[6]=(((sj0*x2072))+(((-1.0)*r10*x2071))+((r11*x2068))+(((-1.0)*cj1*cj2*x2064))+((r10*x2067))+((r11*x2070))+((r12*x2069)));
evalcond[7]=(((r01*x2075))+((r00*x2074))+(((-1.0)*x2065*x2079))+((r00*x2077))+(((-1.0)*r02*x2076))+(((-1.0)*x2066*x2079))+(((-1.0)*r01*x2078)));
evalcond[8]=(((r10*x2074))+(((-1.0)*x2064*x2065))+((r11*x2075))+(((-1.0)*r11*x2078))+(((-1.0)*x2064*x2066))+(((-1.0)*r12*x2076))+((r10*x2077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2080=((1.0)*gconst7);
IkReal x2081=((1.0)*cj0);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2080))+(((-1.0)*(1.0)*gconst8*r21)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2081))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r01*x2081))+(((-1.0)*r11*sj0*x2080))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2084=IKcos(j4);
IkReal x2085=((1.0)*x2084);
IkReal x2086=IKsin(j4);
IkReal x2087=(gconst7*x2086);
IkReal x2088=((1.0)*gconst8*x2086);
IkReal x2089=((1.0)*sj0);
IkReal x2090=(cj1*sj2);
IkReal x2091=(cj2*sj1);
IkReal x2092=(gconst7*sj3);
IkReal x2093=(gconst8*sj3);
IkReal x2094=(cj3*x2086);
IkReal x2095=(cj3*gconst7*x2084);
IkReal x2096=((1.0)*cj3*gconst8*x2084);
IkReal x2097=(sj1*sj2);
IkReal x2098=((1.0)*cj1*cj2);
IkReal x2099=(cj3*gconst7);
IkReal x2100=(cj3*gconst8);
IkReal x2101=((1.0)*sj3*x2086);
IkReal x2102=(gconst8*sj3*x2084);
IkReal x2103=((1.0)*gconst7*sj3*x2084);
IkReal x2104=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2088))+((r21*x2087))+(((-1.0)*r22*x2085)));
evalcond[1]=((((-1.0)*r10*x2088))+cj0+((r11*x2087))+(((-1.0)*r12*x2085)));
evalcond[2]=(((r01*x2087))+(((-1.0)*r00*x2088))+(((-1.0)*r02*x2085))+(((-1.0)*x2089)));
evalcond[3]=(x2091+x2090+((r21*x2095))+((r21*x2093))+((r22*x2094))+((r20*x2092))+(((-1.0)*r20*x2096)));
evalcond[4]=(x2097+((r21*x2100))+(((-1.0)*r22*x2101))+((r20*x2099))+(((-1.0)*x2098))+(((-1.0)*r21*x2103))+((r20*x2102)));
evalcond[5]=((((-1.0)*cj0*x2098))+((r01*x2095))+((cj0*x2097))+(((-1.0)*r00*x2096))+((r01*x2093))+((r00*x2092))+((r02*x2094)));
evalcond[6]=((((-1.0)*r10*x2096))+((r11*x2095))+((r12*x2094))+((sj0*x2097))+((r11*x2093))+(((-1.0)*cj1*cj2*x2089))+((r10*x2092)));
evalcond[7]=((((-1.0)*x2091*x2104))+((r00*x2102))+(((-1.0)*x2090*x2104))+(((-1.0)*r02*x2101))+((r00*x2099))+((r01*x2100))+(((-1.0)*r01*x2103)));
evalcond[8]=((((-1.0)*x2089*x2091))+((r11*x2100))+((r10*x2099))+((r10*x2102))+(((-1.0)*r12*x2101))+(((-1.0)*r11*x2103))+(((-1.0)*x2089*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2105=((1.0)*sj0);
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(IKsign((((gconst8*r11))+((gconst7*r10)))),-1);
if(!x2106.valid){
continue;
}
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2105)),IkReal(((((-1.0)*gconst7*r21*x2105))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2106.value)))+(x2107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2108=IKcos(j4);
IkReal x2109=((1.0)*x2108);
IkReal x2110=IKsin(j4);
IkReal x2111=(gconst7*x2110);
IkReal x2112=((1.0)*gconst8*x2110);
IkReal x2113=((1.0)*sj0);
IkReal x2114=(cj1*sj2);
IkReal x2115=(cj2*sj1);
IkReal x2116=(gconst7*sj3);
IkReal x2117=(gconst8*sj3);
IkReal x2118=(cj3*x2110);
IkReal x2119=(cj3*gconst7*x2108);
IkReal x2120=((1.0)*cj3*gconst8*x2108);
IkReal x2121=(sj1*sj2);
IkReal x2122=((1.0)*cj1*cj2);
IkReal x2123=(cj3*gconst7);
IkReal x2124=(cj3*gconst8);
IkReal x2125=((1.0)*sj3*x2110);
IkReal x2126=(gconst8*sj3*x2108);
IkReal x2127=((1.0)*gconst7*sj3*x2108);
IkReal x2128=((1.0)*cj0);
evalcond[0]=(((r21*x2111))+(((-1.0)*r22*x2109))+(((-1.0)*r20*x2112)));
evalcond[1]=((((-1.0)*r12*x2109))+((r11*x2111))+cj0+(((-1.0)*r10*x2112)));
evalcond[2]=(((r01*x2111))+(((-1.0)*x2113))+(((-1.0)*r00*x2112))+(((-1.0)*r02*x2109)));
evalcond[3]=(x2115+x2114+((r20*x2116))+((r21*x2119))+((r21*x2117))+(((-1.0)*r20*x2120))+((r22*x2118)));
evalcond[4]=((((-1.0)*x2122))+((r20*x2126))+((r21*x2124))+((r20*x2123))+(((-1.0)*r22*x2125))+(((-1.0)*r21*x2127))+x2121);
evalcond[5]=(((r01*x2119))+(((-1.0)*cj0*x2122))+((r02*x2118))+((cj0*x2121))+((r00*x2116))+(((-1.0)*r00*x2120))+((r01*x2117)));
evalcond[6]=(((sj0*x2121))+((r12*x2118))+((r10*x2116))+(((-1.0)*cj1*cj2*x2113))+(((-1.0)*r10*x2120))+((r11*x2119))+((r11*x2117)));
evalcond[7]=(((r00*x2123))+(((-1.0)*r02*x2125))+((r00*x2126))+(((-1.0)*x2115*x2128))+((r01*x2124))+(((-1.0)*r01*x2127))+(((-1.0)*x2114*x2128)));
evalcond[8]=(((r11*x2124))+(((-1.0)*r12*x2125))+(((-1.0)*x2113*x2114))+((r10*x2123))+(((-1.0)*x2113*x2115))+((r10*x2126))+(((-1.0)*r11*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2129=((1.0)*r01);
IkReal x2130=((1.0)*r00);
IkReal x2132 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2132)==0){
continue;
}
IkReal x2131=pow(x2132,-0.5);
CheckValue<IkReal> x2133 = IKatan2WithCheck(IkReal(((-1.0)*x2129)),IkReal(((-1.0)*x2130)),IKFAST_ATAN2_MAGTHRESH);
if(!x2133.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2133.value))));
IkReal gconst10=((-1.0)*x2129*x2131);
IkReal gconst11=(x2130*x2131);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2134.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2135=((1.0)*r01);
IkReal x2136=((1.0)*r00);
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(((-1.0)*x2135)),IkReal(((-1.0)*x2136)),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
IkReal x2137=((-1.0)*(x2139.value));
IkReal x2138=x2131;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2137);
IkReal gconst9=((3.14159265358979)+x2137);
IkReal gconst10=((-1.0)*x2135*x2138);
IkReal gconst11=(x2136*x2138);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[6];
IkReal x2140=((1.0)*r01);
IkReal x2141=((1.0)*r00);
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal(((-1.0)*x2140)),IkReal(((-1.0)*x2141)),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
IkReal x2142=((-1.0)*(x2144.value));
IkReal x2143=x2131;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2142);
IkReal gconst9=((3.14159265358979)+x2142);
IkReal gconst10=((-1.0)*x2140*x2143);
IkReal gconst11=(x2141*x2143);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=cj0;
j4eval[4]=r22;
j4eval[5]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  || IKabs(j4eval[5]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2145=((1.0)*r01);
IkReal x2146=((1.0)*r00);
CheckValue<IkReal> x2149 = IKatan2WithCheck(IkReal(((-1.0)*x2145)),IkReal(((-1.0)*x2146)),IKFAST_ATAN2_MAGTHRESH);
if(!x2149.valid){
continue;
}
IkReal x2147=((-1.0)*(x2149.value));
IkReal x2148=x2131;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2147);
IkReal gconst9=((3.14159265358979)+x2147);
IkReal gconst10=((-1.0)*x2145*x2148);
IkReal gconst11=(x2146*x2148);
IkReal x2150=(r12*sj0);
IkReal x2151=((1.0)*(r02*r02));
IkReal x2154 = ((1.0)+(((-1.0)*x2151)));
if(IKabs(x2154)==0){
continue;
}
IkReal x2152=pow(x2154,-0.5);
IkReal x2153=(cj0*x2152);
j4eval[0]=((((1.0)*(IKabs(((((-1.0)*x2150))+(((-1.0)*cj0*r02)))))))+(((1.0)*(IKabs(((((-1.0)*x2151*x2153))+x2153+(((-1.0)*r02*x2150*x2152))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2155=((1.0)*gconst10);
IkReal x2156=((1.0)*cj0);
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2156)))),IkReal(((((-1.0)*gconst10*r01*x2156))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*r11*sj0*x2155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst11*r21))+(((-1.0)*r20*x2155)))),-1);
if(!x2158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2157.value)+(((1.5707963267949)*(x2158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2159=IKcos(j4);
IkReal x2160=((1.0)*x2159);
IkReal x2161=IKsin(j4);
IkReal x2162=(gconst10*x2161);
IkReal x2163=((1.0)*gconst11*x2161);
IkReal x2164=((1.0)*sj0);
IkReal x2165=(cj1*sj2);
IkReal x2166=(cj2*sj1);
IkReal x2167=(gconst10*sj3);
IkReal x2168=(gconst11*sj3);
IkReal x2169=(cj3*x2161);
IkReal x2170=(cj3*gconst10*x2159);
IkReal x2171=((1.0)*cj3*gconst11*x2159);
IkReal x2172=(sj1*sj2);
IkReal x2173=((1.0)*cj1*cj2);
IkReal x2174=(cj3*gconst10);
IkReal x2175=(cj3*gconst11);
IkReal x2176=((1.0)*sj3*x2161);
IkReal x2177=(gconst11*sj3*x2159);
IkReal x2178=((1.0)*gconst10*sj3*x2159);
IkReal x2179=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2160))+(((-1.0)*r20*x2163))+((r21*x2162)));
evalcond[1]=((((-1.0)*r12*x2160))+((r11*x2162))+cj0+(((-1.0)*r10*x2163)));
evalcond[2]=((((-1.0)*r00*x2163))+(((-1.0)*r02*x2160))+(((-1.0)*x2164))+((r01*x2162)));
evalcond[3]=(((r21*x2168))+x2166+x2165+((r21*x2170))+(((-1.0)*r20*x2171))+((r20*x2167))+((r22*x2169)));
evalcond[4]=(((r21*x2175))+x2172+(((-1.0)*r21*x2178))+(((-1.0)*r22*x2176))+(((-1.0)*x2173))+((r20*x2177))+((r20*x2174)));
evalcond[5]=(((r01*x2168))+(((-1.0)*r00*x2171))+(((-1.0)*cj0*x2173))+((r01*x2170))+((r00*x2167))+((r02*x2169))+((cj0*x2172)));
evalcond[6]=(((r10*x2167))+((r11*x2168))+(((-1.0)*r10*x2171))+(((-1.0)*cj1*cj2*x2164))+((r12*x2169))+((sj0*x2172))+((r11*x2170)));
evalcond[7]=((((-1.0)*x2165*x2179))+(((-1.0)*x2166*x2179))+(((-1.0)*r02*x2176))+((r00*x2177))+((r00*x2174))+(((-1.0)*r01*x2178))+((r01*x2175)));
evalcond[8]=((((-1.0)*r11*x2178))+((r11*x2175))+(((-1.0)*r12*x2176))+(((-1.0)*x2164*x2166))+((r10*x2177))+(((-1.0)*x2164*x2165))+((r10*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2180=((1.0)*gconst11);
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2180))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
CheckValue<IkReal> x2182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2180))+(((-1.0)*(1.0)*gconst10*r00)))),-1);
if(!x2182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2181.value)+(((1.5707963267949)*(x2182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2183=IKcos(j4);
IkReal x2184=((1.0)*x2183);
IkReal x2185=IKsin(j4);
IkReal x2186=(gconst10*x2185);
IkReal x2187=((1.0)*gconst11*x2185);
IkReal x2188=((1.0)*sj0);
IkReal x2189=(cj1*sj2);
IkReal x2190=(cj2*sj1);
IkReal x2191=(gconst10*sj3);
IkReal x2192=(gconst11*sj3);
IkReal x2193=(cj3*x2185);
IkReal x2194=(cj3*gconst10*x2183);
IkReal x2195=((1.0)*cj3*gconst11*x2183);
IkReal x2196=(sj1*sj2);
IkReal x2197=((1.0)*cj1*cj2);
IkReal x2198=(cj3*gconst10);
IkReal x2199=(cj3*gconst11);
IkReal x2200=((1.0)*sj3*x2185);
IkReal x2201=(gconst11*sj3*x2183);
IkReal x2202=((1.0)*gconst10*sj3*x2183);
IkReal x2203=((1.0)*cj0);
evalcond[0]=(((r21*x2186))+(((-1.0)*r22*x2184))+(((-1.0)*r20*x2187)));
evalcond[1]=(((r11*x2186))+(((-1.0)*r12*x2184))+cj0+(((-1.0)*r10*x2187)));
evalcond[2]=((((-1.0)*r00*x2187))+(((-1.0)*r02*x2184))+(((-1.0)*x2188))+((r01*x2186)));
evalcond[3]=(x2190+(((-1.0)*r20*x2195))+((r21*x2192))+x2189+((r21*x2194))+((r20*x2191))+((r22*x2193)));
evalcond[4]=(x2196+((r20*x2201))+(((-1.0)*r22*x2200))+((r20*x2198))+(((-1.0)*r21*x2202))+((r21*x2199))+(((-1.0)*x2197)));
evalcond[5]=((((-1.0)*cj0*x2197))+((r01*x2192))+(((-1.0)*r00*x2195))+((r00*x2191))+((cj0*x2196))+((r02*x2193))+((r01*x2194)));
evalcond[6]=(((sj0*x2196))+(((-1.0)*r10*x2195))+((r11*x2192))+((r10*x2191))+((r11*x2194))+((r12*x2193))+(((-1.0)*cj1*cj2*x2188)));
evalcond[7]=(((r01*x2199))+(((-1.0)*r02*x2200))+((r00*x2198))+(((-1.0)*r01*x2202))+(((-1.0)*x2190*x2203))+(((-1.0)*x2189*x2203))+((r00*x2201)));
evalcond[8]=(((r10*x2201))+(((-1.0)*x2188*x2189))+(((-1.0)*x2188*x2190))+((r10*x2198))+(((-1.0)*r11*x2202))+((r11*x2199))+(((-1.0)*r12*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2204=((1.0)*sj0);
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2204)),IkReal(((((-1.0)*gconst10*r21*x2204))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
CheckValue<IkReal> x2206=IKPowWithIntegerCheck(IKsign((((gconst11*r11))+((gconst10*r10)))),-1);
if(!x2206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2205.value)+(((1.5707963267949)*(x2206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2207=IKcos(j4);
IkReal x2208=((1.0)*x2207);
IkReal x2209=IKsin(j4);
IkReal x2210=(gconst10*x2209);
IkReal x2211=((1.0)*gconst11*x2209);
IkReal x2212=((1.0)*sj0);
IkReal x2213=(cj1*sj2);
IkReal x2214=(cj2*sj1);
IkReal x2215=(gconst10*sj3);
IkReal x2216=(gconst11*sj3);
IkReal x2217=(cj3*x2209);
IkReal x2218=(cj3*gconst10*x2207);
IkReal x2219=((1.0)*cj3*gconst11*x2207);
IkReal x2220=(sj1*sj2);
IkReal x2221=((1.0)*cj1*cj2);
IkReal x2222=(cj3*gconst10);
IkReal x2223=(cj3*gconst11);
IkReal x2224=((1.0)*sj3*x2209);
IkReal x2225=(gconst11*sj3*x2207);
IkReal x2226=((1.0)*gconst10*sj3*x2207);
IkReal x2227=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2208))+((r21*x2210))+(((-1.0)*r20*x2211)));
evalcond[1]=((((-1.0)*r10*x2211))+((r11*x2210))+cj0+(((-1.0)*r12*x2208)));
evalcond[2]=((((-1.0)*x2212))+(((-1.0)*r02*x2208))+((r01*x2210))+(((-1.0)*r00*x2211)));
evalcond[3]=((((-1.0)*r20*x2219))+((r21*x2216))+((r21*x2218))+((r22*x2217))+x2214+x2213+((r20*x2215)));
evalcond[4]=((((-1.0)*r21*x2226))+((r21*x2223))+x2220+((r20*x2225))+(((-1.0)*r22*x2224))+(((-1.0)*x2221))+((r20*x2222)));
evalcond[5]=(((cj0*x2220))+(((-1.0)*r00*x2219))+((r01*x2218))+((r01*x2216))+(((-1.0)*cj0*x2221))+((r00*x2215))+((r02*x2217)));
evalcond[6]=(((r11*x2216))+((r11*x2218))+((r12*x2217))+((sj0*x2220))+(((-1.0)*cj1*cj2*x2212))+((r10*x2215))+(((-1.0)*r10*x2219)));
evalcond[7]=((((-1.0)*x2214*x2227))+((r00*x2222))+(((-1.0)*x2213*x2227))+((r01*x2223))+((r00*x2225))+(((-1.0)*r02*x2224))+(((-1.0)*r01*x2226)));
evalcond[8]=(((r11*x2223))+(((-1.0)*r12*x2224))+(((-1.0)*x2212*x2213))+((r10*x2222))+((r10*x2225))+(((-1.0)*x2212*x2214))+(((-1.0)*r11*x2226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2228=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2228;
j4eval[1]=IKsign(x2228);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2229=((1.0)*sj5);
IkReal x2230=((((-1.0)*r20*x2229))+(((-1.0)*(1.0)*cj5*r21)));
j4eval[0]=x2230;
j4eval[1]=((IKabs(((((-1.0)*r11*x2229))+((cj5*r10)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2231=(r01*((cj3*r21)));
IkReal x2232=cj5*cj5;
IkReal x2233=((1.0)*cj5*sj5);
IkReal x2234=((((-1.0)*cj3*r00*r21*x2233))+((cj3*r02*r22))+(((-1.0)*x2231*x2232))+((cj3*r00*r20*x2232))+x2231+(((-1.0)*cj3*r01*r20*x2233)));
j4eval[0]=x2234;
j4eval[1]=IKsign(x2234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2235=(r01*((cj3*r21)));
IkReal x2236=cj5*cj5;
IkReal x2237=(cj5*sj5);
IkReal x2238=((1.0)*cj5*r01*sj3);
IkReal x2239=((1.0)*r00*sj3);
IkReal x2240=(sj3*x2236);
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2239))+(((-1.0)*r22*x2238)))),IkReal((((r00*r20*sj3*x2237))+((r01*r20*x2240))+((r00*r21*x2240))+(((-1.0)*r21*sj5*x2238))+(((-1.0)*r21*x2239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
CheckValue<IkReal> x2242=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2235*x2236))+(((-1.0)*cj3*r00*r21*x2237))+((cj3*r02*r22))+((cj3*r00*r20*x2236))+(((-1.0)*cj3*cj5*r01*r20*sj5))+x2235)),-1);
if(!x2242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2241.value)+(((1.5707963267949)*(x2242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2243=IKcos(j4);
IkReal x2244=((1.0)*x2243);
IkReal x2245=IKsin(j4);
IkReal x2246=(sj5*x2245);
IkReal x2247=((1.0)*cj5*x2245);
IkReal x2248=(cj5*sj3);
IkReal x2249=(sj3*sj5);
IkReal x2250=(cj3*x2245);
IkReal x2251=(cj3*sj5*x2243);
IkReal x2252=((1.0)*cj3*cj5*x2243);
IkReal x2253=(cj3*cj5);
IkReal x2254=(cj3*sj5);
IkReal x2255=((1.0)*sj3*x2245);
IkReal x2256=(cj5*sj3*x2243);
IkReal x2257=((1.0)*sj3*sj5*x2243);
IkReal x2258=(cj1*sj2);
IkReal x2259=(cj2*sj1);
IkReal x2260=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2244))+(((-1.0)*r20*x2247))+((r21*x2246)));
evalcond[1]=((((-1.0)*r10*x2247))+(((-1.0)*r12*x2244))+((r11*x2246)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2244))+(((-1.0)*r00*x2247))+((r01*x2246)));
evalcond[3]=(((r02*x2250))+((r01*x2248))+((r01*x2251))+(((-1.0)*r00*x2252))+((r00*x2249)));
evalcond[4]=((((-1.0)*r02*x2255))+((r01*x2253))+(((-1.0)*r01*x2257))+((r00*x2254))+((r00*x2256)));
evalcond[5]=(((r21*x2251))+(((-1.0)*r20*x2252))+((r22*x2250))+x2258+x2259+((r20*x2249))+((r21*x2248)));
evalcond[6]=((((-1.0)*r10*x2252))+x2260+((r12*x2250))+((r10*x2249))+((r11*x2251))+((r11*x2248)));
evalcond[7]=(x2260+(((-1.0)*r22*x2255))+((r21*x2253))+((r20*x2254))+(((-1.0)*r21*x2257))+((r20*x2256)));
evalcond[8]=((((-1.0)*r11*x2257))+((r11*x2253))+(((-1.0)*x2258))+((r10*x2254))+(((-1.0)*r12*x2255))+(((-1.0)*x2259))+((r10*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2261=((1.0)*sj5);
CheckValue<IkReal> x2262=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2261))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x2262.valid){
continue;
}
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r12)))),IkReal(((((-1.0)*r11*x2261))+((cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2262.value)))+(x2263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2264=IKcos(j4);
IkReal x2265=((1.0)*x2264);
IkReal x2266=IKsin(j4);
IkReal x2267=(sj5*x2266);
IkReal x2268=((1.0)*cj5*x2266);
IkReal x2269=(cj5*sj3);
IkReal x2270=(sj3*sj5);
IkReal x2271=(cj3*x2266);
IkReal x2272=(cj3*sj5*x2264);
IkReal x2273=((1.0)*cj3*cj5*x2264);
IkReal x2274=(cj3*cj5);
IkReal x2275=(cj3*sj5);
IkReal x2276=((1.0)*sj3*x2266);
IkReal x2277=(cj5*sj3*x2264);
IkReal x2278=((1.0)*sj3*sj5*x2264);
IkReal x2279=(cj1*sj2);
IkReal x2280=(cj2*sj1);
IkReal x2281=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2268))+(((-1.0)*r22*x2265))+((r21*x2267)));
evalcond[1]=(((r11*x2267))+(((-1.0)*r12*x2265))+(((-1.0)*r10*x2268)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2265))+((r01*x2267))+(((-1.0)*r00*x2268)));
evalcond[3]=((((-1.0)*r00*x2273))+((r00*x2270))+((r02*x2271))+((r01*x2272))+((r01*x2269)));
evalcond[4]=((((-1.0)*r02*x2276))+((r00*x2277))+((r00*x2275))+(((-1.0)*r01*x2278))+((r01*x2274)));
evalcond[5]=(((r20*x2270))+x2280+(((-1.0)*r20*x2273))+((r21*x2272))+x2279+((r21*x2269))+((r22*x2271)));
evalcond[6]=(((r10*x2270))+(((-1.0)*r10*x2273))+x2281+((r11*x2272))+((r12*x2271))+((r11*x2269)));
evalcond[7]=(x2281+(((-1.0)*r21*x2278))+(((-1.0)*r22*x2276))+((r21*x2274))+((r20*x2277))+((r20*x2275)));
evalcond[8]=((((-1.0)*x2280))+((r10*x2277))+((r10*x2275))+(((-1.0)*r12*x2276))+((r11*x2274))+(((-1.0)*r11*x2278))+(((-1.0)*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2282.valid){
continue;
}
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2282.value)))+(x2283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2284=IKcos(j4);
IkReal x2285=((1.0)*x2284);
IkReal x2286=IKsin(j4);
IkReal x2287=(sj5*x2286);
IkReal x2288=((1.0)*cj5*x2286);
IkReal x2289=(cj5*sj3);
IkReal x2290=(sj3*sj5);
IkReal x2291=(cj3*x2286);
IkReal x2292=(cj3*sj5*x2284);
IkReal x2293=((1.0)*cj3*cj5*x2284);
IkReal x2294=(cj3*cj5);
IkReal x2295=(cj3*sj5);
IkReal x2296=((1.0)*sj3*x2286);
IkReal x2297=(cj5*sj3*x2284);
IkReal x2298=((1.0)*sj3*sj5*x2284);
IkReal x2299=(cj1*sj2);
IkReal x2300=(cj2*sj1);
IkReal x2301=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2287))+(((-1.0)*r20*x2288))+(((-1.0)*r22*x2285)));
evalcond[1]=((((-1.0)*r10*x2288))+((r11*x2287))+(((-1.0)*r12*x2285)));
evalcond[2]=((-1.0)+((r01*x2287))+(((-1.0)*r02*x2285))+(((-1.0)*r00*x2288)));
evalcond[3]=(((r01*x2289))+((r00*x2290))+((r02*x2291))+((r01*x2292))+(((-1.0)*r00*x2293)));
evalcond[4]=(((r00*x2297))+((r01*x2294))+(((-1.0)*r02*x2296))+(((-1.0)*r01*x2298))+((r00*x2295)));
evalcond[5]=(x2299+((r21*x2289))+((r20*x2290))+((r22*x2291))+((r21*x2292))+(((-1.0)*r20*x2293))+x2300);
evalcond[6]=(((r11*x2289))+(((-1.0)*r10*x2293))+((r10*x2290))+((r11*x2292))+((r12*x2291))+x2301);
evalcond[7]=(((r21*x2294))+((r20*x2295))+(((-1.0)*r21*x2298))+x2301+(((-1.0)*r22*x2296))+((r20*x2297)));
evalcond[8]=(((r10*x2295))+((r10*x2297))+(((-1.0)*x2300))+(((-1.0)*r12*x2296))+(((-1.0)*r11*x2298))+((r11*x2294))+(((-1.0)*x2299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2302=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2302;
j4eval[1]=IKsign(x2302);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2303=((1.0)*cj5);
IkReal x2304=((((-1.0)*r21*x2303))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x2304;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2303)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2305=(r01*((cj3*r21)));
IkReal x2306=cj5*cj5;
IkReal x2307=((1.0)*cj5*sj5);
IkReal x2308=((((-1.0)*cj3*r01*r20*x2307))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x2307))+((cj3*r00*r20*x2306))+(((-1.0)*x2305*x2306))+x2305);
j4eval[0]=x2308;
j4eval[1]=IKsign(x2308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2309=(r01*((cj3*r21)));
IkReal x2310=cj5*cj5;
IkReal x2311=(cj5*sj5);
IkReal x2312=((1.0)*cj5*r01*sj3);
IkReal x2313=((1.0)*r00*sj3);
IkReal x2314=(sj3*x2310);
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign((((cj3*r02*r22))+((cj3*r00*r20*x2310))+(((-1.0)*cj3*cj5*r01*r20*sj5))+(((-1.0)*x2309*x2310))+(((-1.0)*cj3*r00*r21*x2311))+x2309)),-1);
if(!x2315.valid){
continue;
}
CheckValue<IkReal> x2316 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2312))+(((-1.0)*r22*sj5*x2313)))),IkReal((((r01*r20*x2314))+(((-1.0)*r21*x2313))+((r00*r20*sj3*x2311))+(((-1.0)*r21*sj5*x2312))+((r00*r21*x2314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2315.value)))+(x2316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2317=IKcos(j4);
IkReal x2318=((1.0)*x2317);
IkReal x2319=IKsin(j4);
IkReal x2320=(sj5*x2319);
IkReal x2321=((1.0)*cj5*x2319);
IkReal x2322=(cj5*sj3);
IkReal x2323=(sj3*sj5);
IkReal x2324=(cj3*x2319);
IkReal x2325=(cj3*sj5*x2317);
IkReal x2326=((1.0)*cj3*cj5*x2317);
IkReal x2327=(cj3*cj5);
IkReal x2328=(cj3*sj5);
IkReal x2329=((1.0)*sj3*x2319);
IkReal x2330=(cj5*sj3*x2317);
IkReal x2331=((1.0)*sj3*sj5*x2317);
IkReal x2332=(((cj1*sj2))+((cj2*sj1)));
IkReal x2333=(cj1*cj2);
IkReal x2334=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2318))+((r21*x2320))+(((-1.0)*r20*x2321)));
evalcond[1]=(((r11*x2320))+(((-1.0)*r12*x2318))+(((-1.0)*r10*x2321)));
evalcond[2]=((1.0)+(((-1.0)*r00*x2321))+((r01*x2320))+(((-1.0)*r02*x2318)));
evalcond[3]=((((-1.0)*r00*x2326))+((r01*x2325))+((r01*x2322))+((r00*x2323))+((r02*x2324)));
evalcond[4]=((((-1.0)*r02*x2329))+((r01*x2327))+((r00*x2328))+((r00*x2330))+(((-1.0)*r01*x2331)));
evalcond[5]=(((r20*x2323))+((r21*x2325))+((r22*x2324))+(((-1.0)*r20*x2326))+((r21*x2322))+x2332);
evalcond[6]=((((-1.0)*r12*x2329))+((r10*x2328))+(((-1.0)*r11*x2331))+x2332+((r10*x2330))+((r11*x2327)));
evalcond[7]=(((r10*x2323))+(((-1.0)*r10*x2326))+((r11*x2325))+((r11*x2322))+((r12*x2324))+x2333+(((-1.0)*x2334)));
evalcond[8]=((((-1.0)*r21*x2331))+((r20*x2330))+((r20*x2328))+(((-1.0)*r22*x2329))+((r21*x2327))+x2334+(((-1.0)*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2335=((1.0)*cj5);
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2335)))),-1);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2336.value)+(((1.5707963267949)*(x2337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2338=IKcos(j4);
IkReal x2339=((1.0)*x2338);
IkReal x2340=IKsin(j4);
IkReal x2341=(sj5*x2340);
IkReal x2342=((1.0)*cj5*x2340);
IkReal x2343=(cj5*sj3);
IkReal x2344=(sj3*sj5);
IkReal x2345=(cj3*x2340);
IkReal x2346=(cj3*sj5*x2338);
IkReal x2347=((1.0)*cj3*cj5*x2338);
IkReal x2348=(cj3*cj5);
IkReal x2349=(cj3*sj5);
IkReal x2350=((1.0)*sj3*x2340);
IkReal x2351=(cj5*sj3*x2338);
IkReal x2352=((1.0)*sj3*sj5*x2338);
IkReal x2353=(((cj1*sj2))+((cj2*sj1)));
IkReal x2354=(cj1*cj2);
IkReal x2355=(sj1*sj2);
evalcond[0]=(((r21*x2341))+(((-1.0)*r20*x2342))+(((-1.0)*r22*x2339)));
evalcond[1]=((((-1.0)*r10*x2342))+((r11*x2341))+(((-1.0)*r12*x2339)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2339))+(((-1.0)*r00*x2342))+((r01*x2341)));
evalcond[3]=(((r01*x2346))+((r02*x2345))+((r01*x2343))+((r00*x2344))+(((-1.0)*r00*x2347)));
evalcond[4]=((((-1.0)*r02*x2350))+(((-1.0)*r01*x2352))+((r00*x2349))+((r01*x2348))+((r00*x2351)));
evalcond[5]=((((-1.0)*r20*x2347))+((r22*x2345))+x2353+((r21*x2343))+((r20*x2344))+((r21*x2346)));
evalcond[6]=(((r10*x2349))+(((-1.0)*r12*x2350))+(((-1.0)*r11*x2352))+((r11*x2348))+x2353+((r10*x2351)));
evalcond[7]=(((r10*x2344))+(((-1.0)*x2355))+(((-1.0)*r10*x2347))+((r12*x2345))+x2354+((r11*x2346))+((r11*x2343)));
evalcond[8]=((((-1.0)*r21*x2352))+((r20*x2349))+((r21*x2348))+x2355+(((-1.0)*x2354))+((r20*x2351))+(((-1.0)*r22*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2358=IKcos(j4);
IkReal x2359=((1.0)*x2358);
IkReal x2360=IKsin(j4);
IkReal x2361=(sj5*x2360);
IkReal x2362=((1.0)*cj5*x2360);
IkReal x2363=(cj5*sj3);
IkReal x2364=(sj3*sj5);
IkReal x2365=(cj3*x2360);
IkReal x2366=(cj3*sj5*x2358);
IkReal x2367=((1.0)*cj3*cj5*x2358);
IkReal x2368=(cj3*cj5);
IkReal x2369=(cj3*sj5);
IkReal x2370=((1.0)*sj3*x2360);
IkReal x2371=(cj5*sj3*x2358);
IkReal x2372=((1.0)*sj3*sj5*x2358);
IkReal x2373=(((cj1*sj2))+((cj2*sj1)));
IkReal x2374=(cj1*cj2);
IkReal x2375=(sj1*sj2);
evalcond[0]=(((r21*x2361))+(((-1.0)*r20*x2362))+(((-1.0)*r22*x2359)));
evalcond[1]=((((-1.0)*r10*x2362))+(((-1.0)*r12*x2359))+((r11*x2361)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2359))+((r01*x2361))+(((-1.0)*r00*x2362)));
evalcond[3]=(((r01*x2363))+((r01*x2366))+((r00*x2364))+((r02*x2365))+(((-1.0)*r00*x2367)));
evalcond[4]=(((r01*x2368))+(((-1.0)*r02*x2370))+(((-1.0)*r01*x2372))+((r00*x2369))+((r00*x2371)));
evalcond[5]=((((-1.0)*r20*x2367))+((r20*x2364))+x2373+((r21*x2363))+((r21*x2366))+((r22*x2365)));
evalcond[6]=(((r10*x2371))+x2373+((r11*x2368))+(((-1.0)*r12*x2370))+((r10*x2369))+(((-1.0)*r11*x2372)));
evalcond[7]=(((r11*x2363))+x2374+((r12*x2365))+((r11*x2366))+(((-1.0)*x2375))+(((-1.0)*r10*x2367))+((r10*x2364)));
evalcond[8]=((((-1.0)*r21*x2372))+((r21*x2368))+x2375+(((-1.0)*r22*x2370))+(((-1.0)*x2374))+((r20*x2371))+((r20*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2377 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2377)==0){
continue;
}
IkReal x2376=pow(x2377,-0.5);
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x2378.value))));
IkReal gconst13=((-1.0)*r11*x2376);
IkReal gconst14=(r10*x2376);
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2379.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
IkReal x2380=((-1.0)*(((1.0)*(x2382.value))));
IkReal x2381=x2376;
sj5=gconst13;
cj5=gconst14;
j5=x2380;
IkReal gconst12=x2380;
IkReal gconst13=((-1.0)*r11*x2381);
IkReal gconst14=(r10*x2381);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
IkReal x2383=((-1.0)*(((1.0)*(x2385.value))));
IkReal x2384=x2376;
sj5=gconst13;
cj5=gconst14;
j5=x2383;
IkReal gconst12=x2383;
IkReal gconst13=((-1.0)*r11*x2384);
IkReal gconst14=(r10*x2384);
IkReal x2386=((1.0)*cj0*r02);
IkReal x2387=((1.0)*sj0);
IkReal x2388=r12*r12;
IkReal x2390 = ((1.0)+(((-1.0)*x2388)));
if(IKabs(x2390)==0){
continue;
}
IkReal x2389=pow(x2390,-0.5);
j4eval[0]=((IKabs(((((-1.0)*x2386))+(((-1.0)*r12*x2387)))))+(IKabs(((((-1.0)*x2387*x2388*x2389))+(((-1.0)*r12*x2386*x2389))+((sj0*x2389))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2393 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2393.valid){
continue;
}
IkReal x2391=((-1.0)*(((1.0)*(x2393.value))));
IkReal x2392=x2376;
sj5=gconst13;
cj5=gconst14;
j5=x2391;
IkReal gconst12=x2391;
IkReal gconst13=((-1.0)*r11*x2392);
IkReal gconst14=(r10*x2392);
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2396.valid){
continue;
}
IkReal x2394=(sj3*(x2396.value));
IkReal x2395=((((2.0)*r10*r11*r20*r21*x2394))+((x2394*(r10*r10)*(r20*r20)))+((sj3*(r22*r22)))+((x2394*(r11*r11)*(r21*r21))));
j4eval[0]=x2395;
j4eval[1]=IKsign(x2395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2397=(gconst13*r21);
IkReal x2398=gconst13*gconst13;
IkReal x2399=r21*r21;
IkReal x2400=gconst14*gconst14;
IkReal x2401=r20*r20;
IkReal x2402=(sj1*sj2);
IkReal x2403=((1.0)*cj1*cj2);
IkReal x2404=(cj3*r22);
IkReal x2405=(gconst14*r20);
IkReal x2406=(cj3*gconst13*gconst14);
IkReal x2407=(cj3*r20*r21);
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal((((r22*x2402))+((gconst14*r21*x2404))+((gconst13*r20*x2404))+(((-1.0)*r22*x2403)))),IkReal(((((-1.0)*x2400*x2407))+(((-1.0)*x2397*x2403))+(((-1.0)*x2401*x2406))+((cj1*cj2*x2405))+((x2399*x2406))+((x2398*x2407))+(((-1.0)*sj1*sj2*x2405))+((x2397*x2402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst14*r20*sj3*x2397))+((sj3*x2398*x2399))+((sj3*(r22*r22)))+((sj3*x2400*x2401)))),-1);
if(!x2409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2408.value)+(((1.5707963267949)*(x2409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2410=IKcos(j4);
IkReal x2411=((1.0)*x2410);
IkReal x2412=IKsin(j4);
IkReal x2413=(gconst13*x2412);
IkReal x2414=((1.0)*gconst14*x2412);
IkReal x2415=((1.0)*sj0);
IkReal x2416=(cj1*sj2);
IkReal x2417=(cj2*sj1);
IkReal x2418=(gconst13*sj3);
IkReal x2419=(gconst14*sj3);
IkReal x2420=(cj3*x2412);
IkReal x2421=(cj3*gconst13*x2410);
IkReal x2422=((1.0)*cj3*gconst14*x2410);
IkReal x2423=(sj1*sj2);
IkReal x2424=((1.0)*cj1*cj2);
IkReal x2425=(cj3*gconst13);
IkReal x2426=(cj3*gconst14);
IkReal x2427=((1.0)*sj3*x2412);
IkReal x2428=(gconst14*sj3*x2410);
IkReal x2429=((1.0)*gconst13*sj3*x2410);
IkReal x2430=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2411))+(((-1.0)*r20*x2414))+((r21*x2413)));
evalcond[1]=((((-1.0)*r10*x2414))+((r11*x2413))+(((-1.0)*r12*x2411))+cj0);
evalcond[2]=((((-1.0)*x2415))+(((-1.0)*r02*x2411))+((r01*x2413))+(((-1.0)*r00*x2414)));
evalcond[3]=((((-1.0)*r20*x2422))+((r20*x2418))+x2417+x2416+((r21*x2421))+((r21*x2419))+((r22*x2420)));
evalcond[4]=(((r20*x2428))+(((-1.0)*x2424))+((r21*x2426))+((r20*x2425))+(((-1.0)*r22*x2427))+x2423+(((-1.0)*r21*x2429)));
evalcond[5]=(((r00*x2418))+((r01*x2421))+((cj0*x2423))+(((-1.0)*cj0*x2424))+(((-1.0)*r00*x2422))+((r02*x2420))+((r01*x2419)));
evalcond[6]=(((r10*x2418))+(((-1.0)*cj1*cj2*x2415))+((sj0*x2423))+((r11*x2419))+((r12*x2420))+(((-1.0)*r10*x2422))+((r11*x2421)));
evalcond[7]=((((-1.0)*r02*x2427))+(((-1.0)*x2417*x2430))+((r00*x2425))+((r01*x2426))+(((-1.0)*r01*x2429))+((r00*x2428))+(((-1.0)*x2416*x2430)));
evalcond[8]=(((r11*x2426))+(((-1.0)*x2415*x2416))+(((-1.0)*x2415*x2417))+(((-1.0)*r11*x2429))+((r10*x2425))+(((-1.0)*r12*x2427))+((r10*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2431=((1.0)*gconst13);
IkReal x2432=((1.0)*cj0);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2431))+(((-1.0)*(1.0)*gconst14*r21)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2432)))),IkReal(((((-1.0)*gconst13*r01*x2432))+((gconst14*r10*sj0))+(((-1.0)*r11*sj0*x2431))+((cj0*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2435=IKcos(j4);
IkReal x2436=((1.0)*x2435);
IkReal x2437=IKsin(j4);
IkReal x2438=(gconst13*x2437);
IkReal x2439=((1.0)*gconst14*x2437);
IkReal x2440=((1.0)*sj0);
IkReal x2441=(cj1*sj2);
IkReal x2442=(cj2*sj1);
IkReal x2443=(gconst13*sj3);
IkReal x2444=(gconst14*sj3);
IkReal x2445=(cj3*x2437);
IkReal x2446=(cj3*gconst13*x2435);
IkReal x2447=((1.0)*cj3*gconst14*x2435);
IkReal x2448=(sj1*sj2);
IkReal x2449=((1.0)*cj1*cj2);
IkReal x2450=(cj3*gconst13);
IkReal x2451=(cj3*gconst14);
IkReal x2452=((1.0)*sj3*x2437);
IkReal x2453=(gconst14*sj3*x2435);
IkReal x2454=((1.0)*gconst13*sj3*x2435);
IkReal x2455=((1.0)*cj0);
evalcond[0]=(((r21*x2438))+(((-1.0)*r22*x2436))+(((-1.0)*r20*x2439)));
evalcond[1]=(((r11*x2438))+(((-1.0)*r10*x2439))+cj0+(((-1.0)*r12*x2436)));
evalcond[2]=((((-1.0)*r02*x2436))+(((-1.0)*x2440))+(((-1.0)*r00*x2439))+((r01*x2438)));
evalcond[3]=(((r20*x2443))+((r21*x2444))+((r22*x2445))+x2441+x2442+(((-1.0)*r20*x2447))+((r21*x2446)));
evalcond[4]=((((-1.0)*r21*x2454))+((r20*x2450))+((r20*x2453))+x2448+(((-1.0)*x2449))+(((-1.0)*r22*x2452))+((r21*x2451)));
evalcond[5]=((((-1.0)*r00*x2447))+(((-1.0)*cj0*x2449))+((r01*x2446))+((r02*x2445))+((cj0*x2448))+((r01*x2444))+((r00*x2443)));
evalcond[6]=(((r11*x2446))+((sj0*x2448))+((r12*x2445))+((r10*x2443))+((r11*x2444))+(((-1.0)*cj1*cj2*x2440))+(((-1.0)*r10*x2447)));
evalcond[7]=((((-1.0)*x2441*x2455))+((r00*x2453))+(((-1.0)*x2442*x2455))+(((-1.0)*r02*x2452))+((r01*x2451))+(((-1.0)*r01*x2454))+((r00*x2450)));
evalcond[8]=((((-1.0)*x2440*x2441))+((r10*x2450))+((r11*x2451))+(((-1.0)*x2440*x2442))+((r10*x2453))+(((-1.0)*r12*x2452))+(((-1.0)*r11*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2456=((1.0)*gconst14);
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2456))+((cj0*gconst13*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst13*r00))+(((-1.0)*r01*x2456)))),-1);
if(!x2458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2457.value)+(((1.5707963267949)*(x2458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2459=IKcos(j4);
IkReal x2460=((1.0)*x2459);
IkReal x2461=IKsin(j4);
IkReal x2462=(gconst13*x2461);
IkReal x2463=((1.0)*gconst14*x2461);
IkReal x2464=((1.0)*sj0);
IkReal x2465=(cj1*sj2);
IkReal x2466=(cj2*sj1);
IkReal x2467=(gconst13*sj3);
IkReal x2468=(gconst14*sj3);
IkReal x2469=(cj3*x2461);
IkReal x2470=(cj3*gconst13*x2459);
IkReal x2471=((1.0)*cj3*gconst14*x2459);
IkReal x2472=(sj1*sj2);
IkReal x2473=((1.0)*cj1*cj2);
IkReal x2474=(cj3*gconst13);
IkReal x2475=(cj3*gconst14);
IkReal x2476=((1.0)*sj3*x2461);
IkReal x2477=(gconst14*sj3*x2459);
IkReal x2478=((1.0)*gconst13*sj3*x2459);
IkReal x2479=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2460))+((r21*x2462))+(((-1.0)*r20*x2463)));
evalcond[1]=(((r11*x2462))+(((-1.0)*r10*x2463))+cj0+(((-1.0)*r12*x2460)));
evalcond[2]=((((-1.0)*r02*x2460))+(((-1.0)*r00*x2463))+((r01*x2462))+(((-1.0)*x2464)));
evalcond[3]=(x2465+x2466+((r21*x2470))+((r22*x2469))+(((-1.0)*r20*x2471))+((r21*x2468))+((r20*x2467)));
evalcond[4]=((((-1.0)*x2473))+((r21*x2475))+((r20*x2477))+((r20*x2474))+x2472+(((-1.0)*r21*x2478))+(((-1.0)*r22*x2476)));
evalcond[5]=((((-1.0)*cj0*x2473))+((r01*x2470))+(((-1.0)*r00*x2471))+((r01*x2468))+((r02*x2469))+((r00*x2467))+((cj0*x2472)));
evalcond[6]=(((r11*x2468))+((sj0*x2472))+(((-1.0)*r10*x2471))+((r12*x2469))+((r10*x2467))+(((-1.0)*cj1*cj2*x2464))+((r11*x2470)));
evalcond[7]=((((-1.0)*x2465*x2479))+((r01*x2475))+(((-1.0)*x2466*x2479))+(((-1.0)*r01*x2478))+((r00*x2474))+((r00*x2477))+(((-1.0)*r02*x2476)));
evalcond[8]=((((-1.0)*r12*x2476))+((r11*x2475))+(((-1.0)*x2464*x2465))+(((-1.0)*x2464*x2466))+((r10*x2477))+((r10*x2474))+(((-1.0)*r11*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2481 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2481)==0){
continue;
}
IkReal x2480=((1.0)*(pow(x2481,-0.5)));
CheckValue<IkReal> x2482 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2482.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x2482.value))));
IkReal gconst16=(r11*x2480);
IkReal gconst17=((-1.0)*r10*x2480);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2483.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2486 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2486.valid){
continue;
}
IkReal x2484=((-1.0)*(((1.0)*(x2486.value))));
IkReal x2485=x2480;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2484);
IkReal gconst15=((3.14159265358979)+x2484);
IkReal gconst16=(r11*x2485);
IkReal gconst17=((-1.0)*r10*x2485);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2489 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2489.valid){
continue;
}
IkReal x2487=((-1.0)*(((1.0)*(x2489.value))));
IkReal x2488=x2480;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2487);
IkReal gconst15=((3.14159265358979)+x2487);
IkReal gconst16=(r11*x2488);
IkReal gconst17=((-1.0)*r10*x2488);
IkReal x2490=((1.0)*cj0*r02);
IkReal x2491=((1.0)*sj0);
IkReal x2492=r12*r12;
IkReal x2495 = ((1.0)+(((-1.0)*x2492)));
if(IKabs(x2495)==0){
continue;
}
IkReal x2493=pow(x2495,-0.5);
IkReal x2494=(x2491*x2493);
j4eval[0]=((IKabs((x2494+(((-1.0)*r12*x2490*x2493))+(((-1.0)*x2492*x2494)))))+(IKabs(((((-1.0)*r12*x2491))+(((-1.0)*x2490))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2498 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2498.valid){
continue;
}
IkReal x2496=((-1.0)*(((1.0)*(x2498.value))));
IkReal x2497=x2480;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2496);
IkReal gconst15=((3.14159265358979)+x2496);
IkReal gconst16=(r11*x2497);
IkReal gconst17=((-1.0)*r10*x2497);
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2501.valid){
continue;
}
IkReal x2499=x2501.value;
IkReal x2500=((1.0)*cj3*x2499);
j4eval[0]=IKsign(((((2.0)*cj3*r10*r11*r20*r21*x2499))+((x2500*(r11*r11)*(r21*r21)))+((x2500*(r10*r10)*(r20*r20)))+((cj3*(r22*r22)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2502=(gconst17*r20);
IkReal x2503=gconst16*gconst16;
IkReal x2504=r21*r21;
IkReal x2505=gconst17*gconst17;
IkReal x2506=r20*r20;
IkReal x2507=((1.0)*r22);
IkReal x2508=(cj1*sj2);
IkReal x2509=(cj2*sj1);
IkReal x2510=((1.0)*r22*sj3);
IkReal x2511=((1.0)*gconst16*r21);
IkReal x2512=(gconst16*gconst17*sj3);
IkReal x2513=(r20*r21*sj3);
CheckValue<IkReal> x2514=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*gconst16*r21*x2502))+((cj3*x2503*x2504))+((cj3*x2505*x2506))+((cj3*(r22*r22))))),-1);
if(!x2514.valid){
continue;
}
CheckValue<IkReal> x2515 = IKatan2WithCheck(IkReal(((((-1.0)*x2507*x2509))+(((-1.0)*x2507*x2508))+(((-1.0)*gconst16*r20*x2510))+(((-1.0)*gconst17*r21*x2510)))),IkReal((((x2502*x2508))+(((-1.0)*x2503*x2513))+(((-1.0)*x2508*x2511))+(((-1.0)*x2504*x2512))+((x2502*x2509))+((x2506*x2512))+((x2505*x2513))+(((-1.0)*x2509*x2511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2514.value)))+(x2515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2516=IKcos(j4);
IkReal x2517=((1.0)*x2516);
IkReal x2518=IKsin(j4);
IkReal x2519=(gconst16*x2518);
IkReal x2520=((1.0)*gconst17*x2518);
IkReal x2521=((1.0)*sj0);
IkReal x2522=(cj1*sj2);
IkReal x2523=(cj2*sj1);
IkReal x2524=(gconst16*sj3);
IkReal x2525=(gconst17*sj3);
IkReal x2526=(cj3*x2518);
IkReal x2527=(cj3*gconst16*x2516);
IkReal x2528=((1.0)*cj3*gconst17*x2516);
IkReal x2529=(sj1*sj2);
IkReal x2530=((1.0)*cj1*cj2);
IkReal x2531=(cj3*gconst16);
IkReal x2532=(cj3*gconst17);
IkReal x2533=((1.0)*sj3*x2518);
IkReal x2534=(gconst17*sj3*x2516);
IkReal x2535=((1.0)*gconst16*sj3*x2516);
IkReal x2536=((1.0)*cj0);
evalcond[0]=(((r21*x2519))+(((-1.0)*r20*x2520))+(((-1.0)*r22*x2517)));
evalcond[1]=((((-1.0)*r10*x2520))+((r11*x2519))+cj0+(((-1.0)*r12*x2517)));
evalcond[2]=(((r01*x2519))+(((-1.0)*r00*x2520))+(((-1.0)*x2521))+(((-1.0)*r02*x2517)));
evalcond[3]=(((r22*x2526))+x2523+x2522+(((-1.0)*r20*x2528))+((r20*x2524))+((r21*x2527))+((r21*x2525)));
evalcond[4]=(((r21*x2532))+((r20*x2534))+(((-1.0)*r22*x2533))+x2529+((r20*x2531))+(((-1.0)*r21*x2535))+(((-1.0)*x2530)));
evalcond[5]=(((r00*x2524))+((cj0*x2529))+(((-1.0)*r00*x2528))+((r01*x2527))+(((-1.0)*cj0*x2530))+((r01*x2525))+((r02*x2526)));
evalcond[6]=(((r10*x2524))+((r12*x2526))+((r11*x2525))+((r11*x2527))+((sj0*x2529))+(((-1.0)*r10*x2528))+(((-1.0)*cj1*cj2*x2521)));
evalcond[7]=(((r01*x2532))+((r00*x2531))+((r00*x2534))+(((-1.0)*r01*x2535))+(((-1.0)*x2523*x2536))+(((-1.0)*x2522*x2536))+(((-1.0)*r02*x2533)));
evalcond[8]=(((r10*x2531))+(((-1.0)*r12*x2533))+((r10*x2534))+(((-1.0)*x2521*x2523))+(((-1.0)*x2521*x2522))+(((-1.0)*r11*x2535))+((r11*x2532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2537=((1.0)*gconst16);
IkReal x2538=((1.0)*cj0);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2537))+(((-1.0)*(1.0)*gconst17*r21)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2538)))),IkReal(((((-1.0)*gconst16*r01*x2538))+(((-1.0)*r11*sj0*x2537))+((gconst17*r10*sj0))+((cj0*gconst17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2541=IKcos(j4);
IkReal x2542=((1.0)*x2541);
IkReal x2543=IKsin(j4);
IkReal x2544=(gconst16*x2543);
IkReal x2545=((1.0)*gconst17*x2543);
IkReal x2546=((1.0)*sj0);
IkReal x2547=(cj1*sj2);
IkReal x2548=(cj2*sj1);
IkReal x2549=(gconst16*sj3);
IkReal x2550=(gconst17*sj3);
IkReal x2551=(cj3*x2543);
IkReal x2552=(cj3*gconst16*x2541);
IkReal x2553=((1.0)*cj3*gconst17*x2541);
IkReal x2554=(sj1*sj2);
IkReal x2555=((1.0)*cj1*cj2);
IkReal x2556=(cj3*gconst16);
IkReal x2557=(cj3*gconst17);
IkReal x2558=((1.0)*sj3*x2543);
IkReal x2559=(gconst17*sj3*x2541);
IkReal x2560=((1.0)*gconst16*sj3*x2541);
IkReal x2561=((1.0)*cj0);
evalcond[0]=(((r21*x2544))+(((-1.0)*r20*x2545))+(((-1.0)*r22*x2542)));
evalcond[1]=((((-1.0)*r12*x2542))+(((-1.0)*r10*x2545))+((r11*x2544))+cj0);
evalcond[2]=((((-1.0)*r02*x2542))+(((-1.0)*r00*x2545))+(((-1.0)*x2546))+((r01*x2544)));
evalcond[3]=(((r22*x2551))+((r21*x2550))+((r20*x2549))+(((-1.0)*r20*x2553))+x2548+x2547+((r21*x2552)));
evalcond[4]=(((r20*x2559))+(((-1.0)*r21*x2560))+x2554+((r21*x2557))+((r20*x2556))+(((-1.0)*r22*x2558))+(((-1.0)*x2555)));
evalcond[5]=(((r01*x2550))+((cj0*x2554))+((r02*x2551))+((r00*x2549))+(((-1.0)*r00*x2553))+(((-1.0)*cj0*x2555))+((r01*x2552)));
evalcond[6]=((((-1.0)*cj1*cj2*x2546))+((r10*x2549))+((r11*x2550))+(((-1.0)*r10*x2553))+((sj0*x2554))+((r12*x2551))+((r11*x2552)));
evalcond[7]=(((r00*x2559))+(((-1.0)*r02*x2558))+((r00*x2556))+(((-1.0)*r01*x2560))+(((-1.0)*x2547*x2561))+((r01*x2557))+(((-1.0)*x2548*x2561)));
evalcond[8]=((((-1.0)*x2546*x2548))+((r10*x2559))+((r10*x2556))+(((-1.0)*r11*x2560))+(((-1.0)*x2546*x2547))+(((-1.0)*r12*x2558))+((r11*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2562=((1.0)*gconst17);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst16*r00))+(((-1.0)*r01*x2562)))),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst16*r21))+(((-1.0)*cj0*r20*x2562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2565=IKcos(j4);
IkReal x2566=((1.0)*x2565);
IkReal x2567=IKsin(j4);
IkReal x2568=(gconst16*x2567);
IkReal x2569=((1.0)*gconst17*x2567);
IkReal x2570=((1.0)*sj0);
IkReal x2571=(cj1*sj2);
IkReal x2572=(cj2*sj1);
IkReal x2573=(gconst16*sj3);
IkReal x2574=(gconst17*sj3);
IkReal x2575=(cj3*x2567);
IkReal x2576=(cj3*gconst16*x2565);
IkReal x2577=((1.0)*cj3*gconst17*x2565);
IkReal x2578=(sj1*sj2);
IkReal x2579=((1.0)*cj1*cj2);
IkReal x2580=(cj3*gconst16);
IkReal x2581=(cj3*gconst17);
IkReal x2582=((1.0)*sj3*x2567);
IkReal x2583=(gconst17*sj3*x2565);
IkReal x2584=((1.0)*gconst16*sj3*x2565);
IkReal x2585=((1.0)*cj0);
evalcond[0]=(((r21*x2568))+(((-1.0)*r20*x2569))+(((-1.0)*r22*x2566)));
evalcond[1]=(((r11*x2568))+cj0+(((-1.0)*r10*x2569))+(((-1.0)*r12*x2566)));
evalcond[2]=((((-1.0)*r02*x2566))+(((-1.0)*x2570))+((r01*x2568))+(((-1.0)*r00*x2569)));
evalcond[3]=(((r21*x2574))+(((-1.0)*r20*x2577))+((r20*x2573))+((r22*x2575))+((r21*x2576))+x2572+x2571);
evalcond[4]=(((r20*x2583))+(((-1.0)*r22*x2582))+((r21*x2581))+(((-1.0)*x2579))+((r20*x2580))+x2578+(((-1.0)*r21*x2584)));
evalcond[5]=((((-1.0)*cj0*x2579))+((r02*x2575))+((r01*x2576))+((cj0*x2578))+((r00*x2573))+((r01*x2574))+(((-1.0)*r00*x2577)));
evalcond[6]=((((-1.0)*r10*x2577))+((r11*x2576))+((r12*x2575))+(((-1.0)*cj1*cj2*x2570))+((sj0*x2578))+((r11*x2574))+((r10*x2573)));
evalcond[7]=(((r01*x2581))+((r00*x2583))+(((-1.0)*r02*x2582))+((r00*x2580))+(((-1.0)*x2571*x2585))+(((-1.0)*x2572*x2585))+(((-1.0)*r01*x2584)));
evalcond[8]=(((r10*x2583))+((r11*x2581))+((r10*x2580))+(((-1.0)*r11*x2584))+(((-1.0)*r12*x2582))+(((-1.0)*x2570*x2572))+(((-1.0)*x2570*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2586=(((r20*sj5))+((cj5*r21)));
j4eval[0]=x2586;
j4eval[1]=IKsign(x2586);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2587=((1.0)*cj5);
IkReal x2588=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2587)));
j4eval[0]=x2588;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2587)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2589=(r11*((cj3*r21)));
IkReal x2590=cj5*cj5;
IkReal x2591=((1.0)*cj5*sj5);
IkReal x2592=(((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2591))+((cj3*r10*r20*x2590))+x2589+(((-1.0)*cj3*r11*r20*x2591))+(((-1.0)*x2589*x2590)));
j4eval[0]=x2592;
j4eval[1]=IKsign(x2592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2593=(r11*((cj3*r21)));
IkReal x2594=cj5*cj5;
IkReal x2595=(cj5*sj5);
IkReal x2596=((1.0)*cj5*r11*sj3);
IkReal x2597=((1.0)*r10*sj3);
IkReal x2598=(sj3*x2594);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign((x2593+(((-1.0)*x2593*x2594))+((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2595))+((cj3*r10*r20*x2594))+(((-1.0)*cj3*cj5*r11*r20*sj5)))),-1);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2596))+(((-1.0)*r22*sj5*x2597)))),IkReal((((r10*r20*sj3*x2595))+(((-1.0)*r21*sj5*x2596))+(((-1.0)*r21*x2597))+((r11*r20*x2598))+((r10*r21*x2598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2599.value)))+(x2600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2601=IKcos(j4);
IkReal x2602=((1.0)*x2601);
IkReal x2603=IKsin(j4);
IkReal x2604=(sj5*x2603);
IkReal x2605=((1.0)*cj5*x2603);
IkReal x2606=(cj5*sj3);
IkReal x2607=(sj3*sj5);
IkReal x2608=(cj3*x2603);
IkReal x2609=(cj3*sj5*x2601);
IkReal x2610=((1.0)*cj3*cj5*x2601);
IkReal x2611=(cj3*cj5);
IkReal x2612=(cj3*sj5);
IkReal x2613=((1.0)*sj3*x2603);
IkReal x2614=(cj5*sj3*x2601);
IkReal x2615=((1.0)*sj3*sj5*x2601);
IkReal x2616=(cj1*sj2);
IkReal x2617=(cj2*sj1);
IkReal x2618=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2604))+(((-1.0)*r20*x2605))+(((-1.0)*r22*x2602)));
evalcond[1]=((((-1.0)*r02*x2602))+(((-1.0)*r00*x2605))+((r01*x2604)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2602))+((r11*x2604))+(((-1.0)*r10*x2605)));
evalcond[3]=(((r10*x2607))+((r11*x2606))+(((-1.0)*r10*x2610))+((r12*x2608))+((r11*x2609)));
evalcond[4]=((((-1.0)*r11*x2615))+((r11*x2611))+((r10*x2612))+(((-1.0)*r12*x2613))+((r10*x2614)));
evalcond[5]=(((r20*x2607))+((r22*x2608))+(((-1.0)*r20*x2610))+x2616+x2617+((r21*x2609))+((r21*x2606)));
evalcond[6]=((((-1.0)*r00*x2610))+x2618+((r00*x2607))+((r01*x2606))+((r01*x2609))+((r02*x2608)));
evalcond[7]=(x2618+(((-1.0)*r21*x2615))+(((-1.0)*r22*x2613))+((r20*x2614))+((r20*x2612))+((r21*x2611)));
evalcond[8]=(((r00*x2614))+(((-1.0)*x2616))+((r01*x2611))+(((-1.0)*r02*x2613))+(((-1.0)*r01*x2615))+((r00*x2612))+(((-1.0)*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2619=((1.0)*cj5);
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2619)))),-1);
if(!x2620.valid){
continue;
}
CheckValue<IkReal> x2621 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2619))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2620.value)))+(x2621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2622=IKcos(j4);
IkReal x2623=((1.0)*x2622);
IkReal x2624=IKsin(j4);
IkReal x2625=(sj5*x2624);
IkReal x2626=((1.0)*cj5*x2624);
IkReal x2627=(cj5*sj3);
IkReal x2628=(sj3*sj5);
IkReal x2629=(cj3*x2624);
IkReal x2630=(cj3*sj5*x2622);
IkReal x2631=((1.0)*cj3*cj5*x2622);
IkReal x2632=(cj3*cj5);
IkReal x2633=(cj3*sj5);
IkReal x2634=((1.0)*sj3*x2624);
IkReal x2635=(cj5*sj3*x2622);
IkReal x2636=((1.0)*sj3*sj5*x2622);
IkReal x2637=(cj1*sj2);
IkReal x2638=(cj2*sj1);
IkReal x2639=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2626))+(((-1.0)*r22*x2623))+((r21*x2625)));
evalcond[1]=(((r01*x2625))+(((-1.0)*r00*x2626))+(((-1.0)*r02*x2623)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2626))+((r11*x2625))+(((-1.0)*r12*x2623)));
evalcond[3]=(((r11*x2630))+(((-1.0)*r10*x2631))+((r11*x2627))+((r12*x2629))+((r10*x2628)));
evalcond[4]=((((-1.0)*r11*x2636))+((r11*x2632))+((r10*x2635))+((r10*x2633))+(((-1.0)*r12*x2634)));
evalcond[5]=(((r21*x2630))+((r20*x2628))+(((-1.0)*r20*x2631))+((r22*x2629))+x2638+x2637+((r21*x2627)));
evalcond[6]=(((r00*x2628))+((r01*x2627))+((r01*x2630))+(((-1.0)*r00*x2631))+((r02*x2629))+x2639);
evalcond[7]=(((r20*x2635))+(((-1.0)*r22*x2634))+(((-1.0)*r21*x2636))+((r20*x2633))+x2639+((r21*x2632)));
evalcond[8]=(((r01*x2632))+((r00*x2635))+((r00*x2633))+(((-1.0)*r01*x2636))+(((-1.0)*x2638))+(((-1.0)*x2637))+(((-1.0)*r02*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(IKsign((((r20*sj5))+((cj5*r21)))),-1);
if(!x2640.valid){
continue;
}
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2640.value)))+(x2641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2642=IKcos(j4);
IkReal x2643=((1.0)*x2642);
IkReal x2644=IKsin(j4);
IkReal x2645=(sj5*x2644);
IkReal x2646=((1.0)*cj5*x2644);
IkReal x2647=(cj5*sj3);
IkReal x2648=(sj3*sj5);
IkReal x2649=(cj3*x2644);
IkReal x2650=(cj3*sj5*x2642);
IkReal x2651=((1.0)*cj3*cj5*x2642);
IkReal x2652=(cj3*cj5);
IkReal x2653=(cj3*sj5);
IkReal x2654=((1.0)*sj3*x2644);
IkReal x2655=(cj5*sj3*x2642);
IkReal x2656=((1.0)*sj3*sj5*x2642);
IkReal x2657=(cj1*sj2);
IkReal x2658=(cj2*sj1);
IkReal x2659=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2646))+(((-1.0)*r22*x2643))+((r21*x2645)));
evalcond[1]=((((-1.0)*r02*x2643))+(((-1.0)*r00*x2646))+((r01*x2645)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2646))+((r11*x2645))+(((-1.0)*r12*x2643)));
evalcond[3]=(((r12*x2649))+((r11*x2650))+(((-1.0)*r10*x2651))+((r10*x2648))+((r11*x2647)));
evalcond[4]=(((r11*x2652))+((r10*x2655))+(((-1.0)*r12*x2654))+((r10*x2653))+(((-1.0)*r11*x2656)));
evalcond[5]=(((r21*x2647))+((r21*x2650))+((r22*x2649))+((r20*x2648))+x2657+x2658+(((-1.0)*r20*x2651)));
evalcond[6]=(((r02*x2649))+(((-1.0)*r00*x2651))+((r00*x2648))+((r01*x2650))+((r01*x2647))+x2659);
evalcond[7]=((((-1.0)*r22*x2654))+(((-1.0)*r21*x2656))+((r20*x2653))+((r21*x2652))+((r20*x2655))+x2659);
evalcond[8]=(((r00*x2655))+(((-1.0)*r01*x2656))+((r00*x2653))+(((-1.0)*r02*x2654))+((r01*x2652))+(((-1.0)*x2657))+(((-1.0)*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2660=((1.0)*cj5);
IkReal x2661=((((-1.0)*r21*x2660))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x2661;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2660))))));
j4eval[2]=IKsign(x2661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2662=((1.0)*sj5);
IkReal x2663=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2662)));
j4eval[0]=x2663;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2662)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2664=(r11*((cj3*r21)));
IkReal x2665=cj5*cj5;
IkReal x2666=((1.0)*cj5*sj5);
IkReal x2667=(x2664+((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2666))+(((-1.0)*x2664*x2665))+((cj3*r10*r20*x2665))+(((-1.0)*cj3*r11*r20*x2666)));
j4eval[0]=x2667;
j4eval[1]=IKsign(x2667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=(r11*((cj3*r21)));
IkReal x2669=cj5*cj5;
IkReal x2670=(cj5*sj5);
IkReal x2671=((1.0)*cj5*r11*sj3);
IkReal x2672=((1.0)*r10*sj3);
IkReal x2673=(sj3*x2669);
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign((((cj3*r10*r20*x2669))+x2668+((cj3*r12*r22))+(((-1.0)*x2668*x2669))+(((-1.0)*cj3*cj5*r11*r20*sj5))+(((-1.0)*cj3*r10*r21*x2670)))),-1);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2672))+(((-1.0)*r22*x2671)))),IkReal((((r10*r20*sj3*x2670))+(((-1.0)*r21*x2672))+((r11*r20*x2673))+((r10*r21*x2673))+(((-1.0)*r21*sj5*x2671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2674.value)))+(x2675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2676=IKcos(j4);
IkReal x2677=((1.0)*x2676);
IkReal x2678=IKsin(j4);
IkReal x2679=(sj5*x2678);
IkReal x2680=((1.0)*cj5*x2678);
IkReal x2681=(cj5*sj3);
IkReal x2682=(sj3*sj5);
IkReal x2683=(cj3*x2678);
IkReal x2684=(cj3*sj5*x2676);
IkReal x2685=((1.0)*cj3*cj5*x2676);
IkReal x2686=(cj3*cj5);
IkReal x2687=(cj3*sj5);
IkReal x2688=((1.0)*sj3*x2678);
IkReal x2689=(cj5*sj3*x2676);
IkReal x2690=((1.0)*sj3*sj5*x2676);
IkReal x2691=(((cj1*sj2))+((cj2*sj1)));
IkReal x2692=(cj1*cj2);
IkReal x2693=(sj1*sj2);
evalcond[0]=((((-1.0)*r20*x2680))+((r21*x2679))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r00*x2680))+((r01*x2679))+(((-1.0)*r02*x2677)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2680))+(((-1.0)*r12*x2677))+((r11*x2679)));
evalcond[3]=(((r10*x2682))+((r11*x2684))+(((-1.0)*r10*x2685))+((r11*x2681))+((r12*x2683)));
evalcond[4]=(((r10*x2689))+((r10*x2687))+(((-1.0)*r11*x2690))+((r11*x2686))+(((-1.0)*r12*x2688)));
evalcond[5]=(x2691+(((-1.0)*r20*x2685))+((r20*x2682))+((r21*x2684))+((r21*x2681))+((r22*x2683)));
evalcond[6]=(((r00*x2687))+(((-1.0)*r01*x2690))+x2691+(((-1.0)*r02*x2688))+((r00*x2689))+((r01*x2686)));
evalcond[7]=(x2692+((r01*x2684))+(((-1.0)*x2693))+((r02*x2683))+((r01*x2681))+(((-1.0)*r00*x2685))+((r00*x2682)));
evalcond[8]=(x2693+(((-1.0)*r21*x2690))+(((-1.0)*r22*x2688))+((r20*x2689))+(((-1.0)*x2692))+((r20*x2687))+((r21*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2694=((1.0)*sj5);
CheckValue<IkReal> x2695 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*r21*x2694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2695.valid){
continue;
}
CheckValue<IkReal> x2696=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2694)))),-1);
if(!x2696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2695.value)+(((1.5707963267949)*(x2696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2697=IKcos(j4);
IkReal x2698=((1.0)*x2697);
IkReal x2699=IKsin(j4);
IkReal x2700=(sj5*x2699);
IkReal x2701=((1.0)*cj5*x2699);
IkReal x2702=(cj5*sj3);
IkReal x2703=(sj3*sj5);
IkReal x2704=(cj3*x2699);
IkReal x2705=(cj3*sj5*x2697);
IkReal x2706=((1.0)*cj3*cj5*x2697);
IkReal x2707=(cj3*cj5);
IkReal x2708=(cj3*sj5);
IkReal x2709=((1.0)*sj3*x2699);
IkReal x2710=(cj5*sj3*x2697);
IkReal x2711=((1.0)*sj3*sj5*x2697);
IkReal x2712=(((cj1*sj2))+((cj2*sj1)));
IkReal x2713=(cj1*cj2);
IkReal x2714=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2698))+(((-1.0)*r20*x2701))+((r21*x2700)));
evalcond[1]=((((-1.0)*r00*x2701))+((r01*x2700))+(((-1.0)*r02*x2698)));
evalcond[2]=((-1.0)+((r11*x2700))+(((-1.0)*r12*x2698))+(((-1.0)*r10*x2701)));
evalcond[3]=(((r11*x2705))+((r10*x2703))+((r12*x2704))+((r11*x2702))+(((-1.0)*r10*x2706)));
evalcond[4]=(((r10*x2710))+(((-1.0)*r12*x2709))+(((-1.0)*r11*x2711))+((r11*x2707))+((r10*x2708)));
evalcond[5]=(((r20*x2703))+(((-1.0)*r20*x2706))+((r22*x2704))+((r21*x2702))+((r21*x2705))+x2712);
evalcond[6]=((((-1.0)*r02*x2709))+((r00*x2710))+(((-1.0)*r01*x2711))+((r01*x2707))+((r00*x2708))+x2712);
evalcond[7]=(((r02*x2704))+((r01*x2702))+((r00*x2703))+(((-1.0)*r00*x2706))+(((-1.0)*x2714))+x2713+((r01*x2705)));
evalcond[8]=(((r20*x2708))+((r20*x2710))+(((-1.0)*x2713))+((r21*x2707))+(((-1.0)*r22*x2709))+(((-1.0)*r21*x2711))+x2714);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2715=((1.0)*cj5);
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2715)))),-1);
if(!x2717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2716.value)+(((1.5707963267949)*(x2717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2718=IKcos(j4);
IkReal x2719=((1.0)*x2718);
IkReal x2720=IKsin(j4);
IkReal x2721=(sj5*x2720);
IkReal x2722=((1.0)*cj5*x2720);
IkReal x2723=(cj5*sj3);
IkReal x2724=(sj3*sj5);
IkReal x2725=(cj3*x2720);
IkReal x2726=(cj3*sj5*x2718);
IkReal x2727=((1.0)*cj3*cj5*x2718);
IkReal x2728=(cj3*cj5);
IkReal x2729=(cj3*sj5);
IkReal x2730=((1.0)*sj3*x2720);
IkReal x2731=(cj5*sj3*x2718);
IkReal x2732=((1.0)*sj3*sj5*x2718);
IkReal x2733=(((cj1*sj2))+((cj2*sj1)));
IkReal x2734=(cj1*cj2);
IkReal x2735=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2719))+((r21*x2721))+(((-1.0)*r20*x2722)));
evalcond[1]=(((r01*x2721))+(((-1.0)*r00*x2722))+(((-1.0)*r02*x2719)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2722))+((r11*x2721))+(((-1.0)*r12*x2719)));
evalcond[3]=(((r10*x2724))+((r11*x2723))+(((-1.0)*r10*x2727))+((r12*x2725))+((r11*x2726)));
evalcond[4]=((((-1.0)*r11*x2732))+((r11*x2728))+((r10*x2731))+(((-1.0)*r12*x2730))+((r10*x2729)));
evalcond[5]=(((r21*x2726))+x2733+((r20*x2724))+((r21*x2723))+((r22*x2725))+(((-1.0)*r20*x2727)));
evalcond[6]=((((-1.0)*r01*x2732))+x2733+((r01*x2728))+(((-1.0)*r02*x2730))+((r00*x2729))+((r00*x2731)));
evalcond[7]=(x2734+((r01*x2723))+(((-1.0)*x2735))+((r01*x2726))+((r02*x2725))+(((-1.0)*r00*x2727))+((r00*x2724)));
evalcond[8]=(((r21*x2728))+x2735+(((-1.0)*x2734))+((r20*x2731))+(((-1.0)*r22*x2730))+(((-1.0)*r21*x2732))+((r20*x2729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r11))+(IKabs(r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2736=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2736);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2736);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=(((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2737=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2737);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2737);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
IkReal x2738=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2738)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2738)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2739=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2739);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2739);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(r12,-1);
if(!x2741.valid){
continue;
}
IkReal x2740=x2741.value;
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(cj3,-1);
if(!x2742.valid){
continue;
}
if( IKabs((x2740*(x2742.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*x2740)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2740*(x2742.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))))+IKsqr((cj0*x2740))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2740*(x2742.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))), (cj0*x2740));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2743=IKcos(j4);
IkReal x2744=((1.0)*r12);
IkReal x2745=IKsin(j4);
IkReal x2746=(sj5*x2745);
IkReal x2747=((1.0)*cj5*x2745);
IkReal x2748=(sj1*sj2);
IkReal x2749=((1.0)*sj0);
IkReal x2750=(cj1*sj2);
IkReal x2751=(cj2*sj1);
IkReal x2752=(cj5*sj3);
IkReal x2753=(sj3*sj5);
IkReal x2754=(cj3*sj5*x2743);
IkReal x2755=((1.0)*cj3*cj5*x2743);
IkReal x2756=((1.0)*cj1*cj2);
IkReal x2757=(cj3*cj5);
IkReal x2758=(cj3*sj5);
IkReal x2759=(cj5*sj3*x2743);
IkReal x2760=((1.0)*sj3*sj5*x2743);
IkReal x2761=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2743*x2744))+cj0);
evalcond[1]=(((r21*x2746))+(((-1.0)*r20*x2747)));
evalcond[2]=((((-1.0)*cj1*cj2*x2749))+((cj3*r12*x2745))+((sj0*x2748)));
evalcond[3]=((((-1.0)*x2749))+((r01*x2746))+(((-1.0)*r00*x2747)));
evalcond[4]=((((-1.0)*x2749*x2751))+(((-1.0)*x2749*x2750))+(((-1.0)*sj3*x2744*x2745)));
evalcond[5]=(((r21*x2752))+((r20*x2753))+x2751+x2750+(((-1.0)*r20*x2755))+((r21*x2754)));
evalcond[6]=((((-1.0)*x2756))+((r21*x2757))+((r20*x2759))+x2748+(((-1.0)*r21*x2760))+((r20*x2758)));
evalcond[7]=(((cj0*x2748))+((r00*x2753))+(((-1.0)*r00*x2755))+(((-1.0)*cj0*x2756))+((r01*x2752))+((r01*x2754)));
evalcond[8]=(((r00*x2759))+((r01*x2757))+(((-1.0)*r01*x2760))+((r00*x2758))+(((-1.0)*x2750*x2761))+(((-1.0)*x2751*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2762=((1.0)*cj5);
CheckValue<IkReal> x2763=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2762))),-1);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2762))),-1);
if(!x2764.valid){
continue;
}
if( IKabs((sj0*(x2763.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2764.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2762))+(((-1.0)*(1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2763.value)))+IKsqr(((x2764.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2762))+(((-1.0)*(1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2763.value)), ((x2764.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2762))+(((-1.0)*(1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2765=IKcos(j4);
IkReal x2766=((1.0)*r12);
IkReal x2767=IKsin(j4);
IkReal x2768=(sj5*x2767);
IkReal x2769=((1.0)*cj5*x2767);
IkReal x2770=(sj1*sj2);
IkReal x2771=((1.0)*sj0);
IkReal x2772=(cj1*sj2);
IkReal x2773=(cj2*sj1);
IkReal x2774=(cj5*sj3);
IkReal x2775=(sj3*sj5);
IkReal x2776=(cj3*sj5*x2765);
IkReal x2777=((1.0)*cj3*cj5*x2765);
IkReal x2778=((1.0)*cj1*cj2);
IkReal x2779=(cj3*cj5);
IkReal x2780=(cj3*sj5);
IkReal x2781=(cj5*sj3*x2765);
IkReal x2782=((1.0)*sj3*sj5*x2765);
IkReal x2783=((1.0)*cj0);
evalcond[0]=(cj0+(((-1.0)*x2765*x2766)));
evalcond[1]=((((-1.0)*r20*x2769))+((r21*x2768)));
evalcond[2]=(((cj3*r12*x2767))+(((-1.0)*cj1*cj2*x2771))+((sj0*x2770)));
evalcond[3]=((((-1.0)*x2771))+((r01*x2768))+(((-1.0)*r00*x2769)));
evalcond[4]=((((-1.0)*sj3*x2766*x2767))+(((-1.0)*x2771*x2772))+(((-1.0)*x2771*x2773)));
evalcond[5]=(((r21*x2774))+(((-1.0)*r20*x2777))+((r20*x2775))+x2772+x2773+((r21*x2776)));
evalcond[6]=(((r21*x2779))+(((-1.0)*r21*x2782))+(((-1.0)*x2778))+((r20*x2780))+((r20*x2781))+x2770);
evalcond[7]=(((cj0*x2770))+(((-1.0)*r00*x2777))+(((-1.0)*cj0*x2778))+((r01*x2776))+((r01*x2774))+((r00*x2775)));
evalcond[8]=((((-1.0)*x2772*x2783))+((r01*x2779))+(((-1.0)*x2773*x2783))+((r00*x2781))+((r00*x2780))+(((-1.0)*r01*x2782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2784=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))),-1);
if(!x2784.valid){
continue;
}
CheckValue<IkReal> x2785=IKPowWithIntegerCheck(r12,-1);
if(!x2785.valid){
continue;
}
if( IKabs((sj0*(x2784.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*(x2785.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2784.value)))+IKsqr((cj0*(x2785.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2784.value)), (cj0*(x2785.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2786=IKcos(j4);
IkReal x2787=((1.0)*r12);
IkReal x2788=IKsin(j4);
IkReal x2789=(sj5*x2788);
IkReal x2790=((1.0)*cj5*x2788);
IkReal x2791=(sj1*sj2);
IkReal x2792=((1.0)*sj0);
IkReal x2793=(cj1*sj2);
IkReal x2794=(cj2*sj1);
IkReal x2795=(cj5*sj3);
IkReal x2796=(sj3*sj5);
IkReal x2797=(cj3*sj5*x2786);
IkReal x2798=((1.0)*cj3*cj5*x2786);
IkReal x2799=((1.0)*cj1*cj2);
IkReal x2800=(cj3*cj5);
IkReal x2801=(cj3*sj5);
IkReal x2802=(cj5*sj3*x2786);
IkReal x2803=((1.0)*sj3*sj5*x2786);
IkReal x2804=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2786*x2787))+cj0);
evalcond[1]=(((r21*x2789))+(((-1.0)*r20*x2790)));
evalcond[2]=(((cj3*r12*x2788))+((sj0*x2791))+(((-1.0)*cj1*cj2*x2792)));
evalcond[3]=((((-1.0)*r00*x2790))+((r01*x2789))+(((-1.0)*x2792)));
evalcond[4]=((((-1.0)*x2792*x2794))+(((-1.0)*sj3*x2787*x2788))+(((-1.0)*x2792*x2793)));
evalcond[5]=(x2793+x2794+((r21*x2795))+((r21*x2797))+((r20*x2796))+(((-1.0)*r20*x2798)));
evalcond[6]=(x2791+(((-1.0)*r21*x2803))+(((-1.0)*x2799))+((r20*x2801))+((r21*x2800))+((r20*x2802)));
evalcond[7]=((((-1.0)*cj0*x2799))+((r01*x2795))+((r01*x2797))+((r00*x2796))+(((-1.0)*r00*x2798))+((cj0*x2791)));
evalcond[8]=((((-1.0)*x2794*x2804))+(((-1.0)*x2793*x2804))+((r00*x2801))+((r00*x2802))+(((-1.0)*r01*x2803))+((r01*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2805=((1.0)*cj0);
IkReal x2806=((1.0)*sj0);
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x2807.valid){
continue;
}
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2805))+(((-1.0)*r12*x2806)))),IkReal(((((-1.0)*r11*sj5*x2806))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2807.value)))+(x2808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2809=IKcos(j4);
IkReal x2810=((1.0)*x2809);
IkReal x2811=IKsin(j4);
IkReal x2812=(sj5*x2811);
IkReal x2813=((1.0)*cj5*x2811);
IkReal x2814=((1.0)*sj0);
IkReal x2815=(cj1*sj2);
IkReal x2816=(cj2*sj1);
IkReal x2817=(cj5*sj3);
IkReal x2818=(sj3*sj5);
IkReal x2819=(cj3*x2811);
IkReal x2820=(cj3*sj5*x2809);
IkReal x2821=((1.0)*cj3*cj5*x2809);
IkReal x2822=(sj1*sj2);
IkReal x2823=((1.0)*cj1*cj2);
IkReal x2824=(cj3*cj5);
IkReal x2825=(cj3*sj5);
IkReal x2826=((1.0)*sj3*x2811);
IkReal x2827=(cj5*sj3*x2809);
IkReal x2828=((1.0)*sj3*sj5*x2809);
IkReal x2829=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2810))+((r21*x2812))+(((-1.0)*r20*x2813)));
evalcond[1]=(((r11*x2812))+cj0+(((-1.0)*r12*x2810))+(((-1.0)*r10*x2813)));
evalcond[2]=((((-1.0)*r02*x2810))+((r01*x2812))+(((-1.0)*x2814))+(((-1.0)*r00*x2813)));
evalcond[3]=(((r22*x2819))+x2816+x2815+((r21*x2817))+((r20*x2818))+((r21*x2820))+(((-1.0)*r20*x2821)));
evalcond[4]=(((r20*x2827))+x2822+(((-1.0)*r21*x2828))+(((-1.0)*r22*x2826))+((r20*x2825))+((r21*x2824))+(((-1.0)*x2823)));
evalcond[5]=(((r00*x2825))+(((-1.0)*x2815*x2829))+((r01*x2824))+(((-1.0)*x2816*x2829))+((r00*x2827))+(((-1.0)*r02*x2826))+(((-1.0)*r01*x2828)));
evalcond[6]=((((-1.0)*cj0*x2823))+((cj0*x2822))+((r01*x2820))+((r02*x2819))+((r01*x2817))+((r00*x2818))+(((-1.0)*r00*x2821)));
evalcond[7]=(((r10*x2825))+((r11*x2824))+(((-1.0)*x2814*x2815))+(((-1.0)*r11*x2828))+((r10*x2827))+(((-1.0)*r12*x2826))+(((-1.0)*x2814*x2816)));
evalcond[8]=((((-1.0)*r10*x2821))+((sj0*x2822))+((r11*x2817))+((r12*x2819))+(((-1.0)*cj1*cj2*x2814))+((r11*x2820))+((r10*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2830=((1.0)*cj5);
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2830))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2830)))),-1);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2831.value)+(((1.5707963267949)*(x2832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2833=IKcos(j4);
IkReal x2834=((1.0)*x2833);
IkReal x2835=IKsin(j4);
IkReal x2836=(sj5*x2835);
IkReal x2837=((1.0)*cj5*x2835);
IkReal x2838=((1.0)*sj0);
IkReal x2839=(cj1*sj2);
IkReal x2840=(cj2*sj1);
IkReal x2841=(cj5*sj3);
IkReal x2842=(sj3*sj5);
IkReal x2843=(cj3*x2835);
IkReal x2844=(cj3*sj5*x2833);
IkReal x2845=((1.0)*cj3*cj5*x2833);
IkReal x2846=(sj1*sj2);
IkReal x2847=((1.0)*cj1*cj2);
IkReal x2848=(cj3*cj5);
IkReal x2849=(cj3*sj5);
IkReal x2850=((1.0)*sj3*x2835);
IkReal x2851=(cj5*sj3*x2833);
IkReal x2852=((1.0)*sj3*sj5*x2833);
IkReal x2853=((1.0)*cj0);
evalcond[0]=(((r21*x2836))+(((-1.0)*r22*x2834))+(((-1.0)*r20*x2837)));
evalcond[1]=(((r11*x2836))+(((-1.0)*r10*x2837))+(((-1.0)*r12*x2834))+cj0);
evalcond[2]=((((-1.0)*x2838))+((r01*x2836))+(((-1.0)*r00*x2837))+(((-1.0)*r02*x2834)));
evalcond[3]=(((r21*x2841))+((r22*x2843))+((r21*x2844))+((r20*x2842))+(((-1.0)*r20*x2845))+x2840+x2839);
evalcond[4]=(((r20*x2851))+((r21*x2848))+((r20*x2849))+(((-1.0)*r21*x2852))+(((-1.0)*r22*x2850))+x2846+(((-1.0)*x2847)));
evalcond[5]=((((-1.0)*x2840*x2853))+(((-1.0)*r02*x2850))+(((-1.0)*x2839*x2853))+((r01*x2848))+((r00*x2851))+(((-1.0)*r01*x2852))+((r00*x2849)));
evalcond[6]=((((-1.0)*cj0*x2847))+((r01*x2841))+((r00*x2842))+((r01*x2844))+((cj0*x2846))+(((-1.0)*r00*x2845))+((r02*x2843)));
evalcond[7]=((((-1.0)*x2838*x2839))+(((-1.0)*r12*x2850))+((r11*x2848))+(((-1.0)*r11*x2852))+((r10*x2849))+((r10*x2851))+(((-1.0)*x2838*x2840)));
evalcond[8]=(((sj0*x2846))+(((-1.0)*r10*x2845))+((r10*x2842))+((r11*x2841))+(((-1.0)*cj1*cj2*x2838))+((r12*x2843))+((r11*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2854=((1.0)*sj0);
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2854)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x2854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2855.value)+(((1.5707963267949)*(x2856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2857=IKcos(j4);
IkReal x2858=((1.0)*x2857);
IkReal x2859=IKsin(j4);
IkReal x2860=(sj5*x2859);
IkReal x2861=((1.0)*cj5*x2859);
IkReal x2862=((1.0)*sj0);
IkReal x2863=(cj1*sj2);
IkReal x2864=(cj2*sj1);
IkReal x2865=(cj5*sj3);
IkReal x2866=(sj3*sj5);
IkReal x2867=(cj3*x2859);
IkReal x2868=(cj3*sj5*x2857);
IkReal x2869=((1.0)*cj3*cj5*x2857);
IkReal x2870=(sj1*sj2);
IkReal x2871=((1.0)*cj1*cj2);
IkReal x2872=(cj3*cj5);
IkReal x2873=(cj3*sj5);
IkReal x2874=((1.0)*sj3*x2859);
IkReal x2875=(cj5*sj3*x2857);
IkReal x2876=((1.0)*sj3*sj5*x2857);
IkReal x2877=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2861))+(((-1.0)*r22*x2858))+((r21*x2860)));
evalcond[1]=(((r11*x2860))+cj0+(((-1.0)*r12*x2858))+(((-1.0)*r10*x2861)));
evalcond[2]=((((-1.0)*x2862))+(((-1.0)*r02*x2858))+(((-1.0)*r00*x2861))+((r01*x2860)));
evalcond[3]=(((r22*x2867))+x2863+x2864+((r21*x2868))+((r21*x2865))+((r20*x2866))+(((-1.0)*r20*x2869)));
evalcond[4]=((((-1.0)*x2871))+((r20*x2873))+x2870+(((-1.0)*r22*x2874))+((r21*x2872))+((r20*x2875))+(((-1.0)*r21*x2876)));
evalcond[5]=(((r00*x2873))+((r01*x2872))+(((-1.0)*x2863*x2877))+((r00*x2875))+(((-1.0)*x2864*x2877))+(((-1.0)*r01*x2876))+(((-1.0)*r02*x2874)));
evalcond[6]=(((cj0*x2870))+(((-1.0)*r00*x2869))+((r00*x2866))+((r01*x2868))+((r01*x2865))+(((-1.0)*cj0*x2871))+((r02*x2867)));
evalcond[7]=((((-1.0)*r11*x2876))+((r10*x2875))+((r10*x2873))+((r11*x2872))+(((-1.0)*x2862*x2864))+(((-1.0)*x2862*x2863))+(((-1.0)*r12*x2874)));
evalcond[8]=((((-1.0)*cj1*cj2*x2862))+((sj0*x2870))+((r12*x2867))+(((-1.0)*r10*x2869))+((r10*x2866))+((r11*x2868))+((r11*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2878=r21*r21;
IkReal x2879=(cj3*x2878);
IkReal x2880=((2.0)*r21);
IkReal x2881=cj5*cj5;
IkReal x2882=r20*r20;
IkReal x2883=((1.0)*r22);
IkReal x2884=(cj1*sj2);
IkReal x2885=(cj2*sj1);
IkReal x2886=(r20*sj3);
IkReal x2887=(cj5*r20);
IkReal x2888=((1.0)*r21*sj5);
IkReal x2889=(cj5*sj3*sj5);
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2879*x2881))+x2879+(((-1.0)*cj3*cj5*r20*sj5*x2880))+((cj3*(r22*r22)))+((cj3*x2881*x2882)))),-1);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal(((((-1.0)*x2883*x2885))+(((-1.0)*x2883*x2884))+(((-1.0)*cj5*r21*r22*sj3))+(((-1.0)*r22*sj5*x2886)))),IkReal(((((-1.0)*x2885*x2888))+((r20*sj3*x2880*x2881))+(((-1.0)*x2884*x2888))+(((-1.0)*r21*x2886))+((x2884*x2887))+((x2882*x2889))+(((-1.0)*x2878*x2889))+((x2885*x2887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2890.value)))+(x2891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2892=IKcos(j4);
IkReal x2893=((1.0)*r22);
IkReal x2894=IKsin(j4);
IkReal x2895=(r21*sj5);
IkReal x2896=((1.0)*cj5*r20);
IkReal x2897=(cj5*r21);
IkReal x2898=(r20*sj5);
IkReal x2899=(cj3*x2892);
IkReal x2900=(sj3*x2892);
evalcond[0]=(((x2894*x2895))+(((-1.0)*x2892*x2893))+(((-1.0)*x2894*x2896)));
evalcond[1]=(((x2895*x2899))+((cj3*r22*x2894))+(((-1.0)*x2896*x2899))+((sj3*x2898))+((cj1*sj2))+((cj2*sj1))+((sj3*x2897)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x2893*x2894))+((cj3*x2897))+((cj5*r20*x2900))+((sj1*sj2))+(((-1.0)*r21*sj5*x2900))+((cj3*x2898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2901=(sj4*sj5);
IkReal x2902=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2902))+((r01*x2901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2902))+(((-1.0)*r11*x2901))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2902))+((r01*x2901))))+IKsqr((((r10*x2902))+(((-1.0)*r11*x2901))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2902))+((r01*x2901))), (((r10*x2902))+(((-1.0)*r11*x2901))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2903=IKcos(j0);
IkReal x2904=((1.0)*cj4);
IkReal x2905=(sj4*sj5);
IkReal x2906=((1.0)*cj5*sj4);
IkReal x2907=IKsin(j0);
IkReal x2908=((1.0)*x2907);
IkReal x2909=((0.1)*cj5);
IkReal x2910=((0.1)*sj5);
IkReal x2911=((0.425)*cj1);
IkReal x2912=((0.392)*cj1*cj2);
IkReal x2913=(sj1*sj2);
IkReal x2914=(x2903*x2913);
IkReal x2915=(x2907*x2913);
IkReal x2916=(cj3*cj5);
IkReal x2917=(cj3*sj5);
IkReal x2918=((1.0)*sj3*sj4);
IkReal x2919=(cj4*cj5*sj3);
IkReal x2920=(cj1*sj2);
IkReal x2921=((1.0)*x2903);
IkReal x2922=(cj2*sj1);
IkReal x2923=((1.0)*cj4*sj3*sj5);
IkReal x2924=(cj3*sj4);
IkReal x2925=(cj5*sj3);
IkReal x2926=(sj3*sj5);
IkReal x2927=(cj3*cj4*sj5);
IkReal x2928=(cj1*cj2);
IkReal x2929=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r10*x2906))+x2903+(((-1.0)*r12*x2904))+((r11*x2905)));
evalcond[1]=((((-1.0)*x2908))+(((-1.0)*r00*x2906))+(((-1.0)*r02*x2904))+((r01*x2905)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x2903*x2912))+(((-0.392)*x2914))+(((-0.134)*x2907))+(((-1.0)*r00*x2910))+(((-1.0)*r01*x2909))+((x2903*x2911)));
evalcond[3]=((((-0.392)*x2915))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x2910))+((x2907*x2911))+(((-1.0)*r11*x2909))+((x2907*x2912))+(((0.134)*x2903)));
evalcond[4]=(((r01*x2916))+(((-1.0)*r02*x2918))+((r00*x2917))+(((-1.0)*r01*x2923))+(((-1.0)*x2920*x2921))+((r00*x2919))+(((-1.0)*x2921*x2922)));
evalcond[5]=((((-1.0)*x2921*x2928))+((r01*x2927))+((r02*x2924))+(((-1.0)*r00*x2929))+((r00*x2926))+((r01*x2925))+x2914);
evalcond[6]=((((-1.0)*x2908*x2922))+((r10*x2917))+((r10*x2919))+(((-1.0)*r12*x2918))+(((-1.0)*x2908*x2920))+((r11*x2916))+(((-1.0)*r11*x2923)));
evalcond[7]=(((r11*x2927))+(((-1.0)*x2908*x2928))+((r10*x2926))+((r12*x2924))+x2915+((r11*x2925))+(((-1.0)*r10*x2929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=r21*r21;
IkReal x2931=(sj3*x2930);
IkReal x2932=(r21*sj5);
IkReal x2933=cj5*cj5;
IkReal x2934=r20*r20;
IkReal x2935=(sj1*sj2);
IkReal x2936=((1.0)*cj1*cj2);
IkReal x2937=(cj3*r21);
IkReal x2938=(r20*x2937);
IkReal x2939=(cj5*r20);
IkReal x2940=(cj3*cj5*sj5);
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x2931*x2933))+x2931+((sj3*x2933*x2934))+(((-2.0)*cj5*r20*sj3*x2932)))),-1);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2936))+((r22*x2935))+((((r20*r22))*((cj3*sj5))))+((cj5*r22*x2937)))),IkReal((((x2930*x2940))+(((-2.0)*x2933*x2938))+(((-1.0)*x2934*x2940))+(((-1.0)*sj1*sj2*x2939))+x2938+((cj1*cj2*x2939))+(((-1.0)*x2932*x2936))+((x2932*x2935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2941.value)))+(x2942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2943=IKcos(j4);
IkReal x2944=((1.0)*r22);
IkReal x2945=IKsin(j4);
IkReal x2946=(r21*sj5);
IkReal x2947=((1.0)*cj5*r20);
IkReal x2948=(cj5*r21);
IkReal x2949=(r20*sj5);
IkReal x2950=(cj3*x2943);
IkReal x2951=(sj3*x2943);
evalcond[0]=((((-1.0)*x2945*x2947))+(((-1.0)*x2943*x2944))+((x2945*x2946)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x2947*x2950))+((sj3*x2948))+((sj3*x2949))+((cj3*r22*x2945))+((cj2*sj1))+((x2946*x2950)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*sj5*x2951))+(((-1.0)*sj3*x2944*x2945))+((cj3*x2949))+((cj3*x2948))+((cj5*r20*x2951))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2952=(sj4*sj5);
IkReal x2953=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x2953))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2953))+(((-1.0)*r11*x2952))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2953))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2952))))+IKsqr((((r10*x2953))+(((-1.0)*r11*x2952))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2953))+(((-1.0)*(1.0)*cj4*r02))+((r01*x2952))), (((r10*x2953))+(((-1.0)*r11*x2952))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2954=IKcos(j0);
IkReal x2955=((1.0)*cj4);
IkReal x2956=(sj4*sj5);
IkReal x2957=((1.0)*cj5*sj4);
IkReal x2958=IKsin(j0);
IkReal x2959=((1.0)*x2958);
IkReal x2960=((0.1)*cj5);
IkReal x2961=((0.1)*sj5);
IkReal x2962=((0.425)*cj1);
IkReal x2963=((0.392)*cj1*cj2);
IkReal x2964=(sj1*sj2);
IkReal x2965=(x2954*x2964);
IkReal x2966=(x2958*x2964);
IkReal x2967=(cj3*cj5);
IkReal x2968=(cj3*sj5);
IkReal x2969=((1.0)*sj3*sj4);
IkReal x2970=(cj4*cj5*sj3);
IkReal x2971=(cj1*sj2);
IkReal x2972=((1.0)*x2954);
IkReal x2973=(cj2*sj1);
IkReal x2974=((1.0)*cj4*sj3*sj5);
IkReal x2975=(cj3*sj4);
IkReal x2976=(cj5*sj3);
IkReal x2977=(sj3*sj5);
IkReal x2978=(cj3*cj4*sj5);
IkReal x2979=(cj1*cj2);
IkReal x2980=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r10*x2957))+(((-1.0)*r12*x2955))+x2954+((r11*x2956)));
evalcond[1]=((((-1.0)*x2959))+(((-1.0)*r00*x2957))+((r01*x2956))+(((-1.0)*r02*x2955)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x2961))+((x2954*x2963))+(((-0.392)*x2965))+((x2954*x2962))+(((-0.134)*x2958))+(((-1.0)*r01*x2960)));
evalcond[3]=(((x2958*x2963))+(((-1.0)*(1.0)*py))+(((0.134)*x2954))+(((-1.0)*r11*x2960))+(((-0.392)*x2966))+(((-1.0)*r10*x2961))+((x2958*x2962)));
evalcond[4]=((((-1.0)*r01*x2974))+(((-1.0)*x2971*x2972))+(((-1.0)*x2972*x2973))+(((-1.0)*r02*x2969))+((r00*x2970))+((r00*x2968))+((r01*x2967)));
evalcond[5]=((((-1.0)*x2972*x2979))+((r00*x2977))+x2965+((r02*x2975))+((r01*x2978))+(((-1.0)*r00*x2980))+((r01*x2976)));
evalcond[6]=((((-1.0)*x2959*x2973))+(((-1.0)*x2959*x2971))+((r10*x2970))+(((-1.0)*r11*x2974))+(((-1.0)*r12*x2969))+((r10*x2968))+((r11*x2967)));
evalcond[7]=(((r10*x2977))+(((-1.0)*x2959*x2979))+x2966+((r12*x2975))+((r11*x2976))+(((-1.0)*r10*x2980))+((r11*x2978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (936ceb7e81bc59ce6a5cc09aa6bf68c4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
