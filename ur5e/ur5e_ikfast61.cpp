/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-30 13:01:24.181593
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKsin(j[5]);
x1=IKsin(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=(x3*x4);
x6=((1.0)*x5);
x7=IKcos(j[1]);
x8=IKcos(j[2]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=(x10*x2);
x12=IKcos(j[3]);
x13=(x3*x8);
x14=((1.0)*x13);
x15=(x4*x7);
x16=((1.0)*x15);
x17=(x2*((x16+x14)));
x18=(((x12*x17))+((x1*((x11+(((-1.0)*(1.0)*x2*x6)))))));
x19=IKcos(j[5]);
x20=IKsin(j[4]);
x21=IKsin(j[0]);
x22=((1.0)*x21);
x23=(x20*x22);
x24=IKcos(j[4]);
x25=(x2*x5);
x26=(x12*((x25+(((-1.0)*(1.0)*x11)))));
x27=(x1*x17);
x28=(x24*((x27+x26)));
x29=((0.1)*x21);
x30=((0.425)*x7);
x31=((0.392)*x7*x8);
x32=((0.1)*x5);
x33=((0.1)*x9);
x34=((0.1)*x13);
x35=((0.1)*x15);
x36=(x22*x9);
x37=(((x13*x22))+((x15*x22)));
x38=(((x12*x37))+((x1*((x36+(((-1.0)*(1.0)*x22*x5)))))));
x39=(x2*x20);
x40=(x21*x5);
x41=(x12*(((((-1.0)*(1.0)*x36))+x40)));
x42=(x1*x37);
x43=(x24*((x41+x42)));
x44=(x2*x24);
x45=(x10+(((-1.0)*(1.0)*x6)));
x46=(((x1*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x14))))))+((x12*x45)));
x47=(x12*((x15+x13)));
x48=(x1*x45);
x49=((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x47)));
eerot[0]=(((x19*(((((-1.0)*(1.0)*x23))+x28))))+((x0*x18)));
eerot[1]=(((x0*((x23+(((-1.0)*(1.0)*x28))))))+((x18*x19)));
eerot[2]=((((-1.0)*(1.0)*x22*x24))+((x20*(((((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x26)))))));
IkReal x50=((1.0)*x2);
eetrans[0]=(((x12*(((((-1.0)*x34*x50))+(((-1.0)*x35*x50))))))+(((-1.0)*(1.0)*x24*x29))+((x2*x30))+(((-1.0)*(0.392)*x25))+((x2*x31))+((x20*(((((-1.0)*(0.1)*x27))+(((-1.0)*(0.1)*x26))))))+(((-1.0)*(0.134)*x21))+((x1*(((((-1.0)*x33*x50))+((x2*x32)))))));
eerot[3]=(((x0*x38))+((x19*((x39+x43)))));
eerot[4]=(((x0*(((((-1.0)*(1.0)*x39))+(((-1.0)*(1.0)*x43))))))+((x19*x38)));
eerot[5]=(x44+((x20*(((((-1.0)*(1.0)*x42))+(((-1.0)*(1.0)*x41)))))));
IkReal x51=((1.0)*x29);
eetrans[1]=(((x1*((((x29*x5))+(((-1.0)*x51*x9))))))+((x21*x30))+((x20*(((((-1.0)*(0.1)*x41))+(((-1.0)*(0.1)*x42))))))+(((0.134)*x2))+(((-1.0)*(0.392)*x40))+((x12*(((((-1.0)*x13*x51))+(((-1.0)*x15*x51))))))+((x21*x31))+(((0.1)*x44)));
eerot[6]=(((x19*x24*((x48+x47))))+((x0*x46)));
eerot[7]=(((x19*x46))+((x0*x24*x49)));
eerot[8]=(x20*x49);
eetrans[2]=((0.163)+((x12*((x32+(((-1.0)*(1.0)*x33))))))+((x1*((x35+x34))))+((x20*(((((-1.0)*(0.1)*x48))+(((-1.0)*(0.1)*x47))))))+(((-1.0)*(0.392)*x13))+(((-1.0)*(0.425)*x3))+(((-1.0)*(0.392)*x15)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-1.0)*(0.1)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-1.0)*(0.1)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-1.0)*(0.1)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*py);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x54)));
rxp2_0=((((-1.0)*r22*x52))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x53))+((px*r22)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.1)*r20);
IkReal x56=((-1.0)*x55);
IkReal x57=((0.2)*npx);
IkReal x58=((-1.0)*(((1.0)*r20)));
IkReal x59=((-1.0)*(((1.0)*rxp0_2)));
IkReal x60=((0.1)*r21);
IkReal x61=((-1.0)*x60);
IkReal x62=((0.2)*npy);
IkReal x63=((-1.0)*(((1.0)*r21)));
IkReal x64=((-1.0)*(((1.0)*rxp1_2)));
IkReal x65=((-1.0)*(((1.0)*r22)));
IkReal x66=((0.1)*r22);
IkReal x67=((-1.0)*(((1.0)*npz)));
IkReal x68=((-1.0)*(((1.0)*npx)));
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x62;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x62;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x66;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*(((1.0)*rxp2_2)));
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x66;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x68;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x55;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x68;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x66;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-1.0)*x66);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*(((1.0)*npy)));
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x68;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x69=((0.00134)*r22);
IkReal x70=((0.00134)*r21);
IkReal x71=((0.00134)*r20);
IkReal x72=((0.268)*npz*pz);
IkReal x73=((0.134)*pp*r22);
IkReal x74=((0.268)*npy*pz);
IkReal x75=((0.134)*pp*r21);
IkReal x76=((0.268)*npx*pz);
IkReal x77=((0.134)*pp*r20);
IkReal x78=((((-1.0)*gclwh8_5*x71))+((gclwh10_5*x72))+((gclwh6_5*x75))+(((-1.0)*gclwh10_5*x69))+(((-1.0)*gclwh6_5*x74))+(((-1.0)*gclwh8_5*x77))+((gclwh8_5*x76))+(((-1.0)*gclwh10_5*x73))+((gclwh6_5*x70)));
IkReal x79=(gclwh10_12*r22);
IkReal x80=(gclwh12_14*rxp1_2);
IkReal x81=((0.0268)*x80);
IkReal x82=(gclwh12_8*rxp1_2);
IkReal x83=(gclwh14_14*rxp0_2);
IkReal x84=((0.0268)*x83);
IkReal x85=(gclwh14_8*rxp0_2);
IkReal x86=((0.0268)*rxp2_2);
IkReal x87=(gclwh4_14*x86);
IkReal x88=(gclwh4_8*rxp2_2);
IkReal x89=(gclwh6_12*r21);
IkReal x90=(gclwh8_12*r20);
IkReal x91=(gclwh10_12*npz*pz);
IkReal x92=(gclwh10_12*pp*r22);
IkReal x93=(gclwh6_12*npy*pz);
IkReal x94=(gclwh6_12*pp*r21);
IkReal x95=(gclwh8_12*npx*pz);
IkReal x96=(gclwh8_12*pp*r20);
IkReal x97=(gclwh10_11*r22);
IkReal x98=((0.01)*x97);
IkReal x99=(gclwh12_11*rxp1_2);
IkReal x100=((0.2)*x99);
IkReal x101=(gclwh12_3*rxp1_2);
IkReal x102=(gclwh14_11*rxp0_2);
IkReal x103=((0.2)*x102);
IkReal x104=(gclwh14_3*rxp0_2);
IkReal x105=(gclwh4_11*rxp2_2);
IkReal x106=((0.2)*x105);
IkReal x107=(gclwh4_3*rxp2_2);
IkReal x108=(gclwh6_11*r21);
IkReal x109=((0.01)*x108);
IkReal x110=(gclwh8_11*r20);
IkReal x111=((0.01)*x110);
IkReal x112=(pp*x97);
IkReal x113=(pp*x110);
IkReal x114=(gclwh10_11*npz*pz);
IkReal x115=((2.0)*x114);
IkReal x116=(gclwh6_11*npy*pz);
IkReal x117=((2.0)*x116);
IkReal x118=(pp*x108);
IkReal x119=(gclwh8_11*npx*pz);
IkReal x120=((2.0)*x119);
IkReal x121=((0.01)*pz);
IkReal x122=(gclwh10_2*r22);
IkReal x123=((0.2)*pz);
IkReal x124=(gclwh12_2*rxp1_2);
IkReal x125=((0.2)*pp);
IkReal x126=(gclwh14_2*rxp0_2);
IkReal x127=(gclwh4_2*rxp2_2);
IkReal x128=(gclwh6_2*r21);
IkReal x129=((0.01)*r20);
IkReal x130=(gclwh8_2*pz);
IkReal x131=(gclwh10_2*pp*r22);
IkReal x132=(pp*r20);
IkReal x133=((1.0)*pp*pz);
IkReal x134=pz*pz;
IkReal x135=((2.0)*npz*x134);
IkReal x136=((2.0)*npy*x134);
IkReal x137=((2.0)*npx*x134);
IkReal x138=(((x130*x132))+(((-1.0)*x123*x127))+(((0.02)*x88))+((x101*x125))+(((0.02)*x82))+(((-1.0)*gclwh8_2*x137))+(((-1.0)*x128*x133))+((x123*x126))+(((-1.0)*gclwh10_2*x135))+((pz*x131))+((gclwh6_2*x136))+(((-1.0)*x123*x124))+((x121*x122))+(((-1.0)*x121*x128))+((x107*x125))+(((-1.0)*x104*x125))+(((-0.02)*x85))+((x129*x130)));
IkReal x139=((0.02)*x97);
IkReal x140=((0.4)*x99);
IkReal x141=((0.4)*x102);
IkReal x142=((0.4)*x105);
IkReal x143=((0.02)*x108);
IkReal x144=((0.02)*x110);
IkReal x145=((4.0)*x114);
IkReal x146=((2.0)*x112);
IkReal x147=((4.0)*x116);
IkReal x148=((2.0)*x118);
IkReal x149=((4.0)*x119);
IkReal x150=((2.0)*x113);
IkReal x151=(x139+x150+(((-1.0)*x142))+(((-1.0)*x148))+x147+x141+x146+x144+(((-1.0)*x140))+(((-1.0)*x145))+(((-1.0)*x149))+(((-1.0)*x143)));
IkReal x152=((0.0536)*x80);
IkReal x153=((0.0536)*x83);
IkReal x154=(gclwh4_14*rxp2_2);
IkReal x155=((0.0536)*x154);
IkReal x156=(x153+(((-1.0)*x152))+(((-1.0)*x155)));
IkReal x157=((0.1568)*rxp2_2);
IkReal x158=((0.00784)*r21);
IkReal x159=((0.00784)*r20);
IkReal x160=(gclwh10_2*npz*pz);
IkReal x161=((0.784)*pp);
IkReal x162=((1.568)*npy*pz);
IkReal x163=((1.568)*npx);
IkReal x164=((0.784)*pp*r20);
IkReal x165=(gclwh11_10*r22);
IkReal x166=((0.01)*x165);
IkReal x167=(gclwh13_1*rxp1_2);
IkReal x168=(gclwh13_10*rxp1_2);
IkReal x169=((0.2)*x168);
IkReal x170=(gclwh15_1*rxp0_2);
IkReal x171=(gclwh15_10*rxp0_2);
IkReal x172=((0.2)*x171);
IkReal x173=(gclwh5_1*rxp2_2);
IkReal x174=(gclwh5_10*rxp2_2);
IkReal x175=((0.2)*x174);
IkReal x176=(gclwh7_10*r21);
IkReal x177=((0.01)*x176);
IkReal x178=(gclwh9_10*r20);
IkReal x179=((0.01)*x178);
IkReal x180=(pp*x176);
IkReal x181=(gclwh11_10*npz*pz);
IkReal x182=((2.0)*x181);
IkReal x183=(pp*x165);
IkReal x184=(gclwh7_10*npy*pz);
IkReal x185=((2.0)*x184);
IkReal x186=(gclwh9_10*npx*pz);
IkReal x187=((2.0)*x186);
IkReal x188=(pp*x178);
IkReal x189=(gclwh13_9*rxp1_2);
IkReal x190=(gclwh15_9*rxp0_2);
IkReal x191=(gclwh5_9*rxp2_2);
IkReal x192=(gclwh11_0*r22);
IkReal x193=(gclwh13_0*rxp1_2);
IkReal x194=(gclwh15_0*rxp0_2);
IkReal x195=(gclwh5_0*rxp2_2);
IkReal x196=(gclwh7_0*r21);
IkReal x197=(gclwh9_0*pz);
IkReal x198=(gclwh11_0*pp*r22);
IkReal x199=(((x121*x192))+(((-0.02)*x190))+(((-1.0)*x123*x195))+((x132*x197))+(((-1.0)*x123*x193))+((x129*x197))+(((-1.0)*x121*x196))+(((0.02)*x191))+(((0.02)*x189))+(((-1.0)*x125*x170))+(((-1.0)*gclwh9_0*x137))+((x125*x167))+(((-1.0)*x133*x196))+(((-1.0)*gclwh11_0*x135))+((gclwh7_0*x136))+((x125*x173))+((x123*x194))+((pz*x198)));
IkReal x200=(((gclwh7_7*x70))+((gclwh11_7*x72))+(((-1.0)*gclwh9_7*x71))+(((-1.0)*gclwh11_7*x69))+((gclwh7_7*x75))+((gclwh9_7*x76))+(((-1.0)*gclwh9_7*x77))+(((-1.0)*gclwh11_7*x73))+(((-1.0)*gclwh7_7*x74)));
IkReal x201=(gclwh11_13*r22);
IkReal x202=(gclwh13_15*rxp1_2);
IkReal x203=((0.0268)*x202);
IkReal x204=(gclwh15_15*rxp0_2);
IkReal x205=((0.0268)*x204);
IkReal x206=(gclwh5_15*x86);
IkReal x207=(gclwh7_13*r21);
IkReal x208=(gclwh9_13*r20);
IkReal x209=(gclwh11_13*npz*pz);
IkReal x210=(gclwh11_13*pp*r22);
IkReal x211=(gclwh7_13*npy*pz);
IkReal x212=(gclwh7_13*pp*r21);
IkReal x213=(gclwh9_13*npx*pz);
IkReal x214=(gclwh9_13*pp*r20);
IkReal x215=((0.0536)*x202);
IkReal x216=((0.0536)*x204);
IkReal x217=(gclwh5_15*rxp2_2);
IkReal x218=((0.0536)*x217);
IkReal x219=((((-1.0)*x216))+x218+x215);
IkReal x220=(gclwh11_0*npz*pz);
IkReal x221=((0.02)*x165);
IkReal x222=((0.4)*x168);
IkReal x223=((0.4)*x171);
IkReal x224=((0.4)*x174);
IkReal x225=((0.02)*x176);
IkReal x226=((0.02)*x178);
IkReal x227=((4.0)*x181);
IkReal x228=((2.0)*x183);
IkReal x229=((4.0)*x184);
IkReal x230=((2.0)*x180);
IkReal x231=((4.0)*x186);
IkReal x232=((2.0)*x188);
IkReal x233=((((-1.0)*x231))+(((-1.0)*x230))+(((-1.0)*x224))+(((-1.0)*x225))+(((-1.0)*x227))+x226+x221+x223+x229+x228+(((-1.0)*x222))+x232);
IkReal x234=((0.0268)*rxp1_2);
IkReal x235=((0.0268)*rxp0_2);
IkReal x236=(((gclwh10_5*x86))+(((-1.0)*gclwh6_5*x234))+((gclwh8_5*x235)));
IkReal x237=(gclwh10_12*rxp2_2);
IkReal x238=(gclwh12_14*r21);
IkReal x239=((0.00134)*x238);
IkReal x240=(gclwh12_8*r21);
IkReal x241=(gclwh14_14*r20);
IkReal x242=((0.00134)*x241);
IkReal x243=(gclwh14_8*r20);
IkReal x244=(gclwh4_14*x69);
IkReal x245=(gclwh4_8*r22);
IkReal x246=(gclwh6_12*rxp1_2);
IkReal x247=(gclwh8_12*rxp0_2);
IkReal x248=(gclwh12_14*npy*pz);
IkReal x249=((0.268)*x248);
IkReal x250=(gclwh12_14*pp*r21);
IkReal x251=((0.134)*x250);
IkReal x252=(gclwh12_8*npy*pz);
IkReal x253=(gclwh12_8*pp*r21);
IkReal x254=(gclwh14_14*npx*pz);
IkReal x255=((0.268)*x254);
IkReal x256=(gclwh14_14*pp*r20);
IkReal x257=((0.134)*x256);
IkReal x258=(gclwh14_8*npx*pz);
IkReal x259=(gclwh14_8*pp*r20);
IkReal x260=(gclwh4_14*x72);
IkReal x261=(gclwh4_14*pp*r22);
IkReal x262=((0.134)*x261);
IkReal x263=(gclwh4_8*npz*pz);
IkReal x264=(gclwh4_8*pp*r22);
IkReal x265=(gclwh10_11*rxp2_2);
IkReal x266=((0.2)*x265);
IkReal x267=(gclwh12_11*r21);
IkReal x268=((0.01)*x267);
IkReal x269=(gclwh12_3*r21);
IkReal x270=(gclwh14_11*r20);
IkReal x271=((0.01)*x270);
IkReal x272=(gclwh14_3*r20);
IkReal x273=(gclwh1_3*r20);
IkReal x274=(gclwh3_3*r21);
IkReal x275=(gclwh4_11*r22);
IkReal x276=((0.01)*x275);
IkReal x277=(gclwh4_3*r22);
IkReal x278=(gclwh6_11*rxp1_2);
IkReal x279=((0.2)*x278);
IkReal x280=(gclwh8_11*rxp0_2);
IkReal x281=((0.2)*x280);
IkReal x282=(pp*x270);
IkReal x283=(gclwh12_11*npy*pz);
IkReal x284=((2.0)*x283);
IkReal x285=(pp*x267);
IkReal x286=(gclwh12_3*npy*pz);
IkReal x287=(gclwh12_3*pp*r21);
IkReal x288=(gclwh14_11*npx*pz);
IkReal x289=((2.0)*x288);
IkReal x290=(gclwh14_3*npx*pz);
IkReal x291=(gclwh14_3*pp*r20);
IkReal x292=(gclwh1_3*npx*pz);
IkReal x293=(gclwh1_3*pp*r20);
IkReal x294=(gclwh3_3*npy*pz);
IkReal x295=(gclwh3_3*pp*r21);
IkReal x296=(gclwh4_11*npz*pz);
IkReal x297=((2.0)*x296);
IkReal x298=(pp*x275);
IkReal x299=(gclwh4_3*npz*pz);
IkReal x300=(gclwh4_3*pp*r22);
IkReal x301=(gclwh10_2*rxp2_2);
IkReal x302=(gclwh12_2*r21);
IkReal x303=(gclwh14_2*pz);
IkReal x304=(gclwh1_2*pz);
IkReal x305=(gclwh3_2*r21);
IkReal x306=(gclwh4_2*r22);
IkReal x307=((0.2)*npz*pz);
IkReal x308=(gclwh6_2*rxp1_2);
IkReal x309=(gclwh8_2*rxp0_2);
IkReal x310=pp*pp;
IkReal x311=((2.0)*pp);
IkReal x312=((1.0)*pp*r20);
IkReal x313=((1.0)*x310);
IkReal x314=((((-1.0)*x304*x312))+((x274*x310))+((x273*x310))+((x123*x308))+((x121*x305))+x123+(((-1.0)*x292*x311))+(((-1.0)*x133*x305))+(((-1.0)*gclwh14_2*x137))+((gclwh3_2*x136))+(((-1.0)*x133*x302))+(((-1.0)*x299*x311))+(((-1.0)*x286*x311))+(((-1.0)*x133*x306))+(((-0.001)*x243))+((x129*x303))+(((0.1)*x253))+(((-1.0)*x272*x313))+(((0.001)*x245))+((gclwh4_2*x135))+(((0.001)*x240))+((x129*x304))+((gclwh14_8*npx*x123))+((x277*x310))+((gclwh1_2*x137))+(((-0.1)*x259))+((x132*x303))+(((-1.0)*gclwh12_8*npy*x123))+((gclwh12_2*x136))+(((-1.0)*x123*x309))+(((0.1)*x264))+(((-1.0)*x294*x311))+((x290*x311))+(((-1.0)*x123*x301))+(((-1.0)*x121*x302))+((x269*x310))+(((-1.0)*x121*x306))+(((-1.0)*gclwh4_8*x307)));
IkReal x315=((0.4)*x265);
IkReal x316=((0.02)*x267);
IkReal x317=((0.02)*x270);
IkReal x318=((0.02)*x275);
IkReal x319=((0.4)*x278);
IkReal x320=((0.4)*x280);
IkReal x321=((4.0)*x283);
IkReal x322=((2.0)*x285);
IkReal x323=((4.0)*x288);
IkReal x324=((2.0)*x282);
IkReal x325=((4.0)*x296);
IkReal x326=((2.0)*x298);
IkReal x327=((((-1.0)*x323))+(((-1.0)*x315))+(((-1.0)*x326))+(((-1.0)*x318))+(((-1.0)*x322))+(((-1.0)*x316))+x324+x325+x321+x317+x319+(((-1.0)*x320)));
IkReal x328=(gclwh4_14*r22);
IkReal x329=(gclwh4_14*npz*pz);
IkReal x330=((((-0.00268)*x238))+(((-0.268)*x261))+(((0.536)*x248))+(((-0.00268)*x328))+(((-0.536)*x254))+(((0.268)*x256))+(((0.536)*x329))+(((-0.268)*x250))+(((0.00268)*x241)));
IkReal x331=(gclwh12_2*npy*pz);
IkReal x332=(gclwh4_2*npz*pz);
IkReal x333=(gclwh0_1*r20);
IkReal x334=(gclwh11_10*rxp2_2);
IkReal x335=((0.2)*x334);
IkReal x336=(gclwh13_1*r21);
IkReal x337=(gclwh13_10*r21);
IkReal x338=((0.01)*x337);
IkReal x339=(gclwh15_1*r20);
IkReal x340=(gclwh15_10*r20);
IkReal x341=((0.01)*x340);
IkReal x342=(gclwh2_1*r21);
IkReal x343=(gclwh5_1*r22);
IkReal x344=(gclwh5_10*r22);
IkReal x345=((0.01)*x344);
IkReal x346=(gclwh7_10*rxp1_2);
IkReal x347=((0.2)*x346);
IkReal x348=(gclwh9_10*rxp0_2);
IkReal x349=((0.2)*x348);
IkReal x350=(pp*x340);
IkReal x351=(gclwh0_1*npx*pz);
IkReal x352=(gclwh0_1*pp*r20);
IkReal x353=(gclwh13_1*npy*pz);
IkReal x354=(gclwh13_1*pp*r21);
IkReal x355=(gclwh13_10*npy*pz);
IkReal x356=((2.0)*x355);
IkReal x357=(pp*x337);
IkReal x358=(gclwh15_1*npx*pz);
IkReal x359=(gclwh15_1*pp*r20);
IkReal x360=(gclwh15_10*npx*pz);
IkReal x361=((2.0)*x360);
IkReal x362=(gclwh2_1*npy*pz);
IkReal x363=(gclwh2_1*pp*r21);
IkReal x364=(gclwh5_1*npz*pz);
IkReal x365=(gclwh5_1*pp*r22);
IkReal x366=(gclwh5_10*npz*pz);
IkReal x367=((2.0)*x366);
IkReal x368=(pp*x344);
IkReal x369=(gclwh13_9*r21);
IkReal x370=(gclwh15_9*r20);
IkReal x371=(gclwh5_9*r22);
IkReal x372=(gclwh0_0*pz);
IkReal x373=(gclwh13_0*r21);
IkReal x374=(gclwh13_9*pp*r21);
IkReal x375=(gclwh15_0*pz);
IkReal x376=(gclwh15_9*pp*r20);
IkReal x377=(gclwh2_0*r21);
IkReal x378=(gclwh5_0*r22);
IkReal x379=(gclwh5_9*pp*r22);
IkReal x380=(gclwh7_0*rxp1_2);
IkReal x381=(gclwh9_0*rxp0_2);
IkReal x382=(pp*pz);
IkReal x383=((((0.1)*x376))+(((-1.0)*x311*x362))+x123+(((-1.0)*x313*x336))+((x121*x378))+((gclwh5_9*x307))+((gclwh0_0*x137))+((gclwh13_9*npy*x123))+(((-1.0)*x311*x358))+((x121*x377))+((gclwh2_0*x136))+((x310*x339))+((x123*x381))+(((-0.1)*x379))+(((-1.0)*x311*x351))+((x129*x372))+(((0.001)*x370))+(((-1.0)*x129*x375))+((gclwh11_0*rxp2_2*x123))+(((-1.0)*gclwh5_0*x135))+((x373*x382))+((x378*x382))+(((-1.0)*gclwh15_9*npx*x123))+(((-0.001)*x371))+((x121*x373))+((x311*x353))+((x311*x364))+(((-1.0)*x133*x377))+(((-1.0)*gclwh13_0*x136))+(((-1.0)*x313*x343))+((x310*x333))+((gclwh15_0*x137))+(((-1.0)*x312*x375))+((x310*x342))+(((-0.1)*x374))+(((-1.0)*x312*x372))+(((-1.0)*x123*x380))+(((-0.001)*x369)));
IkReal x384=(((gclwh7_7*x234))+(((-1.0)*gclwh11_7*x86))+(((-1.0)*gclwh9_7*x235)));
IkReal x385=(gclwh11_13*rxp2_2);
IkReal x386=(gclwh13_15*r21);
IkReal x387=((0.00134)*x386);
IkReal x388=(gclwh15_15*r20);
IkReal x389=((0.00134)*x388);
IkReal x390=(gclwh5_15*x69);
IkReal x391=(gclwh7_13*rxp1_2);
IkReal x392=(gclwh9_13*rxp0_2);
IkReal x393=(gclwh13_15*npy*pz);
IkReal x394=((0.268)*x393);
IkReal x395=(gclwh13_15*pp*r21);
IkReal x396=((0.134)*x395);
IkReal x397=(gclwh13_9*npy*pz);
IkReal x398=(gclwh15_15*npx*pz);
IkReal x399=((0.268)*x398);
IkReal x400=(gclwh15_15*pp*r20);
IkReal x401=((0.134)*x400);
IkReal x402=(gclwh15_9*npx*pz);
IkReal x403=(gclwh5_15*x72);
IkReal x404=(gclwh5_15*pp*r22);
IkReal x405=((0.134)*x404);
IkReal x406=(gclwh5_9*npz*pz);
IkReal x407=(npz*pz);
IkReal x408=((0.01634)*r21);
IkReal x409=((0.01634)*r20);
IkReal x410=((3.268)*npy*pz);
IkReal x411=((1.634)*pp);
IkReal x412=((3.268)*npx);
IkReal x413=((1.634)*pp*r20);
IkReal x414=((0.00066)*r21);
IkReal x415=((0.00066)*r20);
IkReal x416=((0.132)*npy*pz);
IkReal x417=((0.066)*pp);
IkReal x418=((0.132)*npx);
IkReal x419=((0.066)*pp*r20);
op[0]=((((-0.817)*x92))+(((1.634)*x91))+(((0.817)*x94))+(((0.1634)*x85))+(((-0.00817)*x90))+(((-0.1634)*x82))+(((-0.00817)*x79))+(((-0.1634)*x88))+(((0.00817)*x89))+x81+x87+(((-0.817)*x96))+(((-1.634)*x93))+(((-1.0)*x84))+x78+(((1.634)*x95)));
op[1]=((((-0.135089)*x107))+x138+x103+(((-1.0)*x109))+x98+(((-1.0)*x106))+(((-1.0)*x115))+(((-1.0)*x118))+(((-1.0)*x120))+(((-1.0)*x100))+(((0.135089)*x104))+(((-0.135089)*x101))+x113+x112+x117+x111);
op[2]=((-0.210112)+x151);
op[3]=(x156+(((-1.0)*x130*x163))+(((-1.0)*x128*x161))+(((-0.17)*x85))+(((0.1568)*x126))+((gclwh8_2*x164))+((gclwh6_2*x162))+(((0.17)*x88))+(((-1.0)*gclwh6_2*x158))+(((0.00784)*x122))+(((0.17)*x82))+(((-0.1568)*x124))+((x122*x161))+(((-1.568)*x160))+((gclwh8_2*x159))+(((-1.0)*gclwh4_2*x157)));
op[4]=((((0.0066)*x88))+(((-0.00033)*x90))+(((0.0066)*x82))+(((-1.0)*x81))+(((0.066)*x95))+(((0.066)*x91))+(((-0.066)*x93))+(((0.00033)*x89))+x84+(((-0.00033)*x79))+(((-1.0)*x87))+(((-0.033)*x92))+x78+(((-0.033)*x96))+(((0.033)*x94))+(((-0.0066)*x85)));
op[5]=(x138+x106+x100+x109+x120+(((-0.001809)*x107))+(((-0.001809)*x101))+(((-1.0)*x98))+(((-1.0)*x111))+(((-1.0)*x117))+(((0.001809)*x104))+(((-1.0)*x103))+(((-1.0)*x113))+(((-1.0)*x112))+x115+x118);
op[6]=((((-1.0)*x188))+(((-0.135089)*x173))+(((-1.0)*x179))+(((0.135089)*x170))+(((-1.0)*x172))+(((-1.0)*x185))+x177+x175+(((-0.135089)*x167))+x169+x199+x182+x187+x180+(((-1.0)*x166))+(((-1.0)*x183)));
op[7]=((((0.1634)*x190))+(((0.817)*x212))+(((1.634)*x213))+(((1.634)*x209))+(((-0.00817)*x208))+(((-1.0)*x205))+(((0.00817)*x207))+(((-1.634)*x211))+(((-0.817)*x214))+x203+x206+x200+(((-0.817)*x210))+(((-0.00817)*x201))+(((-0.1634)*x189))+(((-0.1634)*x191)));
op[8]=((((-1.0)*x163*x197))+(((-1.0)*gclwh5_0*x157))+(((-0.17)*x189))+(((-1.0)*gclwh7_0*x158))+(((0.17)*x190))+((gclwh7_0*x162))+((x161*x192))+((gclwh9_0*x159))+(((0.1568)*x194))+(((-0.1568)*x193))+(((-0.17)*x191))+((gclwh9_0*x164))+x219+(((-1.0)*x161*x196))+(((-1.568)*x220))+(((0.00784)*x192)));
op[9]=((-0.210112)+x233);
op[10]=((((-0.001809)*x173))+(((-1.0)*x175))+(((-0.001809)*x167))+(((-1.0)*x180))+(((-1.0)*x177))+x172+x179+(((-1.0)*x169))+(((0.001809)*x170))+x166+(((-1.0)*x187))+x199+(((-1.0)*x182))+x188+x183+x185);
op[11]=((((0.066)*x213))+(((0.0066)*x191))+(((0.066)*x209))+(((-1.0)*x206))+(((0.033)*x212))+(((-0.00033)*x201))+(((0.0066)*x189))+(((-0.00033)*x208))+(((0.00033)*x207))+x205+x200+(((-0.0066)*x190))+(((-0.066)*x211))+(((-0.033)*x210))+(((-1.0)*x203))+(((-0.033)*x214)));
op[12]=((((0.817)*x259))+(((-0.00817)*x245))+x262+(((-1.0)*x260))+(((0.1634)*x237))+(((-1.634)*x258))+x244+(((-1.0)*x242))+(((0.00817)*x243))+x255+x251+(((-1.0)*x249))+(((1.634)*x252))+(((-0.817)*x253))+(((-0.1634)*x246))+(((-0.817)*x264))+(((-1.0)*x257))+(((0.1634)*x247))+(((-0.00817)*x240))+x236+x239+(((1.634)*x263)));
op[13]=((-0.685445)+(((0.665445)*x291))+x297+(((-0.685445)*x293))+(((-1.0)*x289))+(((0.00675445)*x273))+(((-0.665445)*x300))+(((-1.0)*x276))+(((0.00675445)*x274))+(((-0.00675445)*x269))+(((-0.00675445)*x277))+(((0.00675445)*x272))+(((-0.685445)*x295))+(((1.35089)*x299))+(((-1.0)*x266))+(((-1.0)*x268))+x279+x271+(((1.35089)*x286))+(((-1.0)*x281))+(((1.35089)*x294))+x314+(((-0.665445)*x287))+(((-1.0)*x298))+(((1.35089)*x292))+x284+x282+(((-1.35089)*x290))+(((-1.0)*x285)));
op[14]=((-0.089834)+x327);
op[15]=((((-1.0)*x161*x306))+(((0.0085)*x240))+((gclwh1_2*x159))+(((-1.0)*x163*x303))+(((0.85)*x253))+(((-1.7)*x252))+(((-1.7)*x263))+(((0.1568)*x308))+(((-0.1568)*x309))+(((1.568)*x332))+(((-1.0)*x161*x302))+(((1.568)*x331))+(((-0.1568)*x301))+x330+(((-0.0085)*x243))+(((-1.0)*x161*x305))+(((-0.00784)*x306))+((gclwh3_2*x162))+(((-0.00784)*x302))+((x163*x304))+(((0.85)*x264))+(((-1.0)*gclwh1_2*x164))+((gclwh14_2*x159))+((gclwh14_2*x164))+(((-0.85)*x259))+((gclwh3_2*x158))+(((1.7)*x258))+(((0.0085)*x245)));
op[16]=((((-0.0066)*x246))+x260+(((-0.066)*x263))+(((0.00033)*x240))+(((-0.00033)*x243))+(((-1.0)*x255))+(((0.066)*x258))+(((-1.0)*x262))+x249+x242+(((-0.066)*x252))+(((0.00033)*x245))+(((-1.0)*x251))+x257+(((0.0066)*x247))+(((-1.0)*x239))+(((0.0066)*x237))+(((-0.033)*x259))+(((-1.0)*x244))+(((0.033)*x253))+x236+(((0.033)*x264)));
op[17]=((0.019045)+x298+(((0.01809)*x299))+x268+x266+(((0.01809)*x292))+(((-9.045e-5)*x277))+(((-0.000955)*x291))+(((-9.045e-5)*x269))+(((-0.01809)*x290))+(((-1.0)*x297))+(((-1.0)*x284))+x276+(((-1.0)*x271))+(((0.000955)*x300))+(((-1.0)*x279))+(((9.045e-5)*x274))+x314+(((9.045e-5)*x273))+(((9.045e-5)*x272))+(((0.01809)*x286))+(((-1.0)*x282))+(((0.000955)*x287))+x289+x285+x281+(((-0.019045)*x295))+(((-0.019045)*x293))+(((0.01809)*x294)));
op[18]=((0.685445)+(((-0.685445)*x352))+(((0.00675445)*x333))+(((-0.665445)*x359))+(((-1.0)*x349))+(((-1.0)*x357))+(((0.665445)*x354))+(((0.665445)*x365))+(((-1.0)*x335))+(((-1.35089)*x353))+(((1.35089)*x362))+(((1.35089)*x351))+(((0.00675445)*x336))+x356+x350+x383+(((-1.0)*x368))+(((0.00675445)*x342))+x367+(((-0.00675445)*x339))+(((0.00675445)*x343))+(((1.35089)*x358))+(((-1.0)*x338))+x347+x341+(((-0.685445)*x363))+(((-1.0)*x345))+(((-1.0)*x361))+(((-1.35089)*x364)));
op[19]=(x394+(((-1.634)*x397))+(((0.00817)*x371))+(((0.1634)*x391))+(((-0.817)*x376))+(((0.817)*x374))+(((1.634)*x402))+(((-1.0)*x399))+(((-0.00817)*x370))+x403+x401+x389+x384+(((-1.0)*x390))+(((-1.0)*x405))+(((0.817)*x379))+(((-1.0)*x387))+(((0.00817)*x369))+(((-0.1634)*x392))+(((-0.1634)*x385))+(((-1.0)*x396))+(((-1.634)*x406)));
op[20]=((((-1.0)*x161*x377))+((gclwh13_0*x158))+(((0.0085)*x371))+(((0.1568)*x381))+(((-0.268)*x395))+(((-0.00268)*gclwh5_15*r22))+(((-0.00268)*x386))+((x161*x373))+((x161*x378))+(((-1.0)*gclwh15_0*x159))+((gclwh11_0*x157))+(((0.85)*x379))+((x163*x375))+((x163*x372))+(((-1.7)*x397))+(((0.00784)*x378))+(((-0.268)*x404))+(((-1.568)*gclwh5_0*x407))+(((1.7)*x402))+((gclwh2_0*x162))+(((-1.7)*x406))+(((0.536)*x393))+(((-1.0)*gclwh15_0*x164))+(((-0.85)*x376))+(((-1.0)*gclwh13_0*x162))+(((0.00268)*x388))+((gclwh0_0*x159))+(((-1.0)*gclwh0_0*x164))+((gclwh2_0*x158))+(((0.268)*x400))+(((0.536)*gclwh5_15*x407))+(((-0.1568)*x380))+(((-0.536)*x398))+(((0.0085)*x369))+(((0.85)*x374))+(((-0.0085)*x370)));
op[21]=((-0.089834)+(((-4.0)*x355))+(((0.02)*x337))+(((2.0)*x357))+(((4.0)*x360))+(((0.4)*x334))+(((0.02)*x344))+(((0.4)*x348))+(((-4.0)*x366))+(((-0.4)*x346))+(((-2.0)*x350))+(((2.0)*x368))+(((-0.02)*x340)));
op[22]=((-0.019045)+(((9.045e-5)*x336))+(((0.000955)*x359))+(((9.045e-5)*x333))+(((-1.0)*x367))+(((-0.01809)*x364))+(((-0.019045)*x352))+(((0.01809)*x351))+x357+(((-1.0)*x341))+(((-1.0)*x350))+(((-0.019045)*x363))+(((-0.000955)*x354))+x335+x338+x383+(((-1.0)*x347))+(((-9.045e-5)*x339))+(((9.045e-5)*x343))+x368+x361+(((9.045e-5)*x342))+(((0.01809)*x362))+(((0.01809)*x358))+x345+x349+(((-1.0)*x356))+(((-0.000955)*x365))+(((-0.01809)*x353)));
op[23]=(x399+x390+x396+(((-1.0)*x403))+(((-0.066)*x402))+(((0.066)*x406))+(((0.066)*x397))+(((-0.033)*x374))+(((-0.033)*x379))+(((-1.0)*x394))+(((0.033)*x376))+(((-0.0066)*x392))+x405+x387+x384+(((0.00033)*x370))+(((0.0066)*x391))+(((-0.00033)*x369))+(((-0.0066)*x385))+(((-1.0)*x401))+(((-1.0)*x389))+(((-0.00033)*x371)));
op[24]=((-0.437912)+x151);
op[25]=((((-1.0)*gclwh6_2*x408))+(((0.3268)*x126))+(((-3.268)*x160))+x156+(((0.01634)*x122))+(((-0.3268)*x127))+(((-1.0)*x128*x411))+(((-1.0)*x130*x412))+((gclwh6_2*x410))+(((1.634)*x131))+((gclwh8_2*x413))+((gclwh8_2*x409))+(((-0.3268)*x124)));
op[26]=((((1.568)*x96))+(((3.136)*x93))+(((0.01568)*x79))+(((0.1072)*x83))+(((1.568)*x92))+(((-3.136)*x91))+(((-0.1072)*x154))+(((-0.01568)*x89))+(((-3.136)*x95))+(((0.01568)*x90))+(((-0.1072)*x80))+(((-1.568)*x94)));
op[27]=((((-0.8)*x102))+(((8.0)*x114))+(((0.8)*x105))+(((-0.04)*x97))+(((4.0)*x118))+(((-4.0)*x113))+(((-0.04)*x110))+(((8.0)*x119))+(((-4.0)*x112))+(((0.04)*x108))+(((0.8)*x99))+(((-8.0)*x116)));
op[28]=((-0.017688)+(((-1.0)*x139))+(((-1.0)*x150))+x149+x148+x142+x140+x145+x143+(((-1.0)*x141))+(((-1.0)*x146))+(((-1.0)*x147))+(((-1.0)*x144)));
op[29]=(((gclwh8_2*x419))+(((-0.0132)*x127))+((gclwh6_2*x416))+x155+x152+(((-1.0)*x130*x418))+(((0.066)*x131))+(((0.00066)*x122))+(((-1.0)*x128*x417))+(((-0.132)*x160))+(((-1.0)*x153))+(((-1.0)*gclwh6_2*x414))+(((-0.0132)*x124))+((gclwh8_2*x415))+(((0.0132)*x126)));
op[30]=(((gclwh7_0*x410))+((gclwh9_0*x413))+(((-1.0)*gclwh7_0*x408))+(((1.634)*x198))+(((-0.3268)*x195))+(((-1.0)*x196*x411))+(((-0.3268)*x193))+(((0.3268)*x194))+(((-1.0)*x197*x412))+((gclwh9_0*x409))+(((0.01634)*x192))+(((-3.268)*x220))+x219);
op[31]=((-0.437912)+x233);
op[32]=((((0.04)*x178))+(((-0.04)*x176))+(((0.04)*x165))+(((4.0)*x188))+(((-0.8)*x174))+(((4.0)*x183))+(((-4.0)*x180))+(((-8.0)*x181))+(((-8.0)*x186))+(((-0.8)*x168))+(((8.0)*x184))+(((0.8)*x171)));
op[33]=((((-3.136)*x209))+(((1.568)*x214))+(((0.01568)*x201))+(((0.1072)*x204))+(((-1.568)*x212))+(((1.568)*x210))+(((-0.1072)*x202))+(((0.01568)*x208))+(((-0.1072)*x217))+(((3.136)*x211))+(((-0.01568)*x207))+(((-3.136)*x213)));
op[34]=(((gclwh9_0*x415))+(((-0.0132)*x193))+(((-1.0)*x197*x418))+(((-1.0)*x215))+(((-1.0)*x218))+(((0.066)*x198))+(((-0.132)*x220))+(((0.0132)*x194))+((gclwh9_0*x419))+x216+(((-1.0)*gclwh7_0*x414))+((gclwh7_0*x416))+(((0.00066)*x192))+(((-1.0)*x196*x417))+(((-0.0132)*x195)));
op[35]=((-0.017688)+(((-1.0)*x232))+(((-1.0)*x221))+(((-1.0)*x223))+(((-1.0)*x228))+(((-1.0)*x226))+(((-1.0)*x229))+x227+x225+x224+x222+x230+x231);
op[36]=((1.299066)+x327);
op[37]=((((-0.3268)*x309))+(((-1.0)*gclwh1_2*x413))+((gclwh14_2*x413))+(((-0.01634)*x302))+(((0.3268)*x308))+(((-1.0)*x302*x411))+((gclwh14_2*x409))+((gclwh3_2*x410))+(((-0.01634)*x306))+x330+((gclwh3_2*x408))+((x304*x412))+(((-1.0)*x305*x411))+(((-0.3268)*x301))+(((3.268)*x331))+(((-1.0)*x303*x412))+((gclwh1_2*x409))+(((-1.0)*x306*x411))+(((3.268)*x332)));
op[38]=((((0.3136)*x246))+(((1.072)*x248))+(((0.00536)*x241))+(((-0.00536)*x238))+(((-0.3136)*x247))+(((1.072)*x329))+(((-0.536)*x261))+(((-0.3136)*x237))+(((-0.00536)*x328))+(((-1.072)*x254))+(((0.536)*x256))+(((-0.536)*x250)));
op[39]=((-0.03602)+(((0.8)*x280))+(((4.0)*x298))+(((-0.8)*x278))+(((-8.0)*x283))+(((0.8)*x265))+(((4.0)*x285))+(((0.04)*x267))+(((8.0)*x288))+(((0.04)*x275))+(((-4.0)*x282))+(((-0.04)*x270))+(((-8.0)*x296)));
op[40]=((0.033734)+(((-1.0)*x319))+(((-1.0)*x325))+(((-1.0)*x324))+x326+x322+x323+x320+x315+x316+x318+(((-1.0)*x317))+(((-1.0)*x321)));
IkReal x420=(gclwh12_14*r21);
IkReal x421=(gclwh14_14*r20);
IkReal x422=((0.00268)*r22);
IkReal x423=(gclwh12_14*npy*pz);
IkReal x424=(gclwh12_14*pp*r21);
IkReal x425=(gclwh14_14*npx*pz);
IkReal x426=(gclwh14_14*pp*r20);
IkReal x427=((0.536)*npz*pz);
IkReal x428=((0.268)*pp);
IkReal x429=(((gclwh4_14*x422))+(((0.00268)*x420))+(((-0.268)*x426))+(((-0.536)*x423))+(((-0.00268)*x421))+(((0.268)*x424))+(((0.536)*x425))+(((-1.0)*gclwh4_14*x427))+((gclwh4_14*r22*x428)));
IkReal x430=(gclwh10_2*rxp2_2);
IkReal x431=(gclwh12_2*r21);
IkReal x432=(gclwh14_2*r20);
IkReal x433=(gclwh1_2*r20);
IkReal x434=(gclwh3_2*r21);
IkReal x435=((0.00066)*r22);
IkReal x436=((0.0132)*rxp1_2);
IkReal x437=((0.0132)*rxp0_2);
IkReal x438=(gclwh12_2*npy*pz);
IkReal x439=((0.066)*pp);
IkReal x440=(gclwh14_2*npx*pz);
IkReal x441=(gclwh1_2*npx*pz);
IkReal x442=(gclwh3_2*npy*pz);
IkReal x443=((0.132)*npz*pz);
IkReal x444=(gclwh4_2*r22);
IkReal x445=(gclwh0_0*r20);
IkReal x446=(gclwh11_0*rxp2_2);
IkReal x447=(gclwh13_0*r21);
IkReal x448=(gclwh13_15*r21);
IkReal x449=((0.00268)*x448);
IkReal x450=(gclwh15_0*r20);
IkReal x451=(gclwh15_15*r20);
IkReal x452=((0.00268)*x451);
IkReal x453=(gclwh2_0*r21);
IkReal x454=(gclwh5_0*r22);
IkReal x455=(gclwh5_15*x422);
IkReal x456=(gclwh7_0*rxp1_2);
IkReal x457=(gclwh9_0*rxp0_2);
IkReal x458=(gclwh0_0*npx*pz);
IkReal x459=(gclwh0_0*pp*r20);
IkReal x460=(gclwh13_0*npy*pz);
IkReal x461=((1.634)*pp);
IkReal x462=(gclwh13_15*npy*pz);
IkReal x463=((0.536)*x462);
IkReal x464=(gclwh13_15*pp*r21);
IkReal x465=((0.268)*x464);
IkReal x466=(gclwh15_0*npx*pz);
IkReal x467=(gclwh15_15*npx*pz);
IkReal x468=((0.536)*x467);
IkReal x469=(gclwh15_15*pp*r20);
IkReal x470=((0.268)*x469);
IkReal x471=(gclwh2_0*npy*pz);
IkReal x472=(npz*pz);
IkReal x473=(gclwh5_15*x427);
IkReal x474=(gclwh5_15*r22);
IkReal x475=(x428*x474);
IkReal x476=(gclwh11_10*rxp2_2);
IkReal x477=((0.4)*x476);
IkReal x478=(gclwh13_10*r21);
IkReal x479=((0.02)*x478);
IkReal x480=(gclwh15_10*r20);
IkReal x481=((0.02)*x480);
IkReal x482=(gclwh5_10*r22);
IkReal x483=((0.02)*x482);
IkReal x484=(gclwh7_10*rxp1_2);
IkReal x485=((0.4)*x484);
IkReal x486=(gclwh9_10*rxp0_2);
IkReal x487=((0.4)*x486);
IkReal x488=(gclwh13_10*npy*pz);
IkReal x489=((4.0)*x488);
IkReal x490=(pp*x478);
IkReal x491=((2.0)*x490);
IkReal x492=(gclwh15_10*npx*pz);
IkReal x493=((4.0)*x492);
IkReal x494=(pp*x480);
IkReal x495=((2.0)*x494);
IkReal x496=(gclwh5_10*npz*pz);
IkReal x497=((4.0)*x496);
IkReal x498=(pp*x482);
IkReal x499=((2.0)*x498);
IkReal x500=(gclwh11_13*rxp2_2);
IkReal x501=(gclwh7_13*rxp1_2);
IkReal x502=(gclwh9_13*rxp0_2);
IkReal x503=(gclwh5_15*pp*r22);
IkReal x504=(x475+(((-1.0)*x470))+(((-1.0)*x463))+(((-1.0)*x473))+x455+x449+(((-1.0)*x452))+x465+x468);
IkReal x505=((((-1.0)*x491))+(((-1.0)*x483))+(((-1.0)*x479))+(((-1.0)*x477))+(((-1.0)*x499))+(((-1.0)*x487))+x489+x481+x485+(((-1.0)*x493))+x495+x497);
IkReal x506=((0.00134)*r22);
IkReal x507=((0.00134)*r21);
IkReal x508=((0.00134)*r20);
IkReal x509=((0.268)*npz*pz);
IkReal x510=((0.134)*pp*r22);
IkReal x511=((0.268)*npy*pz);
IkReal x512=((0.134)*pp*r21);
IkReal x513=((0.268)*npx*pz);
IkReal x514=((0.134)*pp*r20);
IkReal x515=x78;
IkReal x516=(gclwh10_12*r22);
IkReal x517=(gclwh12_14*rxp1_2);
IkReal x518=((0.0268)*x517);
IkReal x519=(gclwh12_8*rxp1_2);
IkReal x520=(gclwh14_14*rxp0_2);
IkReal x521=((0.0268)*x520);
IkReal x522=(gclwh14_8*rxp0_2);
IkReal x523=((0.0268)*rxp2_2);
IkReal x524=(gclwh4_14*x523);
IkReal x525=(gclwh4_8*rxp2_2);
IkReal x526=(gclwh6_12*r21);
IkReal x527=(gclwh8_12*r20);
IkReal x528=(gclwh10_12*npz*pz);
IkReal x529=(gclwh10_12*pp*r22);
IkReal x530=(gclwh6_12*npy*pz);
IkReal x531=(gclwh6_12*pp*r21);
IkReal x532=(gclwh8_12*npx*pz);
IkReal x533=(gclwh8_12*pp*r20);
IkReal x534=(gclwh10_11*r22);
IkReal x535=((0.01)*x534);
IkReal x536=(gclwh12_11*rxp1_2);
IkReal x537=((0.2)*x536);
IkReal x538=(gclwh12_3*rxp1_2);
IkReal x539=(gclwh14_11*rxp0_2);
IkReal x540=((0.2)*x539);
IkReal x541=(gclwh14_3*rxp0_2);
IkReal x542=(gclwh4_11*rxp2_2);
IkReal x543=((0.2)*x542);
IkReal x544=(gclwh4_3*rxp2_2);
IkReal x545=(gclwh6_11*r21);
IkReal x546=((0.01)*x545);
IkReal x547=(gclwh8_11*r20);
IkReal x548=((0.01)*x547);
IkReal x549=(pp*x545);
IkReal x550=(gclwh10_11*npz*pz);
IkReal x551=((2.0)*x550);
IkReal x552=(pp*x534);
IkReal x553=(gclwh6_11*npy*pz);
IkReal x554=((2.0)*x553);
IkReal x555=(gclwh8_11*npx*pz);
IkReal x556=((2.0)*x555);
IkReal x557=(pp*x547);
IkReal x558=((0.01)*pz);
IkReal x559=(gclwh10_2*r22);
IkReal x560=((0.2)*pz*rxp1_2);
IkReal x561=((0.2)*pp);
IkReal x562=((0.2)*pz*rxp0_2);
IkReal x563=((0.2)*pz*rxp2_2);
IkReal x564=(gclwh6_2*r21);
IkReal x565=(gclwh8_2*r20);
IkReal x566=(pp*pz);
IkReal x567=((1.0)*pp*pz);
IkReal x568=pz*pz;
IkReal x569=((2.0)*npz*x568);
IkReal x570=((2.0)*npy*x568);
IkReal x571=((2.0)*npx*x568);
IkReal x572=(((x544*x561))+(((-1.0)*x541*x561))+(((-1.0)*gclwh10_2*x569))+((x558*x565))+(((-1.0)*x564*x567))+((x565*x566))+(((-1.0)*gclwh8_2*x571))+(((0.02)*x525))+((x558*x559))+((x559*x566))+((gclwh14_2*x562))+(((-1.0)*gclwh12_2*x560))+(((-1.0)*x558*x564))+(((0.02)*x519))+((x538*x561))+((gclwh6_2*x570))+(((-1.0)*gclwh4_2*x563))+(((-0.02)*x522)));
IkReal x573=((0.00784)*r22);
IkReal x574=((0.1568)*rxp1_2);
IkReal x575=((0.1568)*rxp0_2);
IkReal x576=((0.0536)*rxp2_2);
IkReal x577=((0.1568)*rxp2_2);
IkReal x578=((0.00784)*r21);
IkReal x579=((0.00784)*r20);
IkReal x580=((1.568)*npz*pz);
IkReal x581=((0.784)*pp);
IkReal x582=((1.568)*npy*pz);
IkReal x583=((1.568)*npx*pz);
IkReal x584=(gclwh11_10*r22);
IkReal x585=((0.01)*x584);
IkReal x586=(gclwh13_1*rxp1_2);
IkReal x587=(gclwh13_10*rxp1_2);
IkReal x588=((0.2)*x587);
IkReal x589=(gclwh15_1*rxp0_2);
IkReal x590=(gclwh15_10*rxp0_2);
IkReal x591=((0.2)*x590);
IkReal x592=(gclwh5_1*rxp2_2);
IkReal x593=(gclwh5_10*rxp2_2);
IkReal x594=((0.2)*x593);
IkReal x595=(gclwh7_10*r21);
IkReal x596=((0.01)*x595);
IkReal x597=(gclwh9_10*r20);
IkReal x598=((0.01)*x597);
IkReal x599=(pp*x584);
IkReal x600=(pp*x597);
IkReal x601=(gclwh11_10*npz*pz);
IkReal x602=((2.0)*x601);
IkReal x603=(gclwh7_10*npy*pz);
IkReal x604=((2.0)*x603);
IkReal x605=(pp*x595);
IkReal x606=(gclwh9_10*npx*pz);
IkReal x607=((2.0)*x606);
IkReal x608=(gclwh13_9*rxp1_2);
IkReal x609=(gclwh15_9*rxp0_2);
IkReal x610=(gclwh5_9*rxp2_2);
IkReal x611=(gclwh11_0*r22);
IkReal x612=(gclwh7_0*r21);
IkReal x613=(gclwh9_0*r20);
IkReal x614=((((-1.0)*gclwh13_0*x560))+(((0.02)*x610))+(((-1.0)*gclwh11_0*x569))+(((0.02)*x608))+(((-1.0)*gclwh5_0*x563))+(((-1.0)*x561*x589))+((gclwh7_0*x570))+((x561*x592))+(((-1.0)*x567*x612))+((x558*x611))+(((-1.0)*x558*x612))+((x561*x586))+((x566*x613))+(((-0.02)*x609))+((x558*x613))+((x566*x611))+(((-1.0)*gclwh9_0*x571))+((gclwh15_0*x562)));
IkReal x615=x200;
IkReal x616=(gclwh11_13*r22);
IkReal x617=(gclwh13_15*rxp1_2);
IkReal x618=((0.0268)*x617);
IkReal x619=(gclwh15_15*rxp0_2);
IkReal x620=((0.0268)*x619);
IkReal x621=(gclwh5_15*x523);
IkReal x622=(gclwh7_13*r21);
IkReal x623=(gclwh9_13*r20);
IkReal x624=(gclwh11_13*npz*pz);
IkReal x625=(gclwh11_13*pp*r22);
IkReal x626=(gclwh7_13*npy*pz);
IkReal x627=(gclwh7_13*pp*r21);
IkReal x628=(gclwh9_13*npx*pz);
IkReal x629=(gclwh9_13*pp*r20);
IkReal x630=((0.0268)*rxp1_2);
IkReal x631=((0.0268)*rxp0_2);
IkReal x632=x236;
IkReal x633=(gclwh10_12*rxp2_2);
IkReal x634=((0.00134)*x420);
IkReal x635=(gclwh12_8*r21);
IkReal x636=((0.00134)*x421);
IkReal x637=(gclwh14_8*r20);
IkReal x638=(gclwh4_14*x506);
IkReal x639=(gclwh4_8*r22);
IkReal x640=(gclwh6_12*rxp1_2);
IkReal x641=(gclwh8_12*rxp0_2);
IkReal x642=((0.268)*x423);
IkReal x643=((0.134)*x424);
IkReal x644=(gclwh12_8*npy*pz);
IkReal x645=(gclwh12_8*pp*r21);
IkReal x646=((0.268)*x425);
IkReal x647=((0.134)*x426);
IkReal x648=(gclwh14_8*npx*pz);
IkReal x649=(gclwh14_8*pp*r20);
IkReal x650=(gclwh4_14*x509);
IkReal x651=(gclwh4_14*x510);
IkReal x652=(gclwh4_8*npz*pz);
IkReal x653=(gclwh4_8*pp*r22);
IkReal x654=(gclwh10_11*rxp2_2);
IkReal x655=((0.2)*x654);
IkReal x656=(gclwh12_11*r21);
IkReal x657=((0.01)*x656);
IkReal x658=(gclwh12_3*r21);
IkReal x659=(gclwh14_11*r20);
IkReal x660=((0.01)*x659);
IkReal x661=(gclwh14_3*r20);
IkReal x662=(gclwh1_3*r20);
IkReal x663=(gclwh3_3*r21);
IkReal x664=(gclwh4_11*r22);
IkReal x665=((0.01)*x664);
IkReal x666=(gclwh4_3*r22);
IkReal x667=(gclwh6_11*rxp1_2);
IkReal x668=((0.2)*x667);
IkReal x669=(gclwh8_11*rxp0_2);
IkReal x670=((0.2)*x669);
IkReal x671=(pp*x656);
IkReal x672=(pp*x664);
IkReal x673=(gclwh12_11*npy*pz);
IkReal x674=((2.0)*x673);
IkReal x675=(gclwh12_3*npy*pz);
IkReal x676=(gclwh12_3*pp*r21);
IkReal x677=(gclwh14_11*npx*pz);
IkReal x678=((2.0)*x677);
IkReal x679=(pp*x659);
IkReal x680=(gclwh14_3*npx*pz);
IkReal x681=(gclwh14_3*pp*r20);
IkReal x682=(gclwh1_3*npx*pz);
IkReal x683=(gclwh1_3*pp*r20);
IkReal x684=(gclwh3_3*npy*pz);
IkReal x685=(gclwh3_3*pp*r21);
IkReal x686=(gclwh4_11*npz*pz);
IkReal x687=((2.0)*x686);
IkReal x688=(gclwh4_3*npz*pz);
IkReal x689=(gclwh4_3*pp*r22);
IkReal x690=((0.2)*pz);
IkReal x691=((0.2)*npz*pz);
IkReal x692=pp*pp;
IkReal x693=((2.0)*pp);
IkReal x694=((1.0)*x692);
IkReal x695=((((-1.0)*x675*x693))+((x432*x558))+((x662*x692))+(((-1.0)*x661*x694))+(((-1.0)*x431*x558))+((x680*x693))+((gclwh1_2*x571))+((gclwh14_8*npx*x690))+(((-1.0)*gclwh8_2*x562))+((gclwh3_2*x570))+(((-1.0)*gclwh14_2*x571))+(((-1.0)*x682*x693))+(((-1.0)*x433*x567))+(((-1.0)*x431*x567))+((gclwh6_2*x560))+(((-1.0)*x688*x693))+(((0.1)*x645))+(((-1.0)*gclwh4_8*x691))+((x666*x692))+((gclwh4_2*x569))+(((0.1)*x653))+(((0.001)*x635))+(((-0.001)*x637))+(((-1.0)*x444*x558))+(((-1.0)*x444*x567))+(((-1.0)*gclwh12_8*npy*x690))+(((-1.0)*x684*x693))+x690+(((-0.1)*x649))+(((-1.0)*x430*x690))+((x434*x558))+((x658*x692))+((gclwh12_2*x570))+(((-1.0)*x434*x567))+((x663*x692))+(((0.001)*x639))+((x432*x566))+((x433*x558)));
IkReal x696=(gclwh0_1*r20);
IkReal x697=((0.2)*x476);
IkReal x698=(gclwh13_1*r21);
IkReal x699=((0.01)*x478);
IkReal x700=(gclwh15_1*r20);
IkReal x701=((0.01)*x480);
IkReal x702=(gclwh2_1*r21);
IkReal x703=(gclwh5_1*r22);
IkReal x704=((0.01)*x482);
IkReal x705=((0.2)*x484);
IkReal x706=((0.2)*x486);
IkReal x707=(gclwh0_1*npx*pz);
IkReal x708=(gclwh0_1*pp*r20);
IkReal x709=(gclwh13_1*npy*pz);
IkReal x710=(gclwh13_1*pp*r21);
IkReal x711=((2.0)*x488);
IkReal x712=(gclwh15_1*npx*pz);
IkReal x713=(gclwh15_1*pp*r20);
IkReal x714=((2.0)*x492);
IkReal x715=(gclwh2_1*npy*pz);
IkReal x716=(gclwh2_1*pp*r21);
IkReal x717=(gclwh5_1*npz*pz);
IkReal x718=(gclwh5_1*pp*r22);
IkReal x719=((2.0)*x496);
IkReal x720=(gclwh13_9*r21);
IkReal x721=(gclwh15_9*r20);
IkReal x722=(gclwh5_9*r22);
IkReal x723=(gclwh13_9*pp*r21);
IkReal x724=(gclwh15_9*pp*r20);
IkReal x725=(gclwh5_9*pp*r22);
IkReal x726=(((gclwh13_9*npy*x690))+((x454*x566))+((gclwh2_0*x570))+((x693*x709))+((gclwh0_0*x571))+((x693*x717))+(((-1.0)*x456*x690))+((x457*x690))+(((-0.1)*x725))+(((-1.0)*x694*x698))+((x447*x558))+(((-0.1)*x723))+(((-1.0)*gclwh15_9*npx*x690))+(((-1.0)*x693*x707))+(((-1.0)*gclwh13_0*x570))+((x692*x700))+(((-1.0)*gclwh5_0*x569))+((x454*x558))+((x453*x558))+(((-1.0)*x693*x715))+(((-0.001)*x722))+((gclwh5_9*x691))+((x446*x690))+x690+(((-1.0)*x693*x712))+(((-1.0)*x450*x567))+(((0.001)*x721))+((x692*x696))+(((-0.001)*x720))+((x692*x702))+(((-1.0)*x453*x567))+(((-1.0)*x450*x558))+(((-1.0)*x694*x703))+((x447*x566))+((gclwh15_0*x571))+(((-1.0)*pz*x459))+(((0.1)*x724))+((x445*x558)));
IkReal x727=x384;
IkReal x728=((0.00134)*x448);
IkReal x729=((0.00134)*x451);
IkReal x730=(gclwh5_15*x506);
IkReal x731=((0.268)*x462);
IkReal x732=((0.134)*x464);
IkReal x733=(gclwh13_9*npy*pz);
IkReal x734=((0.268)*x467);
IkReal x735=((0.134)*x469);
IkReal x736=(gclwh15_9*npx*pz);
IkReal x737=(gclwh5_15*x509);
IkReal x738=((0.134)*x503);
IkReal x739=(gclwh5_9*npz*pz);
op[41]=((((-0.0132)*x430))+((x432*x439))+(((-1.0)*gclwh4_2*x435))+x429+(((0.132)*x438))+(((-0.00066)*x431))+(((-0.132)*x440))+(((0.132)*x442))+(((0.00066)*x432))+(((0.00066)*x434))+(((0.132)*x441))+(((0.00066)*x433))+(((-1.0)*x439*x444))+(((-1.0)*x431*x439))+((gclwh4_2*x443))+(((-1.0)*gclwh8_2*x437))+(((-1.0)*x433*x439))+(((-1.0)*x434*x439))+((gclwh6_2*x436)));
op[42]=((((0.01634)*x445))+x470+x473+(((-1.634)*x459))+(((-0.3268)*x456))+((x454*x461))+(((3.268)*x458))+(((0.3268)*x446))+(((0.01634)*x453))+(((-1.0)*x468))+((x447*x461))+(((-1.0)*x475))+(((-1.0)*x450*x461))+(((0.01634)*x454))+(((-1.0)*x453*x461))+x452+(((-1.0)*x449))+(((-0.01634)*x450))+(((0.3268)*x457))+(((0.01634)*x447))+(((-1.0)*x455))+(((-3.268)*x460))+(((-3.268)*gclwh5_0*x472))+(((3.268)*x466))+x463+(((3.268)*x471))+(((-1.0)*x465)));
op[43]=((1.299066)+x479+x477+(((-1.0)*x497))+(((-1.0)*x481))+(((-1.0)*x485))+(((-1.0)*x489))+(((-1.0)*x495))+x487+x483+x499+x491+x493);
op[44]=((0.03602)+(((-4.0)*x494))+(((-0.8)*x484))+(((4.0)*x490))+(((-0.04)*x480))+(((-8.0)*x496))+(((0.8)*x486))+(((-8.0)*x488))+(((8.0)*x492))+(((0.8)*x476))+(((4.0)*x498))+(((0.04)*x482))+(((0.04)*x478)));
op[45]=((((0.536)*x464))+(((-1.072)*x462))+(((-1.072)*gclwh5_15*x472))+(((0.536)*x503))+(((0.3136)*x502))+(((0.00536)*x474))+(((0.3136)*x500))+(((-0.00536)*x451))+(((-0.3136)*x501))+(((-0.536)*x469))+(((0.00536)*x448))+(((1.072)*x467)));
op[46]=((((-1.0)*x439*x453))+((gclwh9_0*x437))+(((-0.066)*x459))+(((0.132)*x458))+x504+(((-1.0)*gclwh5_0*x443))+((x439*x447))+(((-1.0)*x439*x450))+(((0.132)*x471))+(((0.00066)*x445))+(((0.0132)*x446))+(((0.00066)*x447))+(((-1.0)*gclwh7_0*x436))+(((-0.132)*x460))+(((0.00066)*x453))+(((-0.00066)*x450))+((gclwh5_0*x435))+((x439*x454))+(((0.132)*x466)));
op[47]=((0.033734)+x505);
op[48]=((((-0.00817)*x526))+(((-1.0)*x518))+(((-1.634)*x528))+(((0.00817)*x516))+(((1.634)*x530))+(((0.00817)*x527))+(((-0.1634)*x519))+(((0.1634)*x522))+(((-0.1634)*x525))+(((-1.634)*x532))+(((-0.817)*x531))+(((0.817)*x529))+(((-1.0)*x524))+x515+x521+(((0.817)*x533)));
op[49]=(x537+x572+(((-1.0)*x535))+(((0.135089)*x541))+(((-0.135089)*x538))+x556+x551+(((-1.0)*x540))+(((-1.0)*x557))+(((-1.0)*x554))+(((-1.0)*x552))+(((-0.135089)*x544))+x549+x546+x543+(((-1.0)*x548)));
op[50]=((0.210112)+(((2.0)*x549))+(((4.0)*x550))+(((0.4)*x536))+(((-0.02)*x547))+(((4.0)*x555))+(((-2.0)*x552))+(((-2.0)*x557))+(((-4.0)*x553))+(((-0.4)*x539))+(((-0.02)*x534))+(((0.02)*x545))+(((0.4)*x542)));
op[51]=((((-1.0)*gclwh14_2*x575))+(((-1.0)*x559*x581))+(((-0.17)*x522))+(((-1.0)*gclwh8_2*x579))+(((0.17)*x519))+((gclwh10_2*x580))+(((0.0536)*x517))+((gclwh6_2*x578))+(((-1.0)*gclwh6_2*x582))+((gclwh8_2*x583))+((x564*x581))+(((0.17)*x525))+(((-1.0)*x565*x581))+((gclwh4_2*x577))+((gclwh12_2*x574))+(((-0.0536)*x520))+(((-1.0)*gclwh10_2*x573))+((gclwh4_14*x576)));
op[52]=((((-0.0066)*x522))+(((-0.00033)*x526))+(((0.033)*x529))+(((0.0066)*x519))+(((-0.066)*x532))+(((-0.033)*x531))+(((0.00033)*x527))+(((-0.066)*x528))+(((0.0066)*x525))+(((0.033)*x533))+(((-1.0)*x521))+x518+x515+(((0.066)*x530))+(((0.00033)*x516))+x524);
op[53]=(x535+x572+(((-1.0)*x556))+(((-0.001809)*x538))+(((-1.0)*x549))+(((-0.001809)*x544))+(((-1.0)*x537))+x557+x554+x552+(((-1.0)*x551))+(((0.001809)*x541))+(((-1.0)*x543))+x548+x540+(((-1.0)*x546)));
op[54]=(x614+(((-0.135089)*x592))+(((-1.0)*x605))+(((-1.0)*x594))+(((-0.135089)*x586))+(((-1.0)*x588))+(((0.135089)*x589))+x585+(((-1.0)*x602))+x599+x598+x591+(((-1.0)*x607))+x600+x604+(((-1.0)*x596)));
op[55]=(x615+(((-1.634)*x624))+(((0.817)*x629))+(((0.00817)*x623))+(((1.634)*x626))+(((-1.0)*x621))+x620+(((-0.1634)*x608))+(((-0.817)*x627))+(((0.00817)*x616))+(((0.817)*x625))+(((-0.00817)*x622))+(((0.1634)*x609))+(((-0.1634)*x610))+(((-1.0)*x618))+(((-1.634)*x628)));
op[56]=((((-1.0)*gclwh9_0*x579))+((gclwh13_0*x574))+(((-0.0536)*x617))+(((-1.0)*gclwh15_0*x575))+(((-1.0)*x581*x611))+((gclwh9_0*x583))+((gclwh11_0*x580))+(((-1.0)*x581*x613))+(((-1.0)*gclwh11_0*x573))+(((-0.17)*x608))+((gclwh7_0*x578))+(((-1.0)*gclwh7_0*x582))+(((-1.0)*gclwh5_15*x576))+(((0.0536)*x619))+((x581*x612))+(((0.17)*x609))+((gclwh5_0*x577))+(((-0.17)*x610)));
op[57]=((0.210112)+(((0.4)*x593))+(((2.0)*x605))+(((4.0)*x606))+(((-4.0)*x603))+(((-2.0)*x600))+(((-0.4)*x590))+(((0.02)*x595))+(((-0.02)*x584))+(((-2.0)*x599))+(((0.4)*x587))+(((-0.02)*x597))+(((4.0)*x601)));
op[58]=(x614+(((-1.0)*x585))+(((-1.0)*x598))+(((-1.0)*x600))+(((0.001809)*x589))+(((-0.001809)*x586))+(((-0.001809)*x592))+(((-1.0)*x604))+x588+x594+x596+x607+x602+x605+(((-1.0)*x591))+(((-1.0)*x599)));
op[59]=(x615+x618+(((-0.066)*x628))+(((0.066)*x626))+(((0.033)*x629))+(((0.00033)*x623))+(((-0.00033)*x622))+(((0.00033)*x616))+(((-0.066)*x624))+(((-0.0066)*x609))+(((0.033)*x625))+(((0.0066)*x608))+x621+(((-0.033)*x627))+(((-1.0)*x620))+(((0.0066)*x610)));
op[60]=((((-1.0)*x643))+(((-0.00817)*x635))+(((1.634)*x652))+(((-1.0)*x646))+(((-0.817)*x653))+(((-0.1634)*x633))+(((-0.817)*x645))+(((-1.634)*x648))+x632+x636+(((0.1634)*x640))+(((0.00817)*x637))+(((-1.0)*x638))+x650+(((-1.0)*x651))+(((1.634)*x644))+(((0.817)*x649))+(((-1.0)*x634))+(((-0.1634)*x641))+x642+x647+(((-0.00817)*x639)));
op[61]=((0.685445)+(((1.35089)*x684))+(((-0.00675445)*x666))+(((1.35089)*x682))+(((-1.0)*x687))+(((-0.685445)*x683))+(((1.35089)*x688))+(((-1.0)*x660))+(((1.35089)*x675))+(((-1.0)*x668))+x657+x655+(((0.00675445)*x663))+(((-0.685445)*x685))+(((-0.00675445)*x658))+(((0.00675445)*x662))+x695+(((-0.665445)*x676))+(((0.665445)*x681))+(((-1.0)*x674))+(((-1.0)*x679))+(((-0.665445)*x689))+(((0.00675445)*x661))+x665+x670+x671+x678+x672+(((-1.35089)*x680)));
op[62]=((0.089834)+(((0.4)*x669))+(((4.0)*x677))+(((-0.02)*x659))+(((0.02)*x656))+(((2.0)*x672))+(((0.4)*x654))+(((2.0)*x671))+(((-4.0)*x686))+(((0.02)*x664))+(((-0.4)*x667))+(((-2.0)*x679))+(((-4.0)*x673)));
op[63]=((((-1.568)*x441))+(((1.7)*x648))+(((1.568)*x440))+((x444*x581))+(((-1.0)*x432*x581))+(((-1.0)*gclwh4_2*x580))+(((0.00784)*x431))+(((-1.568)*x442))+(((-0.00784)*x432))+(((0.1568)*x430))+((x431*x581))+(((-0.00784)*x433))+x429+(((0.0085)*x639))+(((-1.7)*x652))+(((-0.00784)*x434))+(((0.85)*x653))+((x434*x581))+(((0.85)*x645))+(((-0.85)*x649))+(((-1.0)*gclwh6_2*x574))+(((-1.568)*x438))+((gclwh8_2*x575))+(((0.0085)*x635))+(((-1.7)*x644))+((gclwh4_2*x573))+(((-0.0085)*x637))+((x433*x581)));
op[64]=((((-0.066)*x652))+(((0.0066)*x640))+(((0.00033)*x639))+(((-1.0)*x642))+(((0.066)*x648))+(((-1.0)*x647))+x638+x632+x634+(((-0.033)*x649))+(((-0.066)*x644))+(((-1.0)*x636))+x651+(((-1.0)*x650))+(((-0.0066)*x641))+x643+x646+(((-0.00033)*x637))+(((-0.0066)*x633))+(((0.033)*x645))+(((0.033)*x653))+(((0.00033)*x635)));
op[65]=((-0.019045)+(((0.000955)*x676))+(((0.01809)*x688))+(((-0.000955)*x681))+(((-0.019045)*x683))+(((-1.0)*x671))+(((-0.01809)*x680))+(((0.01809)*x675))+(((-9.045e-5)*x658))+(((-1.0)*x670))+(((-9.045e-5)*x666))+(((9.045e-5)*x661))+(((9.045e-5)*x662))+(((-1.0)*x678))+(((9.045e-5)*x663))+(((0.01809)*x682))+x695+(((0.01809)*x684))+x660+x668+(((0.000955)*x689))+(((-1.0)*x655))+(((-1.0)*x672))+x674+x679+x687+(((-1.0)*x665))+(((-1.0)*x657))+(((-0.019045)*x685)));
op[66]=((-0.685445)+(((0.00675445)*x696))+(((0.665445)*x718))+(((1.35089)*x707))+(((-0.685445)*x716))+(((-0.685445)*x708))+(((1.35089)*x715))+(((0.665445)*x710))+(((0.00675445)*x702))+(((-0.00675445)*x700))+(((-1.0)*x711))+(((1.35089)*x712))+(((0.00675445)*x703))+(((-0.665445)*x713))+x706+x704+x714+(((0.00675445)*x698))+x699+x697+(((-1.0)*x701))+(((-1.35089)*x717))+(((-1.0)*x719))+x498+x490+(((-1.35089)*x709))+x726+(((-1.0)*x705))+(((-1.0)*x494)));
op[67]=((((-1.0)*x737))+(((0.00817)*x720))+(((-0.00817)*x721))+(((-0.1634)*x501))+(((0.1634)*x502))+(((0.817)*x723))+(((0.1634)*x500))+(((-1.0)*x735))+(((-1.634)*x739))+x738+x730+x732+x734+(((0.00817)*x722))+(((-1.0)*x729))+(((0.817)*x725))+(((-1.0)*x731))+(((-1.634)*x733))+(((1.634)*x736))+x727+x728+(((-0.817)*x724)));
op[68]=((((-0.1568)*x446))+(((-0.00784)*x445))+(((-0.0085)*x721))+(((1.7)*x736))+(((0.00784)*x450))+(((-1.0)*x454*x581))+(((-0.00784)*x447))+(((-1.7)*x733))+(((1.568)*x460))+x504+(((-0.00784)*x453))+(((0.85)*x723))+(((0.0085)*x722))+((gclwh5_0*x580))+(((-1.568)*x466))+(((-1.0)*gclwh5_0*x573))+((x453*x581))+(((0.0085)*x720))+(((-1.568)*x471))+(((0.784)*x459))+((x450*x581))+(((-1.568)*x458))+(((-1.0)*x447*x581))+(((0.85)*x725))+(((-0.85)*x724))+(((-1.0)*gclwh9_0*x575))+((gclwh7_0*x574))+(((-1.7)*x739)));
op[69]=((0.089834)+x505);
op[70]=((0.019045)+(((9.045e-5)*x702))+(((-0.019045)*x716))+(((-1.0)*x697))+(((-1.0)*x704))+(((-9.045e-5)*x700))+(((-0.01809)*x709))+(((-1.0)*x714))+(((-1.0)*x498))+(((-0.01809)*x717))+(((9.045e-5)*x698))+(((-0.000955)*x718))+(((0.000955)*x713))+x701+x705+(((-1.0)*x699))+x711+x719+(((0.01809)*x707))+(((0.01809)*x712))+(((-0.000955)*x710))+(((-1.0)*x706))+(((9.045e-5)*x696))+(((0.01809)*x715))+(((9.045e-5)*x703))+(((-0.019045)*x708))+(((-1.0)*x490))+x494+x726);
op[71]=((((0.066)*x733))+(((-0.033)*x725))+(((0.066)*x739))+(((0.033)*x724))+(((-1.0)*x738))+(((-1.0)*x734))+(((0.00033)*x721))+(((0.0066)*x500))+x735+x737+x731+(((-0.066)*x736))+(((-0.00033)*x720))+(((-1.0)*x728))+(((-0.00033)*x722))+(((-0.0066)*x501))+(((0.0066)*x502))+(((-0.033)*x723))+(((-1.0)*x730))+x727+x729+(((-1.0)*x732)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x740=htj1*htj1;
CheckValue<IkReal> x741=IKPowWithIntegerCheck(((1.0)+x740),-1);
if(!x741.valid){
continue;
}
cj1array[numsolutions]=((x741.value)*(((1.0)+(((-1.0)*x740)))));
CheckValue<IkReal> x742=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x742.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x742.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x743=htj2*htj2;
CheckValue<IkReal> x744=IKPowWithIntegerCheck(((1.0)+x743),-1);
if(!x744.valid){
continue;
}
cj2array[numsolutions]=((x744.value)*(((1.0)+(((-1.0)*x743)))));
CheckValue<IkReal> x745=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x745.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x745.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x746=htj3*htj3;
CheckValue<IkReal> x747=IKPowWithIntegerCheck(((1.0)+x746),-1);
if(!x747.valid){
continue;
}
cj3array[numsolutions]=((x747.value)*(((1.0)+(((-1.0)*x746)))));
CheckValue<IkReal> x748=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x748.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x748.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x749=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x749);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x749);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x750=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x750);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x750);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(r22,-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(sj3,-1);
if(!x752.valid){
continue;
}
sj4array[0]=((x751.value)*(x752.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x753=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x753);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x753);
IkReal x754=(r10*sj3);
IkReal x755=(cj3*cj4*r11);
IkReal x756=(cj1*cj2*r01*sj4);
IkReal x757=(r01*sj1*sj2*sj4);
IkReal x758=(r00*sj3);
IkReal x759=(cj3*cj4*r01);
IkReal x760=(cj1*cj2*r11*sj4);
IkReal x761=(r11*sj1*sj2*sj4);
IkReal x762=(cj3*r12*sj4);
IkReal x763=(cj1*cj2*cj4*r02);
IkReal x764=(cj4*r02*sj1*sj2);
IkReal x765=((((12.0)*x764))+(((-12.0)*x762))+(((-12.0)*x763)));
IkReal x766=((4.0)*sj3);
IkReal x767=(r11*x766);
IkReal x768=((4.0)*cj3*cj4);
IkReal x769=(r10*x768);
IkReal x770=((4.0)*cj1*cj2*sj4);
IkReal x771=(r00*x770);
IkReal x772=((4.0)*sj1*sj2*sj4);
IkReal x773=(r00*x772);
IkReal x774=((((-1.0)*x773))+(((-1.0)*x769))+x767+x771);
IkReal x775=(cj3*r02*sj4);
IkReal x776=(cj1*cj2*cj4*r12);
IkReal x777=(cj4*r12*sj1*sj2);
IkReal x778=(r01*x766);
IkReal x779=(r00*x768);
IkReal x780=(r10*x770);
IkReal x781=(r10*x772);
IkReal x782=((((-1.0)*x779))+x781+(((-1.0)*x780))+x778);
IkReal x783=((((12.0)*x776))+(((-12.0)*x777))+(((-12.0)*x775)));
j5eval[0]=((IKabs(((((-8.0)*x755))+(((8.0)*x756))+(((-8.0)*x754))+(((-8.0)*x757)))))+(((0.5)*(IKabs(((((-4.0)*x763))+(((4.0)*x764))+(((-4.0)*x762))+x774)))))+(IKabs(((((-8.0)*x758))+(((8.0)*x761))+(((-8.0)*x760))+(((-8.0)*x759)))))+(((0.5)*(IKabs(((((-16.0)*x759))+(((-16.0)*x758))+(((16.0)*x761))+(((-16.0)*x760)))))))+(((0.5)*(IKabs((x765+x774)))))+(((0.5)*(IKabs(((((-1.0)*x767))+x769+x765+(((-1.0)*x771))+x773)))))+(((0.5)*(IKabs((x782+(((-4.0)*x777))+(((4.0)*x776))+(((-4.0)*x775)))))))+(((0.5)*(IKabs((x780+x783+(((-1.0)*x781))+(((-1.0)*x778))+x779)))))+(((0.5)*(IKabs((x782+x783)))))+(((0.5)*(IKabs(((((-16.0)*x755))+(((-16.0)*x754))+(((-16.0)*x757))+(((16.0)*x756))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x784=(cj3*r12*sj4);
IkReal x785=(cj1*cj2*cj4*r02);
IkReal x786=(cj4*r02*sj1*sj2);
IkReal x787=((((4.0)*x786))+(((-4.0)*x784))+(((-4.0)*x785)));
IkReal x788=((4.0)*r11*sj3);
IkReal x789=((((4.0)*r10))*((cj3*cj4)));
IkReal x790=((4.0)*r00);
IkReal x791=(cj1*cj2*sj4*x790);
IkReal x792=(sj1*sj2*sj4*x790);
IkReal x793=(x788+(((-1.0)*x789))+(((-1.0)*x792))+x791);
IkReal x794=(r10*sj3);
IkReal x795=(cj3*cj4*r11);
IkReal x796=(cj1*cj2*r01*sj4);
IkReal x797=(r01*sj1*sj2*sj4);
IkReal x798=((((8.0)*x796))+(((-8.0)*x795))+(((-8.0)*x797))+(((-8.0)*x794)));
IkReal x799=((((-12.0)*x785))+(((12.0)*x786))+(((-12.0)*x784)));
IkReal x800=(x789+(((-1.0)*x791))+(((-1.0)*x788))+x792);
op[0]=(x787+x793);
op[1]=x798;
op[2]=(x799+x793);
op[3]=((((-16.0)*x794))+(((16.0)*x796))+(((-16.0)*x797))+(((-16.0)*x795)));
op[4]=(x800+x799);
op[5]=x798;
op[6]=(x787+x800);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x801=((4.0)*r01*sj3);
IkReal x802=((((4.0)*r00))*((cj3*cj4)));
IkReal x803=((4.0)*r10);
IkReal x804=(cj1*cj2*sj4*x803);
IkReal x805=(sj1*sj2*sj4*x803);
IkReal x806=((((-1.0)*x801))+x802+x804+(((-1.0)*x805)));
IkReal x807=(cj3*r02*sj4);
IkReal x808=((-4.0)*x807);
IkReal x809=(cj1*cj2*cj4*r12);
IkReal x810=((4.0)*x809);
IkReal x811=(cj4*r12*sj1*sj2);
IkReal x812=((-4.0)*x811);
IkReal x813=(r00*sj3);
IkReal x814=(cj3*cj4*r01);
IkReal x815=(cj1*cj2*r11*sj4);
IkReal x816=(r11*sj1*sj2*sj4);
IkReal x817=((((-8.0)*x813))+(((-8.0)*x814))+(((-8.0)*x815))+(((8.0)*x816)));
IkReal x818=((((-12.0)*x807))+(((-12.0)*x811))+(((12.0)*x809)));
IkReal x819=(x805+x801+(((-1.0)*x802))+(((-1.0)*x804)));
j5evalpoly[0]=(((htj5*x817))+(((htj5*htj5)*((x806+x818))))+x806+x808+x810+x812+((x817*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x819+x818))))+(((htj5*htj5*htj5)*(((((-16.0)*x815))+(((16.0)*x816))+(((-16.0)*x814))+(((-16.0)*x813))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x808+x819+x810+x812)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x820=(sj4*sj5);
IkReal x821=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x821))+((r01*x820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x820))+((r10*x821))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x821))+((r01*x820))))+IKsqr(((((-1.0)*r11*x820))+((r10*x821))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x821))+((r01*x820))), ((((-1.0)*r11*x820))+((r10*x821))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x822=IKcos(j0);
IkReal x823=((1.0)*cj4);
IkReal x824=(sj4*sj5);
IkReal x825=((1.0)*cj5*sj4);
IkReal x826=IKsin(j0);
IkReal x827=((1.0)*x826);
IkReal x828=((0.1)*cj5);
IkReal x829=((0.1)*sj5);
IkReal x830=((0.425)*cj1);
IkReal x831=((0.392)*cj1*cj2);
IkReal x832=(sj1*sj2);
IkReal x833=(x822*x832);
IkReal x834=(x826*x832);
IkReal x835=(cj3*sj4);
IkReal x836=(cj5*sj3);
IkReal x837=(sj3*sj5);
IkReal x838=(cj3*cj4*sj5);
IkReal x839=(cj1*cj2);
IkReal x840=((1.0)*x822);
IkReal x841=((1.0)*cj3*cj4*cj5);
IkReal x842=(cj3*cj5);
IkReal x843=(cj3*sj5);
IkReal x844=((1.0)*sj3*sj4);
IkReal x845=(cj4*cj5*sj3);
IkReal x846=(cj1*sj2);
IkReal x847=(cj2*sj1);
IkReal x848=((1.0)*cj4*sj3*sj5);
evalcond[0]=(((r11*x824))+(((-1.0)*r12*x823))+x822+(((-1.0)*r10*x825)));
evalcond[1]=((((-1.0)*x827))+((r01*x824))+(((-1.0)*r00*x825))+(((-1.0)*r02*x823)));
evalcond[2]=((((-1.0)*r00*x829))+(((-1.0)*(1.0)*px))+((x822*x831))+(((-0.134)*x826))+((x822*x830))+(((-1.0)*r01*x828))+(((-0.392)*x833)));
evalcond[3]=(((x826*x831))+(((-1.0)*r11*x828))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x829))+(((-0.392)*x834))+((x826*x830))+(((0.134)*x822)));
evalcond[4]=(x833+(((-1.0)*r00*x841))+(((-1.0)*x839*x840))+((r01*x838))+((r02*x835))+((r01*x836))+((r00*x837)));
evalcond[5]=(((r12*x835))+(((-1.0)*r10*x841))+((r11*x836))+x834+((r10*x837))+(((-1.0)*x827*x839))+((r11*x838)));
evalcond[6]=((((-1.0)*r01*x848))+((r00*x845))+(((-1.0)*r02*x844))+(((-1.0)*x840*x847))+((r01*x842))+((r00*x843))+(((-1.0)*x840*x846)));
evalcond[7]=(((r11*x842))+((r10*x843))+((r10*x845))+(((-1.0)*r11*x848))+(((-1.0)*x827*x847))+(((-1.0)*r12*x844))+(((-1.0)*x827*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(cj3,-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(r22,-1);
if(!x850.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x849.value)*(x850.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x851=((1.0)*r22);
evalcond[0]=((-1.0)*x851*(IKcos(j4)));
evalcond[1]=((((-1.0)*sj3*x851*(IKsin(j4))))+(((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x852=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x852);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x852);
IkReal x853=(r10*sj3);
IkReal x854=(cj3*cj4*r11);
IkReal x855=(cj1*cj2*r01*sj4);
IkReal x856=(r01*sj1*sj2*sj4);
IkReal x857=(r00*sj3);
IkReal x858=(cj3*cj4*r01);
IkReal x859=(cj1*cj2*r11*sj4);
IkReal x860=(r11*sj1*sj2*sj4);
IkReal x861=(cj3*r12*sj4);
IkReal x862=(cj1*cj2*cj4*r02);
IkReal x863=(cj4*r02*sj1*sj2);
IkReal x864=((((-12.0)*x861))+(((12.0)*x863))+(((-12.0)*x862)));
IkReal x865=((4.0)*sj3);
IkReal x866=(r11*x865);
IkReal x867=((4.0)*cj3*cj4);
IkReal x868=(r10*x867);
IkReal x869=((4.0)*cj1*cj2*sj4);
IkReal x870=(r00*x869);
IkReal x871=((4.0)*sj1*sj2*sj4);
IkReal x872=(r00*x871);
IkReal x873=((((-1.0)*x872))+(((-1.0)*x868))+x866+x870);
IkReal x874=(cj3*r02*sj4);
IkReal x875=(cj1*cj2*cj4*r12);
IkReal x876=(cj4*r12*sj1*sj2);
IkReal x877=(r01*x865);
IkReal x878=(r00*x867);
IkReal x879=(r10*x869);
IkReal x880=(r10*x871);
IkReal x881=(x880+x877+(((-1.0)*x879))+(((-1.0)*x878)));
IkReal x882=((((-12.0)*x876))+(((-12.0)*x874))+(((12.0)*x875)));
j5eval[0]=((((0.5)*(IKabs((x882+x881)))))+(((0.5)*(IKabs(((((4.0)*x863))+(((-4.0)*x861))+x873+(((-4.0)*x862)))))))+(((0.5)*(IKabs(((((-1.0)*x877))+(((-1.0)*x880))+x882+x878+x879)))))+(((0.5)*(IKabs(((((-16.0)*x858))+(((-16.0)*x859))+(((16.0)*x860))+(((-16.0)*x857)))))))+(((0.5)*(IKabs(((((-1.0)*x866))+x868+x864+x872+(((-1.0)*x870)))))))+(((0.5)*(IKabs(((((-16.0)*x854))+(((-16.0)*x856))+(((16.0)*x855))+(((-16.0)*x853)))))))+(((0.5)*(IKabs((x864+x873)))))+(IKabs(((((-8.0)*x857))+(((-8.0)*x859))+(((-8.0)*x858))+(((8.0)*x860)))))+(((0.5)*(IKabs(((((4.0)*x875))+(((-4.0)*x874))+x881+(((-4.0)*x876)))))))+(IKabs(((((-8.0)*x854))+(((-8.0)*x853))+(((-8.0)*x856))+(((8.0)*x855))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x883=(cj3*r12*sj4);
IkReal x884=(cj1*cj2*cj4*r02);
IkReal x885=(cj4*r02*sj1*sj2);
IkReal x886=((((4.0)*x885))+(((-4.0)*x884))+(((-4.0)*x883)));
IkReal x887=((4.0)*r11*sj3);
IkReal x888=((((4.0)*r10))*((cj3*cj4)));
IkReal x889=((4.0)*r00);
IkReal x890=(cj1*cj2*sj4*x889);
IkReal x891=(sj1*sj2*sj4*x889);
IkReal x892=((((-1.0)*x888))+x887+(((-1.0)*x891))+x890);
IkReal x893=(r10*sj3);
IkReal x894=(cj3*cj4*r11);
IkReal x895=(cj1*cj2*r01*sj4);
IkReal x896=(r01*sj1*sj2*sj4);
IkReal x897=((((-8.0)*x893))+(((-8.0)*x896))+(((8.0)*x895))+(((-8.0)*x894)));
IkReal x898=((((12.0)*x885))+(((-12.0)*x883))+(((-12.0)*x884)));
IkReal x899=(x888+(((-1.0)*x890))+(((-1.0)*x887))+x891);
op[0]=(x886+x892);
op[1]=x897;
op[2]=(x898+x892);
op[3]=((((16.0)*x895))+(((-16.0)*x894))+(((-16.0)*x896))+(((-16.0)*x893)));
op[4]=(x899+x898);
op[5]=x897;
op[6]=(x886+x899);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x900=((4.0)*r01*sj3);
IkReal x901=((((4.0)*r00))*((cj3*cj4)));
IkReal x902=((4.0)*r10);
IkReal x903=(cj1*cj2*sj4*x902);
IkReal x904=(sj1*sj2*sj4*x902);
IkReal x905=(x903+x901+(((-1.0)*x900))+(((-1.0)*x904)));
IkReal x906=(cj3*r02*sj4);
IkReal x907=((-4.0)*x906);
IkReal x908=(cj1*cj2*cj4*r12);
IkReal x909=((4.0)*x908);
IkReal x910=(cj4*r12*sj1*sj2);
IkReal x911=((-4.0)*x910);
IkReal x912=(r00*sj3);
IkReal x913=(cj3*cj4*r01);
IkReal x914=(cj1*cj2*r11*sj4);
IkReal x915=(r11*sj1*sj2*sj4);
IkReal x916=((((8.0)*x915))+(((-8.0)*x912))+(((-8.0)*x913))+(((-8.0)*x914)));
IkReal x917=((((-12.0)*x910))+(((-12.0)*x906))+(((12.0)*x908)));
IkReal x918=((((-1.0)*x901))+x904+x900+(((-1.0)*x903)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x913))+(((-16.0)*x912))+(((-16.0)*x914))+(((16.0)*x915))))))+x911+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x911+x918+x909+x907))))+x909+x907+x905+(((htj5*htj5*htj5*htj5)*((x917+x918))))+((htj5*x916))+((x916*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x917+x905)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x919=(sj4*sj5);
IkReal x920=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x920))+(((-1.0)*(1.0)*cj4*r02))+((r01*x919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x919))+((r10*x920))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x920))+(((-1.0)*(1.0)*cj4*r02))+((r01*x919))))+IKsqr(((((-1.0)*r11*x919))+((r10*x920))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x920))+(((-1.0)*(1.0)*cj4*r02))+((r01*x919))), ((((-1.0)*r11*x919))+((r10*x920))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x921=IKcos(j0);
IkReal x922=((1.0)*cj4);
IkReal x923=(sj4*sj5);
IkReal x924=((1.0)*cj5*sj4);
IkReal x925=IKsin(j0);
IkReal x926=((1.0)*x925);
IkReal x927=((0.1)*cj5);
IkReal x928=((0.1)*sj5);
IkReal x929=((0.425)*cj1);
IkReal x930=((0.392)*cj1*cj2);
IkReal x931=(sj1*sj2);
IkReal x932=(x921*x931);
IkReal x933=(x925*x931);
IkReal x934=(cj3*sj4);
IkReal x935=(cj5*sj3);
IkReal x936=(sj3*sj5);
IkReal x937=(cj3*cj4*sj5);
IkReal x938=(cj1*cj2);
IkReal x939=((1.0)*x921);
IkReal x940=((1.0)*cj3*cj4*cj5);
IkReal x941=(cj3*cj5);
IkReal x942=(cj3*sj5);
IkReal x943=((1.0)*sj3*sj4);
IkReal x944=(cj4*cj5*sj3);
IkReal x945=(cj1*sj2);
IkReal x946=(cj2*sj1);
IkReal x947=((1.0)*cj4*sj3*sj5);
evalcond[0]=((((-1.0)*r12*x922))+((r11*x923))+(((-1.0)*r10*x924))+x921);
evalcond[1]=((((-1.0)*r02*x922))+(((-1.0)*x926))+((r01*x923))+(((-1.0)*r00*x924)));
evalcond[2]=(((x921*x930))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x927))+((x921*x929))+(((-0.134)*x925))+(((-0.392)*x932))+(((-1.0)*r00*x928)));
evalcond[3]=((((-1.0)*(1.0)*py))+((x925*x929))+(((-0.392)*x933))+((x925*x930))+(((-1.0)*r10*x928))+(((-1.0)*r11*x927))+(((0.134)*x921)));
evalcond[4]=(((r00*x936))+(((-1.0)*x938*x939))+((r01*x937))+((r02*x934))+(((-1.0)*r00*x940))+((r01*x935))+x932);
evalcond[5]=(((r11*x935))+((r11*x937))+((r12*x934))+((r10*x936))+(((-1.0)*x926*x938))+x933+(((-1.0)*r10*x940)));
evalcond[6]=(((r00*x944))+(((-1.0)*x939*x946))+((r00*x942))+(((-1.0)*r02*x943))+((r01*x941))+(((-1.0)*x939*x945))+(((-1.0)*r01*x947)));
evalcond[7]=((((-1.0)*r12*x943))+((r10*x944))+((r11*x941))+(((-1.0)*r11*x947))+(((-1.0)*x926*x945))+(((-1.0)*x926*x946))+((r10*x942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x948=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x948);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x948);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x949=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x949);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x949);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(r22,-1);
if(!x950.valid){
continue;
}
CheckValue<IkReal> x951=IKPowWithIntegerCheck(sj3,-1);
if(!x951.valid){
continue;
}
sj4array[0]=((x950.value)*(x951.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x952=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x952);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x952);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x953=((4.0)*cj1*r01);
IkReal x954=(cj2*cj3*x953);
IkReal x955=(sj2*sj3*x953);
IkReal x956=((4.0)*r01*sj1);
IkReal x957=(cj2*sj3*x956);
IkReal x958=(cj3*sj2*x956);
IkReal x959=((4.0)*r00);
IkReal x960=(cj1*cj2*cj4*sj3*x959);
IkReal x961=(cj1*cj3*cj4*sj2*x959);
IkReal x962=(cj2*cj3*cj4*sj1*x959);
IkReal x963=(cj4*sj1*sj2*sj3*x959);
IkReal x964=(x955+x958+x957+(((-1.0)*x954))+(((-1.0)*x961))+x963+(((-1.0)*x960))+(((-1.0)*x962)));
IkReal x965=(cj1*cj2*cj3*r00);
IkReal x966=(cj1*r00*sj2*sj3);
IkReal x967=(cj2*r00*sj1*sj3);
IkReal x968=(cj3*r00*sj1*sj2);
IkReal x969=(cj1*cj2*cj4*r01*sj3);
IkReal x970=(cj1*cj3*cj4*r01*sj2);
IkReal x971=(cj2*cj3*cj4*r01*sj1);
IkReal x972=(cj4*r01*sj1*sj2*sj3);
IkReal x973=((((-8.0)*x970))+(((-8.0)*x971))+(((-8.0)*x967))+(((-8.0)*x968))+(((-8.0)*x966))+(((-8.0)*x969))+(((8.0)*x972))+(((8.0)*x965)));
IkReal x974=(x954+(((-1.0)*x958))+(((-1.0)*x957))+x960+x961+x962+(((-1.0)*x963))+(((-1.0)*x955)));
op[0]=x964;
op[1]=x973;
op[2]=x964;
op[3]=((((16.0)*x965))+(((-16.0)*x971))+(((-16.0)*x966))+(((-16.0)*x970))+(((-16.0)*x967))+(((-16.0)*x969))+(((16.0)*x972))+(((-16.0)*x968)));
op[4]=x974;
op[5]=x973;
op[6]=x974;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x975=(sj4*sj5);
IkReal x976=(cj5*sj4);
if( IKabs((((r01*x975))+(((-1.0)*r00*x976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x976))+(((-1.0)*r11*x975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x975))+(((-1.0)*r00*x976))))+IKsqr((((r10*x976))+(((-1.0)*r11*x975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x975))+(((-1.0)*r00*x976))), (((r10*x976))+(((-1.0)*r11*x975))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x977=IKcos(j0);
IkReal x978=(sj4*sj5);
IkReal x979=((1.0)*cj5*sj4);
IkReal x980=IKsin(j0);
IkReal x981=((1.0)*x980);
IkReal x982=(cj5*sj3);
IkReal x983=(sj3*sj5);
IkReal x984=(sj1*sj2);
IkReal x985=(x977*x984);
IkReal x986=(cj3*cj4*sj5);
IkReal x987=(cj1*cj2);
IkReal x988=((1.0)*x977);
IkReal x989=((1.0)*cj3*cj4*cj5);
IkReal x990=(x980*x984);
IkReal x991=(cj3*cj5);
IkReal x992=(cj3*sj5);
IkReal x993=(cj4*cj5*sj3);
IkReal x994=(cj1*sj2);
IkReal x995=(cj2*sj1);
IkReal x996=((1.0)*cj4*sj3*sj5);
IkReal x997=((0.1)*cj5);
IkReal x998=((0.1)*sj5);
IkReal x999=((0.425)*cj1);
IkReal x1000=((0.392)*cj1*cj2);
evalcond[0]=(((r11*x978))+x977+(((-1.0)*r10*x979)));
evalcond[1]=((((-1.0)*r00*x979))+((r01*x978))+(((-1.0)*x981)));
evalcond[2]=(((r01*x982))+((r01*x986))+((r00*x983))+x985+(((-1.0)*x987*x988))+(((-1.0)*r00*x989)));
evalcond[3]=(((r11*x986))+(((-1.0)*x981*x987))+((r11*x982))+(((-1.0)*r10*x989))+x990+((r10*x983)));
evalcond[4]=((((-1.0)*x988*x994))+(((-1.0)*x988*x995))+((r00*x993))+((r01*x991))+(((-1.0)*r01*x996))+((r00*x992)));
evalcond[5]=(((r11*x991))+(((-1.0)*r11*x996))+((r10*x993))+((r10*x992))+(((-1.0)*x981*x994))+(((-1.0)*x981*x995)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.134)*x980))+(((-0.392)*x985))+(((-1.0)*r01*x997))+((x977*x999))+(((-1.0)*r00*x998))+((x1000*x977)));
evalcond[7]=(((x980*x999))+(((-1.0)*(1.0)*py))+(((0.134)*x977))+(((-1.0)*r11*x997))+((x1000*x980))+(((-0.392)*x990))+(((-1.0)*r10*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(cj3,-1);
if(!x1001.valid){
continue;
}
CheckValue<IkReal> x1002=IKPowWithIntegerCheck(r22,-1);
if(!x1002.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x1001.value)*(x1002.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1003=((1.0)*r22);
evalcond[0]=((-1.0)*x1003*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x1003*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1004=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1004);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1004);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1005=((4.0)*cj1*r01);
IkReal x1006=(cj2*cj3*x1005);
IkReal x1007=(sj2*sj3*x1005);
IkReal x1008=((4.0)*r01*sj1);
IkReal x1009=(cj2*sj3*x1008);
IkReal x1010=(cj3*sj2*x1008);
IkReal x1011=((4.0)*r00);
IkReal x1012=(cj1*cj2*cj4*sj3*x1011);
IkReal x1013=(cj1*cj3*cj4*sj2*x1011);
IkReal x1014=(cj2*cj3*cj4*sj1*x1011);
IkReal x1015=(cj4*sj1*sj2*sj3*x1011);
IkReal x1016=((((-1.0)*x1006))+(((-1.0)*x1013))+x1015+x1010+(((-1.0)*x1014))+x1007+x1009+(((-1.0)*x1012)));
IkReal x1017=(cj1*cj2*cj3*r00);
IkReal x1018=(cj1*r00*sj2*sj3);
IkReal x1019=(cj2*r00*sj1*sj3);
IkReal x1020=(cj3*r00*sj1*sj2);
IkReal x1021=(cj1*cj2*cj4*r01*sj3);
IkReal x1022=(cj1*cj3*cj4*r01*sj2);
IkReal x1023=(cj2*cj3*cj4*r01*sj1);
IkReal x1024=(cj4*r01*sj1*sj2*sj3);
IkReal x1025=((((-8.0)*x1022))+(((8.0)*x1017))+(((-8.0)*x1019))+(((-8.0)*x1023))+(((-8.0)*x1020))+(((-8.0)*x1018))+(((8.0)*x1024))+(((-8.0)*x1021)));
IkReal x1026=((((-1.0)*x1007))+x1013+x1014+x1012+(((-1.0)*x1010))+x1006+(((-1.0)*x1015))+(((-1.0)*x1009)));
op[0]=x1016;
op[1]=x1025;
op[2]=x1016;
op[3]=((((-16.0)*x1018))+(((16.0)*x1024))+(((-16.0)*x1020))+(((-16.0)*x1023))+(((-16.0)*x1021))+(((16.0)*x1017))+(((-16.0)*x1019))+(((-16.0)*x1022)));
op[4]=x1026;
op[5]=x1025;
op[6]=x1026;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1027=(sj4*sj5);
IkReal x1028=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1028))+((r01*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1027))+((r10*x1028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1028))+((r01*x1027))))+IKsqr(((((-1.0)*r11*x1027))+((r10*x1028))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1028))+((r01*x1027))), ((((-1.0)*r11*x1027))+((r10*x1028))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1029=IKcos(j0);
IkReal x1030=(sj4*sj5);
IkReal x1031=((1.0)*cj5*sj4);
IkReal x1032=IKsin(j0);
IkReal x1033=((1.0)*x1032);
IkReal x1034=(cj5*sj3);
IkReal x1035=(sj3*sj5);
IkReal x1036=(sj1*sj2);
IkReal x1037=(x1029*x1036);
IkReal x1038=(cj3*cj4*sj5);
IkReal x1039=(cj1*cj2);
IkReal x1040=((1.0)*x1029);
IkReal x1041=((1.0)*cj3*cj4*cj5);
IkReal x1042=(x1032*x1036);
IkReal x1043=(cj3*cj5);
IkReal x1044=(cj3*sj5);
IkReal x1045=(cj4*cj5*sj3);
IkReal x1046=(cj1*sj2);
IkReal x1047=(cj2*sj1);
IkReal x1048=((1.0)*cj4*sj3*sj5);
IkReal x1049=((0.1)*cj5);
IkReal x1050=((0.1)*sj5);
IkReal x1051=((0.425)*cj1);
IkReal x1052=((0.392)*cj1*cj2);
evalcond[0]=(x1029+((r11*x1030))+(((-1.0)*r10*x1031)));
evalcond[1]=((((-1.0)*x1033))+(((-1.0)*r00*x1031))+((r01*x1030)));
evalcond[2]=((((-1.0)*x1039*x1040))+((r01*x1038))+x1037+((r00*x1035))+(((-1.0)*r00*x1041))+((r01*x1034)));
evalcond[3]=((((-1.0)*r10*x1041))+(((-1.0)*x1033*x1039))+x1042+((r10*x1035))+((r11*x1034))+((r11*x1038)));
evalcond[4]=(((r01*x1043))+(((-1.0)*x1040*x1046))+(((-1.0)*x1040*x1047))+((r00*x1044))+(((-1.0)*r01*x1048))+((r00*x1045)));
evalcond[5]=(((r10*x1045))+(((-1.0)*r11*x1048))+((r11*x1043))+(((-1.0)*x1033*x1046))+((r10*x1044))+(((-1.0)*x1033*x1047)));
evalcond[6]=((((-1.0)*(1.0)*px))+((x1029*x1052))+((x1029*x1051))+(((-1.0)*r00*x1050))+(((-1.0)*r01*x1049))+(((-0.134)*x1032))+(((-0.392)*x1037)));
evalcond[7]=(((x1032*x1052))+(((-1.0)*(1.0)*py))+((x1032*x1051))+(((-1.0)*r10*x1050))+(((0.134)*x1029))+(((-1.0)*r11*x1049))+(((-0.392)*x1042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal(((-1.0)*(((0.1)*r21)))),IkReal(((-1.0)*(((0.1)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
IkReal x1053=((-1.0)*(x1055.value));
if((((((0.01)*(r21*r21)))+(((0.01)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1056=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r21*r21)))+(((0.01)*(r20*r20)))))),-1);
if(!x1056.valid){
continue;
}
if( (((-1.0)*(x1056.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1056.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1054=IKasin(((-1.0)*(x1056.value)*(((((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.392)*cj1*sj2))+(((-1.0)*(0.392)*cj2*sj1))))));
j5array[0]=(x1053+x1054);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1054))+x1053);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1057=(sj3*(r21*r21));
IkReal x1058=cj5*cj5;
IkReal x1059=((((-1.0)*(2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1058*(r20*r20)))+x1057+((sj3*(r22*r22)))+(((-1.0)*x1057*x1058)));
j4eval[0]=x1059;
j4eval[1]=IKsign(x1059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1060=(cj3*(r21*r21));
IkReal x1061=cj5*cj5;
IkReal x1062=((((-1.0)*(2.0)*cj3*cj5*r20*r21*sj5))+x1060+(((-1.0)*x1060*x1061))+((cj3*(r22*r22)))+((cj3*x1061*(r20*r20))));
j4eval[0]=x1062;
j4eval[1]=IKsign(x1062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1063=cj1*cj1;
IkReal x1064=cj2*cj2;
IkReal x1065=(cj1*sj1*sj2);
IkReal x1066=(cj2*x1063);
IkReal x1067=(cj1*cj2*sj1*sj2);
IkReal x1068=(x1063*x1064);
j0eval[0]=((6.36549089425466)+(((-5.69949185861059)*x1064))+x1063+(((-11.3989837172212)*x1067))+(((12.3585920403546)*x1066))+(((-12.3585920403546)*x1065))+(((11.3989837172212)*x1068)));
j0eval[1]=IKsign(((42905.0)+(((-76832.0)*x1067))+(((6740.25)*x1063))+(((83300.0)*x1066))+(((76832.0)*x1068))+(((-38416.0)*x1064))+(((-83300.0)*x1065))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1069=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
IkReal x1070=((1.0)*cj5);
IkReal x1071=((1.0)*sj5);
j0eval[0]=x1069;
j0eval[1]=IKsign(x1069);
j0eval[2]=((IKabs(((((-1.0)*r01*x1070))+(((-1.0)*r00*x1071)))))+(IKabs(((((-1.0)*r10*x1071))+(((-1.0)*r11*x1070))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1072=r21*r21;
IkReal x1073=(r21*sj5);
IkReal x1074=cj5*cj5;
IkReal x1075=((((-1.0)*x1072*x1074))+x1072+((x1074*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x1073)));
IkReal x1076=(sj1*sj2);
IkReal x1077=((1.0)*cj1*cj2);
IkReal x1078=(cj5*r20);
j4eval[0]=x1075;
j4eval[1]=IKsign(x1075);
j4eval[2]=((IKabs((((cj1*cj2*x1078))+((x1073*x1076))+(((-1.0)*sj1*sj2*x1078))+(((-1.0)*x1073*x1077)))))+(IKabs((((r22*x1076))+(((-1.0)*r22*x1077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1079=(cj1*cj2);
IkReal x1080=(sj1*sj2);
IkReal x1081=((500.0)*px);
IkReal x1082=((212.5)*cj1);
IkReal x1083=(cj5*r01);
IkReal x1084=(r00*sj5);
IkReal x1085=((146.0)*cj1*cj2);
IkReal x1086=((146.0)*sj1*sj2);
CheckValue<IkReal> x1087=IKPowWithIntegerCheck(((((-67.0)*x1079))+(((67.0)*x1080))),-1);
if(!x1087.valid){
continue;
}
CheckValue<IkReal> x1088=IKPowWithIntegerCheck((x1080+(((-1.0)*x1079))),-1);
if(!x1088.valid){
continue;
}
if( IKabs(((x1087.value)*(((((-1.0)*x1083*x1085))+((x1079*x1081))+((x1084*x1086))+((x1083*x1086))+(((-1.0)*x1082*x1083))+(((-1.0)*x1084*x1085))+(((-1.0)*x1080*x1081))+(((-1.0)*x1082*x1084)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1088.value)*(((((-1.0)*x1083))+(((-1.0)*x1084)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1087.value)*(((((-1.0)*x1083*x1085))+((x1079*x1081))+((x1084*x1086))+((x1083*x1086))+(((-1.0)*x1082*x1083))+(((-1.0)*x1084*x1085))+(((-1.0)*x1080*x1081))+(((-1.0)*x1082*x1084))))))+IKsqr(((x1088.value)*(((((-1.0)*x1083))+(((-1.0)*x1084))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1087.value)*(((((-1.0)*x1083*x1085))+((x1079*x1081))+((x1084*x1086))+((x1083*x1086))+(((-1.0)*x1082*x1083))+(((-1.0)*x1084*x1085))+(((-1.0)*x1080*x1081))+(((-1.0)*x1082*x1084))))), ((x1088.value)*(((((-1.0)*x1083))+(((-1.0)*x1084))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1089=(cj5*r01);
IkReal x1090=(r00*sj5);
IkReal x1091=IKcos(j0);
IkReal x1092=(sj1*sj2);
IkReal x1093=(x1091*x1092);
IkReal x1094=(cj1*cj2*x1091);
IkReal x1095=(cj5*r11);
IkReal x1096=(r10*sj5);
IkReal x1097=IKsin(j0);
IkReal x1098=(x1092*x1097);
IkReal x1099=(cj1*cj2*x1097);
IkReal x1100=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1094))+x1089+x1093+x1090);
evalcond[1]=((((-1.0)*x1099))+x1098+x1096+x1095);
evalcond[2]=((((-1.0)*(1.0)*px))+((x1091*x1100))+(((-0.392)*x1093))+(((-0.134)*x1097))+(((-0.1)*x1089))+(((-0.1)*x1090))+(((0.392)*x1094)));
evalcond[3]=(((x1097*x1100))+(((-1.0)*(1.0)*py))+(((0.392)*x1099))+(((-0.1)*x1095))+(((0.134)*x1091))+(((-0.392)*x1098))+(((-0.1)*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1101=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1101;
j4eval[1]=IKsign(x1101);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1102=((1.0)*cj5);
IkReal x1103=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1102)));
j4eval[0]=x1103;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1102))))));
j4eval[2]=IKsign(x1103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1104=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1105=((1.0)*cj0);
IkReal x1106=((1.0)*sj0);
j4eval[0]=x1104;
j4eval[1]=((IKabs(((((-1.0)*r02*x1105))+(((-1.0)*r12*x1106)))))+(IKabs(((((-1.0)*r11*sj5*x1106))+(((-1.0)*r01*sj5*x1105))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1107=((1.0)*cj0);
IkReal x1108=((1.0)*sj0);
CheckValue<IkReal> x1109=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1108))+(((-1.0)*r02*x1107)))),IkReal(((((-1.0)*r11*sj5*x1108))+(((-1.0)*r01*sj5*x1107))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1109.value)))+(x1110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1111=IKcos(j4);
IkReal x1112=((1.0)*r22);
IkReal x1113=IKsin(j4);
IkReal x1114=(sj5*x1113);
IkReal x1115=((1.0)*cj5*x1113);
IkReal x1116=((1.0)*r12);
IkReal x1117=((1.0)*sj0);
IkReal x1118=((1.0)*r02);
IkReal x1119=(cj5*x1111);
IkReal x1120=((1.0)*sj5*x1111);
IkReal x1121=IKsin((j1+j2));
evalcond[0]=(((r21*x1114))+(((-1.0)*r20*x1115))+(((-1.0)*x1111*x1112)));
evalcond[1]=(((r11*x1114))+cj0+(((-1.0)*r10*x1115))+(((-1.0)*x1111*x1116)));
evalcond[2]=((((-1.0)*x1117))+((r01*x1114))+(((-1.0)*x1111*x1118))+(((-1.0)*r00*x1115)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1119))+(((-1.0)*x1112*x1113))+(((-1.0)*r21*x1120))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r01*x1120))+(((-1.0)*x1113*x1118))+(((-1.0)*cj0*x1121))+((r00*x1119)));
evalcond[5]=((((-1.0)*r11*x1120))+((r10*x1119))+(((-1.0)*x1117*x1121))+(((-1.0)*x1113*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1122=((1.0)*cj5);
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1122)))),-1);
if(!x1124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1125=IKcos(j4);
IkReal x1126=((1.0)*r22);
IkReal x1127=IKsin(j4);
IkReal x1128=(sj5*x1127);
IkReal x1129=((1.0)*cj5*x1127);
IkReal x1130=((1.0)*r12);
IkReal x1131=((1.0)*sj0);
IkReal x1132=((1.0)*r02);
IkReal x1133=(cj5*x1125);
IkReal x1134=((1.0)*sj5*x1125);
IkReal x1135=IKsin((j1+j2));
evalcond[0]=(((r21*x1128))+(((-1.0)*x1125*x1126))+(((-1.0)*r20*x1129)));
evalcond[1]=((((-1.0)*x1125*x1130))+(((-1.0)*r10*x1129))+cj0+((r11*x1128)));
evalcond[2]=((((-1.0)*x1131))+(((-1.0)*r00*x1129))+((r01*x1128))+(((-1.0)*x1125*x1132)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1134))+(((-1.0)*x1126*x1127))+((r20*x1133))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1127*x1132))+(((-1.0)*r01*x1134))+(((-1.0)*cj0*x1135))+((r00*x1133)));
evalcond[5]=(((r10*x1133))+(((-1.0)*r11*x1134))+(((-1.0)*x1131*x1135))+(((-1.0)*x1127*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1136=((1.0)*sj0);
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1137.valid){
continue;
}
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1136)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1137.value)))+(x1138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1139=IKcos(j4);
IkReal x1140=((1.0)*r22);
IkReal x1141=IKsin(j4);
IkReal x1142=(sj5*x1141);
IkReal x1143=((1.0)*cj5*x1141);
IkReal x1144=((1.0)*r12);
IkReal x1145=((1.0)*sj0);
IkReal x1146=((1.0)*r02);
IkReal x1147=(cj5*x1139);
IkReal x1148=((1.0)*sj5*x1139);
IkReal x1149=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1139*x1140))+(((-1.0)*r20*x1143))+((r21*x1142)));
evalcond[1]=((((-1.0)*r10*x1143))+((r11*x1142))+cj0+(((-1.0)*x1139*x1144)));
evalcond[2]=((((-1.0)*x1139*x1146))+((r01*x1142))+(((-1.0)*r00*x1143))+(((-1.0)*x1145)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1140*x1141))+(((-1.0)*r21*x1148))+((sj1*sj2))+((r20*x1147)));
evalcond[4]=((((-1.0)*r01*x1148))+(((-1.0)*cj0*x1149))+(((-1.0)*x1141*x1146))+((r00*x1147)));
evalcond[5]=((((-1.0)*r11*x1148))+(((-1.0)*x1141*x1144))+(((-1.0)*x1145*x1149))+((r10*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1150=r21*r21;
IkReal x1151=(r21*sj5);
IkReal x1152=cj5*cj5;
IkReal x1153=(sj1*sj2);
IkReal x1154=((1.0)*cj1*cj2);
IkReal x1155=(cj5*r20);
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x1151))+x1150+(((-1.0)*x1150*x1152))+(r22*r22)+((x1152*(r20*r20))))),-1);
if(!x1156.valid){
continue;
}
CheckValue<IkReal> x1157 = IKatan2WithCheck(IkReal((((r22*x1153))+(((-1.0)*r22*x1154)))),IkReal(((((-1.0)*x1151*x1154))+((cj1*cj2*x1155))+(((-1.0)*sj1*sj2*x1155))+((x1151*x1153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1156.value)))+(x1157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1158=IKcos(j4);
IkReal x1159=((1.0)*r22);
IkReal x1160=IKsin(j4);
IkReal x1161=(r21*sj5);
IkReal x1162=(cj5*r20);
evalcond[0]=(((x1160*x1161))+(((-1.0)*x1158*x1159))+(((-1.0)*x1160*x1162)));
evalcond[1]=(((x1158*x1162))+(((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1159*x1160))+((sj1*sj2))+(((-1.0)*x1158*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1163=(sj4*sj5);
IkReal x1164=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1163))+((r10*x1164))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1164))))+IKsqr(((((-1.0)*r11*x1163))+((r10*x1164))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+((r01*x1163))+(((-1.0)*r00*x1164))), ((((-1.0)*r11*x1163))+((r10*x1164))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1165=IKcos(j0);
IkReal x1166=((1.0)*cj4);
IkReal x1167=(sj4*sj5);
IkReal x1168=((1.0)*cj5*sj4);
IkReal x1169=IKsin(j0);
IkReal x1170=((1.0)*x1169);
IkReal x1171=(cj5*r01);
IkReal x1172=(r00*sj5);
IkReal x1173=(sj1*sj2);
IkReal x1174=(x1165*x1173);
IkReal x1175=(cj1*cj2);
IkReal x1176=((1.0)*x1165);
IkReal x1177=(cj5*r11);
IkReal x1178=(r10*sj5);
IkReal x1179=(x1169*x1173);
IkReal x1180=((1.0)*sj4);
IkReal x1181=(cj4*cj5);
IkReal x1182=((1.0)*cj4*sj5);
IkReal x1183=IKsin((j1+j2));
IkReal x1184=((0.425)*cj1);
IkReal x1185=((0.392)*cj1*cj2);
evalcond[0]=(((r11*x1167))+(((-1.0)*r12*x1166))+(((-1.0)*r10*x1168))+x1165);
evalcond[1]=((((-1.0)*r02*x1166))+(((-1.0)*r00*x1168))+((r01*x1167))+(((-1.0)*x1170)));
evalcond[2]=((((-1.0)*x1175*x1176))+x1172+x1174+x1171);
evalcond[3]=((((-1.0)*x1170*x1175))+x1179+x1178+x1177);
evalcond[4]=((((-1.0)*x1176*x1183))+(((-1.0)*r01*x1182))+(((-1.0)*r02*x1180))+((r00*x1181)));
evalcond[5]=((((-1.0)*x1170*x1183))+(((-1.0)*r12*x1180))+(((-1.0)*r11*x1182))+((r10*x1181)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.1)*x1171))+(((-0.1)*x1172))+((x1165*x1184))+((x1165*x1185))+(((-0.134)*x1169))+(((-0.392)*x1174)));
evalcond[7]=((((-0.392)*x1179))+((x1169*x1184))+(((-1.0)*(1.0)*py))+((x1169*x1185))+(((-0.1)*x1177))+(((0.134)*x1165))+(((-0.1)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1186=((1.0)*cj5);
IkReal x1187=((1.0)*sj5);
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1188.valid){
continue;
}
CheckValue<IkReal> x1189 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1187))+(((-1.0)*r11*x1186)))),IkReal(((((-1.0)*r01*x1186))+(((-1.0)*r00*x1187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1189.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1188.value)))+(x1189.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1190=(cj5*r01);
IkReal x1191=(r00*sj5);
IkReal x1192=IKcos(j0);
IkReal x1193=(sj1*sj2);
IkReal x1194=(x1192*x1193);
IkReal x1195=(cj1*cj2*x1192);
IkReal x1196=(cj5*r11);
IkReal x1197=(r10*sj5);
IkReal x1198=IKsin(j0);
IkReal x1199=(x1193*x1198);
IkReal x1200=(cj1*cj2*x1198);
IkReal x1201=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1195))+x1194+x1191+x1190);
evalcond[1]=((((-1.0)*x1200))+x1197+x1196+x1199);
evalcond[2]=(((x1192*x1201))+(((-1.0)*(1.0)*px))+(((-0.392)*x1194))+(((-0.134)*x1198))+(((-0.1)*x1191))+(((-0.1)*x1190))+(((0.392)*x1195)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.392)*x1199))+(((-0.1)*x1196))+(((0.392)*x1200))+(((0.134)*x1192))+(((-0.1)*x1197))+((x1198*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1202=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1202;
j4eval[1]=IKsign(x1202);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1203=((1.0)*cj5);
IkReal x1204=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1203)));
j4eval[0]=x1204;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1203)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1205=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1206=((1.0)*cj0);
IkReal x1207=((1.0)*sj0);
j4eval[0]=x1205;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1207))+(((-1.0)*r01*sj5*x1206)))))+(IKabs(((((-1.0)*r02*x1206))+(((-1.0)*r12*x1207))))));
j4eval[2]=IKsign(x1205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1208=((1.0)*cj0);
IkReal x1209=((1.0)*sj0);
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1210.valid){
continue;
}
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1209))+(((-1.0)*r02*x1208)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1208))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1210.value)))+(x1211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1212=IKcos(j4);
IkReal x1213=((1.0)*r22);
IkReal x1214=IKsin(j4);
IkReal x1215=(sj5*x1214);
IkReal x1216=((1.0)*cj5*x1214);
IkReal x1217=((1.0)*r12);
IkReal x1218=((1.0)*sj0);
IkReal x1219=((1.0)*r02);
IkReal x1220=(cj5*x1212);
IkReal x1221=((1.0)*sj5*x1212);
IkReal x1222=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1216))+(((-1.0)*x1212*x1213))+((r21*x1215)));
evalcond[1]=((((-1.0)*r10*x1216))+(((-1.0)*x1212*x1217))+cj0+((r11*x1215)));
evalcond[2]=((((-1.0)*x1212*x1219))+(((-1.0)*r00*x1216))+(((-1.0)*x1218))+((r01*x1215)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1221))+(((-1.0)*x1213*x1214))+((sj1*sj2))+((r20*x1220)));
evalcond[4]=((((-1.0)*r01*x1221))+(((-1.0)*cj0*x1222))+(((-1.0)*x1214*x1219))+((r00*x1220)));
evalcond[5]=((((-1.0)*x1218*x1222))+(((-1.0)*x1214*x1217))+((r10*x1220))+(((-1.0)*r11*x1221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1223=((1.0)*cj5);
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1223)))),-1);
if(!x1224.valid){
continue;
}
CheckValue<IkReal> x1225 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1223))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1224.value)))+(x1225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j4);
IkReal x1227=((1.0)*r22);
IkReal x1228=IKsin(j4);
IkReal x1229=(sj5*x1228);
IkReal x1230=((1.0)*cj5*x1228);
IkReal x1231=((1.0)*r12);
IkReal x1232=((1.0)*sj0);
IkReal x1233=((1.0)*r02);
IkReal x1234=(cj5*x1226);
IkReal x1235=((1.0)*sj5*x1226);
IkReal x1236=IKsin((j1+j2));
evalcond[0]=(((r21*x1229))+(((-1.0)*r20*x1230))+(((-1.0)*x1226*x1227)));
evalcond[1]=(cj0+((r11*x1229))+(((-1.0)*r10*x1230))+(((-1.0)*x1226*x1231)));
evalcond[2]=(((r01*x1229))+(((-1.0)*x1232))+(((-1.0)*x1226*x1233))+(((-1.0)*r00*x1230)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1235))+((sj1*sj2))+(((-1.0)*x1227*x1228))+((r20*x1234)));
evalcond[4]=((((-1.0)*x1228*x1233))+(((-1.0)*r01*x1235))+(((-1.0)*cj0*x1236))+((r00*x1234)));
evalcond[5]=((((-1.0)*r11*x1235))+(((-1.0)*x1232*x1236))+((r10*x1234))+(((-1.0)*x1228*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1237=((1.0)*sj0);
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1238.valid){
continue;
}
CheckValue<IkReal> x1239 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1237)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1238.value)))+(x1239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1240=IKcos(j4);
IkReal x1241=((1.0)*r22);
IkReal x1242=IKsin(j4);
IkReal x1243=(sj5*x1242);
IkReal x1244=((1.0)*cj5*x1242);
IkReal x1245=((1.0)*r12);
IkReal x1246=((1.0)*sj0);
IkReal x1247=((1.0)*r02);
IkReal x1248=(cj5*x1240);
IkReal x1249=((1.0)*sj5*x1240);
IkReal x1250=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1240*x1241))+((r21*x1243))+(((-1.0)*r20*x1244)));
evalcond[1]=((((-1.0)*x1240*x1245))+cj0+((r11*x1243))+(((-1.0)*r10*x1244)));
evalcond[2]=((((-1.0)*r00*x1244))+(((-1.0)*x1240*x1247))+((r01*x1243))+(((-1.0)*x1246)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1241*x1242))+((r20*x1248))+((sj1*sj2))+(((-1.0)*r21*x1249)));
evalcond[4]=((((-1.0)*cj0*x1250))+((r00*x1248))+(((-1.0)*x1242*x1247))+(((-1.0)*r01*x1249)));
evalcond[5]=((((-1.0)*x1246*x1250))+((r10*x1248))+(((-1.0)*x1242*x1245))+(((-1.0)*r11*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1251=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1251;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1251);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1252=r21*r21;
IkReal x1253=(cj5*r20);
IkReal x1254=cj5*cj5;
IkReal x1255=(((x1254*(r20*r20)))+x1252+(((-2.0)*r21*sj5*x1253))+(r22*r22)+(((-1.0)*x1252*x1254)));
IkReal x1256=(cj1*cj2);
IkReal x1257=((1.0)*sj1*sj2);
IkReal x1258=(r21*sj5);
j4eval[0]=x1255;
j4eval[1]=IKsign(x1255);
j4eval[2]=((IKabs(((((-1.0)*r22*x1257))+((r22*x1256)))))+(IKabs((((sj1*sj2*x1253))+((x1256*x1258))+(((-1.0)*x1257*x1258))+(((-1.0)*cj1*cj2*x1253))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1259=(cj1*cj2);
IkReal x1260=(sj1*sj2);
IkReal x1261=((500.0)*px);
IkReal x1262=((212.5)*cj1);
IkReal x1263=(cj5*r01);
IkReal x1264=(r00*sj5);
IkReal x1265=((246.0)*cj1*cj2);
IkReal x1266=((246.0)*sj1*sj2);
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(((((67.0)*x1260))+(((-67.0)*x1259))),-1);
if(!x1267.valid){
continue;
}
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(((((-1.0)*x1259))+x1260),-1);
if(!x1268.valid){
continue;
}
if( IKabs(((x1267.value)*(((((-1.0)*x1263*x1266))+((x1259*x1261))+((x1263*x1265))+((x1262*x1263))+(((-1.0)*x1260*x1261))+((x1264*x1265))+((x1262*x1264))+(((-1.0)*x1264*x1266)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1268.value)*((x1264+x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1267.value)*(((((-1.0)*x1263*x1266))+((x1259*x1261))+((x1263*x1265))+((x1262*x1263))+(((-1.0)*x1260*x1261))+((x1264*x1265))+((x1262*x1264))+(((-1.0)*x1264*x1266))))))+IKsqr(((x1268.value)*((x1264+x1263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1267.value)*(((((-1.0)*x1263*x1266))+((x1259*x1261))+((x1263*x1265))+((x1262*x1263))+(((-1.0)*x1260*x1261))+((x1264*x1265))+((x1262*x1264))+(((-1.0)*x1264*x1266))))), ((x1268.value)*((x1264+x1263))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1269=(cj5*r01);
IkReal x1270=(r00*sj5);
IkReal x1271=IKcos(j0);
IkReal x1272=(sj1*sj2);
IkReal x1273=(x1271*x1272);
IkReal x1274=(cj1*cj2*x1271);
IkReal x1275=(cj5*r11);
IkReal x1276=(r10*sj5);
IkReal x1277=IKsin(j0);
IkReal x1278=(x1272*x1277);
IkReal x1279=(cj1*cj2*x1277);
IkReal x1280=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1270))+x1273+(((-1.0)*x1274))+(((-1.0)*x1269)));
evalcond[1]=((((-1.0)*x1276))+x1278+(((-1.0)*x1279))+(((-1.0)*x1275)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1)*x1269))+((x1271*x1280))+(((-0.392)*x1273))+(((0.392)*x1274))+(((-0.1)*x1270))+(((-0.134)*x1277)));
evalcond[3]=((((0.392)*x1279))+(((-0.1)*x1275))+(((-1.0)*(1.0)*py))+(((-0.1)*x1276))+(((-0.392)*x1278))+(((0.134)*x1271))+((x1277*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1281=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1281;
j4eval[1]=IKsign(x1281);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1282=((1.0)*cj5);
IkReal x1283=((((-1.0)*r01*x1282))+(((-1.0)*(1.0)*r00*sj5)));
j4eval[0]=x1283;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1282))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1284=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1285=((1.0)*cj0);
IkReal x1286=((1.0)*sj0);
j4eval[0]=x1284;
j4eval[1]=((IKabs(((((-1.0)*r02*x1285))+(((-1.0)*r12*x1286)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1285))+(((-1.0)*r11*sj5*x1286))))));
j4eval[2]=IKsign(x1284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1287=((1.0)*cj0);
IkReal x1288=((1.0)*sj0);
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1287))+(((-1.0)*r12*x1288)))),IkReal(((((-1.0)*r11*sj5*x1288))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1289.value)))+(x1290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1291=IKcos(j4);
IkReal x1292=((1.0)*x1291);
IkReal x1293=IKsin(j4);
IkReal x1294=(r21*sj5);
IkReal x1295=(cj5*r20);
IkReal x1296=((1.0)*x1293);
IkReal x1297=(r11*sj5);
IkReal x1298=(cj5*r10);
IkReal x1299=((1.0)*sj0);
IkReal x1300=(r01*sj5);
IkReal x1301=(cj5*r00);
IkReal x1302=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1292))+((x1293*x1294))+(((-1.0)*x1295*x1296)));
evalcond[1]=(((x1293*x1297))+(((-1.0)*x1296*x1298))+cj0+(((-1.0)*r12*x1292)));
evalcond[2]=((((-1.0)*x1299))+(((-1.0)*r02*x1292))+(((-1.0)*x1296*x1301))+((x1293*x1300)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1292*x1295))+((x1291*x1294))+((sj1*sj2))+((r22*x1293)));
evalcond[4]=((((-1.0)*x1292*x1301))+((r02*x1293))+((x1291*x1300))+(((-1.0)*cj0*x1302)));
evalcond[5]=(((x1291*x1297))+((r12*x1293))+(((-1.0)*x1292*x1298))+(((-1.0)*x1299*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1303=((1.0)*cj5);
CheckValue<IkReal> x1304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1304.valid){
continue;
}
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1303))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1304.value)+(((1.5707963267949)*(x1305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1306=IKcos(j4);
IkReal x1307=((1.0)*x1306);
IkReal x1308=IKsin(j4);
IkReal x1309=(r21*sj5);
IkReal x1310=(cj5*r20);
IkReal x1311=((1.0)*x1308);
IkReal x1312=(r11*sj5);
IkReal x1313=(cj5*r10);
IkReal x1314=((1.0)*sj0);
IkReal x1315=(r01*sj5);
IkReal x1316=(cj5*r00);
IkReal x1317=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1307))+(((-1.0)*x1310*x1311))+((x1308*x1309)));
evalcond[1]=((((-1.0)*x1311*x1313))+(((-1.0)*r12*x1307))+cj0+((x1308*x1312)));
evalcond[2]=((((-1.0)*r02*x1307))+(((-1.0)*x1311*x1316))+((x1308*x1315))+(((-1.0)*x1314)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1307*x1310))+((x1306*x1309))+((sj1*sj2))+((r22*x1308)));
evalcond[4]=((((-1.0)*cj0*x1317))+((r02*x1308))+((x1306*x1315))+(((-1.0)*x1307*x1316)));
evalcond[5]=((((-1.0)*x1307*x1313))+(((-1.0)*x1314*x1317))+((x1306*x1312))+((r12*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1318=((1.0)*sj0);
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1319.valid){
continue;
}
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1318)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1319.value)))+(x1320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1321=IKcos(j4);
IkReal x1322=((1.0)*x1321);
IkReal x1323=IKsin(j4);
IkReal x1324=(r21*sj5);
IkReal x1325=(cj5*r20);
IkReal x1326=((1.0)*x1323);
IkReal x1327=(r11*sj5);
IkReal x1328=(cj5*r10);
IkReal x1329=((1.0)*sj0);
IkReal x1330=(r01*sj5);
IkReal x1331=(cj5*r00);
IkReal x1332=IKsin((j1+j2));
evalcond[0]=(((x1323*x1324))+(((-1.0)*r22*x1322))+(((-1.0)*x1325*x1326)));
evalcond[1]=((((-1.0)*r12*x1322))+cj0+((x1323*x1327))+(((-1.0)*x1326*x1328)));
evalcond[2]=(((x1323*x1330))+(((-1.0)*r02*x1322))+(((-1.0)*x1326*x1331))+(((-1.0)*x1329)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1322*x1325))+((r22*x1323))+((sj1*sj2))+((x1321*x1324)));
evalcond[4]=((((-1.0)*x1322*x1331))+((x1321*x1330))+((r02*x1323))+(((-1.0)*cj0*x1332)));
evalcond[5]=(((x1321*x1327))+(((-1.0)*x1322*x1328))+((r12*x1323))+(((-1.0)*x1329*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1333=r21*r21;
IkReal x1334=(cj5*r20);
IkReal x1335=cj5*cj5;
IkReal x1336=(cj1*cj2);
IkReal x1337=((1.0)*sj1*sj2);
IkReal x1338=(r21*sj5);
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(IKsign((x1333+((x1335*(r20*r20)))+(((-2.0)*r21*sj5*x1334))+(((-1.0)*x1333*x1335))+(r22*r22))),-1);
if(!x1339.valid){
continue;
}
CheckValue<IkReal> x1340 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1337))+((r22*x1336)))),IkReal((((sj1*sj2*x1334))+(((-1.0)*cj1*cj2*x1334))+((x1336*x1338))+(((-1.0)*x1337*x1338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1339.value)))+(x1340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1341=IKcos(j4);
IkReal x1342=((1.0)*x1341);
IkReal x1343=IKsin(j4);
IkReal x1344=(r21*sj5);
IkReal x1345=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1342))+((x1343*x1344))+(((-1.0)*x1343*x1345)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+((x1341*x1344))+(((-1.0)*x1342*x1345))+((sj1*sj2))+((r22*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1346=(sj4*sj5);
IkReal x1347=(cj5*sj4);
if( IKabs((((r01*x1346))+(((-1.0)*r00*x1347))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1347))+(((-1.0)*r11*x1346))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1346))+(((-1.0)*r00*x1347))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr((((r10*x1347))+(((-1.0)*r11*x1346))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1346))+(((-1.0)*r00*x1347))+(((-1.0)*(1.0)*cj4*r02))), (((r10*x1347))+(((-1.0)*r11*x1346))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1348=IKcos(j0);
IkReal x1349=((1.0)*cj4);
IkReal x1350=(sj4*sj5);
IkReal x1351=((1.0)*cj5*sj4);
IkReal x1352=IKsin(j0);
IkReal x1353=((1.0)*x1352);
IkReal x1354=(cj5*r01);
IkReal x1355=(r00*sj5);
IkReal x1356=(sj1*sj2);
IkReal x1357=(x1348*x1356);
IkReal x1358=(cj1*cj2);
IkReal x1359=((1.0)*x1348);
IkReal x1360=(cj5*r11);
IkReal x1361=(r10*sj5);
IkReal x1362=(x1352*x1356);
IkReal x1363=(cj4*sj5);
IkReal x1364=((1.0)*cj4*cj5);
IkReal x1365=IKsin((j1+j2));
IkReal x1366=((0.425)*cj1);
IkReal x1367=((0.392)*cj1*cj2);
evalcond[0]=(((r11*x1350))+x1348+(((-1.0)*r12*x1349))+(((-1.0)*r10*x1351)));
evalcond[1]=(((r01*x1350))+(((-1.0)*r00*x1351))+(((-1.0)*r02*x1349))+(((-1.0)*x1353)));
evalcond[2]=((((-1.0)*x1354))+(((-1.0)*x1358*x1359))+x1357+(((-1.0)*x1355)));
evalcond[3]=((((-1.0)*x1360))+(((-1.0)*x1361))+x1362+(((-1.0)*x1353*x1358)));
evalcond[4]=((((-1.0)*x1359*x1365))+(((-1.0)*r00*x1364))+((r01*x1363))+((r02*sj4)));
evalcond[5]=(((r12*sj4))+(((-1.0)*r10*x1364))+(((-1.0)*x1353*x1365))+((r11*x1363)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.392)*x1357))+(((-0.1)*x1355))+(((-0.134)*x1352))+((x1348*x1367))+((x1348*x1366))+(((-0.1)*x1354)));
evalcond[7]=((((-0.392)*x1362))+(((-1.0)*(1.0)*py))+(((0.134)*x1348))+((x1352*x1367))+(((-0.1)*x1361))+(((-0.1)*x1360))+((x1352*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1368.value)))+(x1369.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1370=(cj5*r01);
IkReal x1371=(r00*sj5);
IkReal x1372=IKcos(j0);
IkReal x1373=(sj1*sj2);
IkReal x1374=(x1372*x1373);
IkReal x1375=(cj1*cj2*x1372);
IkReal x1376=(cj5*r11);
IkReal x1377=(r10*sj5);
IkReal x1378=IKsin(j0);
IkReal x1379=(x1373*x1378);
IkReal x1380=(cj1*cj2*x1378);
IkReal x1381=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1371))+(((-1.0)*x1375))+x1374+(((-1.0)*x1370)));
evalcond[1]=((((-1.0)*x1377))+x1379+(((-1.0)*x1380))+(((-1.0)*x1376)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((0.392)*x1375))+((x1372*x1381))+(((-0.1)*x1370))+(((-0.134)*x1378))+(((-0.1)*x1371))+(((-0.392)*x1374)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.134)*x1372))+(((-0.1)*x1376))+(((-0.1)*x1377))+(((-0.392)*x1379))+(((0.392)*x1380))+((x1378*x1381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1382=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1382;
j4eval[1]=IKsign(x1382);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1383=((1.0)*cj5);
IkReal x1384=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1383)));
j4eval[0]=x1384;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1383))))));
j4eval[2]=IKsign(x1384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1385=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1386=((1.0)*cj0);
IkReal x1387=((1.0)*sj0);
j4eval[0]=x1385;
j4eval[1]=((IKabs(((((-1.0)*r02*x1386))+(((-1.0)*r12*x1387)))))+(IKabs(((((-1.0)*r01*sj5*x1386))+(((-1.0)*r11*sj5*x1387))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1388=((1.0)*cj0);
IkReal x1389=((1.0)*sj0);
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1389))+(((-1.0)*r02*x1388)))),IkReal(((((-1.0)*r01*sj5*x1388))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1390.value)+(((1.5707963267949)*(x1391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKcos(j4);
IkReal x1393=((1.0)*x1392);
IkReal x1394=IKsin(j4);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r20);
IkReal x1397=((1.0)*x1394);
IkReal x1398=(r11*sj5);
IkReal x1399=(cj5*r10);
IkReal x1400=((1.0)*sj0);
IkReal x1401=(r01*sj5);
IkReal x1402=(cj5*r00);
IkReal x1403=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1396*x1397))+(((-1.0)*r22*x1393))+((x1394*x1395)));
evalcond[1]=(((x1394*x1398))+(((-1.0)*x1397*x1399))+cj0+(((-1.0)*r12*x1393)));
evalcond[2]=((((-1.0)*x1397*x1402))+(((-1.0)*r02*x1393))+(((-1.0)*x1400))+((x1394*x1401)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1392*x1395))+(((-1.0)*x1393*x1396))+((r22*x1394))+((sj1*sj2)));
evalcond[4]=(((x1392*x1401))+(((-1.0)*cj0*x1403))+((r02*x1394))+(((-1.0)*x1393*x1402)));
evalcond[5]=((((-1.0)*x1393*x1399))+((r12*x1394))+(((-1.0)*x1400*x1403))+((x1392*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1404=((1.0)*cj5);
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1404)))),-1);
if(!x1406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1405.value)+(((1.5707963267949)*(x1406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1407=IKcos(j4);
IkReal x1408=((1.0)*x1407);
IkReal x1409=IKsin(j4);
IkReal x1410=(r21*sj5);
IkReal x1411=(cj5*r20);
IkReal x1412=((1.0)*x1409);
IkReal x1413=(r11*sj5);
IkReal x1414=(cj5*r10);
IkReal x1415=((1.0)*sj0);
IkReal x1416=(r01*sj5);
IkReal x1417=(cj5*r00);
IkReal x1418=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1411*x1412))+((x1409*x1410))+(((-1.0)*r22*x1408)));
evalcond[1]=(((x1409*x1413))+(((-1.0)*r12*x1408))+cj0+(((-1.0)*x1412*x1414)));
evalcond[2]=((((-1.0)*x1415))+(((-1.0)*r02*x1408))+((x1409*x1416))+(((-1.0)*x1412*x1417)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r22*x1409))+(((-1.0)*x1408*x1411))+((x1407*x1410))+((sj1*sj2)));
evalcond[4]=(((x1407*x1416))+(((-1.0)*cj0*x1418))+(((-1.0)*x1408*x1417))+((r02*x1409)));
evalcond[5]=(((x1407*x1413))+((r12*x1409))+(((-1.0)*x1408*x1414))+(((-1.0)*x1415*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1419=((1.0)*sj0);
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1419)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1420.value)))+(x1421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1422=IKcos(j4);
IkReal x1423=((1.0)*x1422);
IkReal x1424=IKsin(j4);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=((1.0)*x1424);
IkReal x1428=(r11*sj5);
IkReal x1429=(cj5*r10);
IkReal x1430=((1.0)*sj0);
IkReal x1431=(r01*sj5);
IkReal x1432=(cj5*r00);
IkReal x1433=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1426*x1427))+(((-1.0)*r22*x1423))+((x1424*x1425)));
evalcond[1]=(cj0+(((-1.0)*x1427*x1429))+((x1424*x1428))+(((-1.0)*r12*x1423)));
evalcond[2]=((((-1.0)*x1427*x1432))+(((-1.0)*r02*x1423))+(((-1.0)*x1430))+((x1424*x1431)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1422*x1425))+((r22*x1424))+((sj1*sj2))+(((-1.0)*x1423*x1426)));
evalcond[4]=(((r02*x1424))+(((-1.0)*x1423*x1432))+(((-1.0)*cj0*x1433))+((x1422*x1431)));
evalcond[5]=((((-1.0)*x1423*x1429))+(((-1.0)*x1430*x1433))+((x1422*x1428))+((r12*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1434=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x1435=((1.0)*cj5);
IkReal x1436=((1.0)*sj5);
j0eval[0]=x1434;
j0eval[1]=((IKabs(((((-1.0)*r01*x1435))+(((-1.0)*r00*x1436)))))+(IKabs(((((-1.0)*r11*x1435))+(((-1.0)*r10*x1436))))));
j0eval[2]=IKsign(x1434);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1437=r21*r21;
IkReal x1438=(cj5*r20);
IkReal x1439=cj5*cj5;
IkReal x1440=((((-1.0)*x1437*x1439))+((x1439*(r20*r20)))+(((-2.0)*r21*sj5*x1438))+x1437+(r22*r22));
IkReal x1441=(cj1*sj2);
IkReal x1442=(cj2*sj1);
IkReal x1443=((1.0)*r21*sj5);
j4eval[0]=x1440;
j4eval[1]=IKsign(x1440);
j4eval[2]=((IKabs((((x1438*x1442))+((x1438*x1441))+(((-1.0)*x1442*x1443))+(((-1.0)*x1441*x1443)))))+(IKabs((((r22*x1442))+((r22*x1441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1444=(cj1*sj2);
IkReal x1445=(cj2*sj1);
IkReal x1446=((212.5)*cj1);
IkReal x1447=(cj5*r01);
IkReal x1448=((500.0)*px);
IkReal x1449=(r00*sj5);
IkReal x1450=((50.0)*cj1*sj2);
IkReal x1451=((50.0)*cj2*sj1);
IkReal x1452=((196.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1453=IKPowWithIntegerCheck(((((-67.0)*x1445))+(((-67.0)*x1444))),-1);
if(!x1453.valid){
continue;
}
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(((((-1.0)*x1445))+(((-1.0)*x1444))),-1);
if(!x1454.valid){
continue;
}
if( IKabs(((x1453.value)*(((((-1.0)*x1447*x1452))+((x1447*x1450))+((x1445*x1448))+((x1444*x1448))+((x1447*x1451))+(((-1.0)*x1449*x1452))+((x1449*x1451))+(((-1.0)*x1446*x1449))+(((-1.0)*x1446*x1447))+((x1449*x1450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1454.value)*(((((-1.0)*x1447))+(((-1.0)*x1449)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1453.value)*(((((-1.0)*x1447*x1452))+((x1447*x1450))+((x1445*x1448))+((x1444*x1448))+((x1447*x1451))+(((-1.0)*x1449*x1452))+((x1449*x1451))+(((-1.0)*x1446*x1449))+(((-1.0)*x1446*x1447))+((x1449*x1450))))))+IKsqr(((x1454.value)*(((((-1.0)*x1447))+(((-1.0)*x1449))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1453.value)*(((((-1.0)*x1447*x1452))+((x1447*x1450))+((x1445*x1448))+((x1444*x1448))+((x1447*x1451))+(((-1.0)*x1449*x1452))+((x1449*x1451))+(((-1.0)*x1446*x1449))+(((-1.0)*x1446*x1447))+((x1449*x1450))))), ((x1454.value)*(((((-1.0)*x1447))+(((-1.0)*x1449))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1455=(cj5*r01);
IkReal x1456=(r00*sj5);
IkReal x1457=IKcos(j0);
IkReal x1458=((1.0)*cj1*sj2);
IkReal x1459=((1.0)*cj2*sj1);
IkReal x1460=(cj5*r11);
IkReal x1461=(r10*sj5);
IkReal x1462=IKsin(j0);
IkReal x1463=((0.425)*cj1);
IkReal x1464=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1457*x1458))+(((-1.0)*x1457*x1459))+x1456+x1455);
evalcond[1]=((((-1.0)*x1458*x1462))+x1461+x1460+(((-1.0)*x1459*x1462)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.1)*x1455))+(((-0.1)*x1456))+(((-0.134)*x1462))+((x1457*x1463))+((x1457*x1464)));
evalcond[3]=(((x1462*x1463))+(((-1.0)*(1.0)*py))+(((-0.1)*x1461))+(((-0.1)*x1460))+((x1462*x1464))+(((0.134)*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1465=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1465;
j4eval[1]=IKsign(x1465);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1466=((1.0)*cj5);
IkReal x1467=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1466)));
j4eval[0]=x1467;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1466))))));
j4eval[2]=IKsign(x1467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1468=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1469=((1.0)*cj0);
IkReal x1470=((1.0)*sj0);
j4eval[0]=x1468;
j4eval[1]=((IKabs(((((-1.0)*r12*x1470))+(((-1.0)*r02*x1469)))))+(IKabs(((((-1.0)*r01*sj5*x1469))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1470))))));
j4eval[2]=IKsign(x1468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=((1.0)*cj0);
IkReal x1472=((1.0)*sj0);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1473.valid){
continue;
}
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1472))+(((-1.0)*r02*x1471)))),IkReal(((((-1.0)*r11*sj5*x1472))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1473.value)))+(x1474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1475=IKcos(j4);
IkReal x1476=((1.0)*x1475);
IkReal x1477=IKsin(j4);
IkReal x1478=(r21*sj5);
IkReal x1479=(cj5*r20);
IkReal x1480=((1.0)*x1477);
IkReal x1481=(r11*sj5);
IkReal x1482=(cj5*r10);
IkReal x1483=((1.0)*sj0);
IkReal x1484=(r01*sj5);
IkReal x1485=(cj5*r00);
IkReal x1486=IKcos((j1+j2));
evalcond[0]=(((x1477*x1478))+(((-1.0)*x1479*x1480))+(((-1.0)*r22*x1476)));
evalcond[1]=((((-1.0)*r12*x1476))+cj0+((x1477*x1481))+(((-1.0)*x1480*x1482)));
evalcond[2]=((((-1.0)*r02*x1476))+((x1477*x1484))+(((-1.0)*x1483))+(((-1.0)*x1480*x1485)));
evalcond[3]=(((x1475*x1478))+((r22*x1477))+((cj1*sj2))+(((-1.0)*x1476*x1479))+((cj2*sj1)));
evalcond[4]=(((x1475*x1484))+((r02*x1477))+(((-1.0)*cj0*x1486))+(((-1.0)*x1476*x1485)));
evalcond[5]=((((-1.0)*x1483*x1486))+((r12*x1477))+((x1475*x1481))+(((-1.0)*x1476*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1487=((1.0)*cj5);
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1487)))),-1);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1488.value)))+(x1489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKcos(j4);
IkReal x1491=((1.0)*x1490);
IkReal x1492=IKsin(j4);
IkReal x1493=(r21*sj5);
IkReal x1494=(cj5*r20);
IkReal x1495=((1.0)*x1492);
IkReal x1496=(r11*sj5);
IkReal x1497=(cj5*r10);
IkReal x1498=((1.0)*sj0);
IkReal x1499=(r01*sj5);
IkReal x1500=(cj5*r00);
IkReal x1501=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1491))+(((-1.0)*x1494*x1495))+((x1492*x1493)));
evalcond[1]=(((x1492*x1496))+cj0+(((-1.0)*x1495*x1497))+(((-1.0)*r12*x1491)));
evalcond[2]=(((x1492*x1499))+(((-1.0)*x1498))+(((-1.0)*x1495*x1500))+(((-1.0)*r02*x1491)));
evalcond[3]=(((x1490*x1493))+((cj1*sj2))+((r22*x1492))+((cj2*sj1))+(((-1.0)*x1491*x1494)));
evalcond[4]=((((-1.0)*x1491*x1500))+(((-1.0)*cj0*x1501))+((x1490*x1499))+((r02*x1492)));
evalcond[5]=(((x1490*x1496))+((r12*x1492))+(((-1.0)*x1491*x1497))+(((-1.0)*x1498*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1502=((1.0)*sj0);
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1502)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1503.value)+(((1.5707963267949)*(x1504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*x1505);
IkReal x1507=IKsin(j4);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r20);
IkReal x1510=((1.0)*x1507);
IkReal x1511=(r11*sj5);
IkReal x1512=(cj5*r10);
IkReal x1513=((1.0)*sj0);
IkReal x1514=(r01*sj5);
IkReal x1515=(cj5*r00);
IkReal x1516=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1506))+(((-1.0)*x1509*x1510))+((x1507*x1508)));
evalcond[1]=((((-1.0)*x1510*x1512))+((x1507*x1511))+cj0+(((-1.0)*r12*x1506)));
evalcond[2]=((((-1.0)*x1510*x1515))+(((-1.0)*x1513))+(((-1.0)*r02*x1506))+((x1507*x1514)));
evalcond[3]=(((r22*x1507))+((cj1*sj2))+(((-1.0)*x1506*x1509))+((x1505*x1508))+((cj2*sj1)));
evalcond[4]=((((-1.0)*cj0*x1516))+((x1505*x1514))+(((-1.0)*x1506*x1515))+((r02*x1507)));
evalcond[5]=((((-1.0)*x1513*x1516))+(((-1.0)*x1506*x1512))+((x1505*x1511))+((r12*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1517=r21*r21;
IkReal x1518=(cj5*r20);
IkReal x1519=cj5*cj5;
IkReal x1520=((1.0)*r22);
IkReal x1521=(cj1*sj2);
IkReal x1522=(cj2*sj1);
IkReal x1523=((1.0)*r21*sj5);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal(((((-1.0)*x1520*x1522))+(((-1.0)*x1520*x1521)))),IkReal(((((-1.0)*x1521*x1523))+(((-1.0)*x1522*x1523))+((x1518*x1522))+((x1518*x1521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj5*x1518))+x1517+(((-1.0)*x1517*x1519))+((x1519*(r20*r20)))+(r22*r22))),-1);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1524.value)+(((1.5707963267949)*(x1525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1526=IKcos(j4);
IkReal x1527=((1.0)*x1526);
IkReal x1528=IKsin(j4);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj5*r20);
evalcond[0]=(((x1528*x1529))+(((-1.0)*r22*x1527))+(((-1.0)*x1528*x1530)));
evalcond[1]=(((x1526*x1529))+(((-1.0)*x1527*x1530))+((cj1*sj2))+((r22*x1528))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1531=(sj4*sj5);
IkReal x1532=(cj5*sj4);
if( IKabs(((((-1.0)*r00*x1532))+((r01*x1531))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1531))+((r10*x1532))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1532))+((r01*x1531))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr(((((-1.0)*r11*x1531))+((r10*x1532))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1532))+((r01*x1531))+(((-1.0)*(1.0)*cj4*r02))), ((((-1.0)*r11*x1531))+((r10*x1532))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1533=IKcos(j0);
IkReal x1534=((1.0)*cj4);
IkReal x1535=(sj4*sj5);
IkReal x1536=((1.0)*cj5*sj4);
IkReal x1537=IKsin(j0);
IkReal x1538=((1.0)*x1537);
IkReal x1539=(cj5*r01);
IkReal x1540=(r00*sj5);
IkReal x1541=(cj1*sj2);
IkReal x1542=((1.0)*x1533);
IkReal x1543=(cj2*sj1);
IkReal x1544=(cj5*r11);
IkReal x1545=(r10*sj5);
IkReal x1546=(cj4*sj5);
IkReal x1547=((1.0)*cj4*cj5);
IkReal x1548=IKcos((j1+j2));
IkReal x1549=((0.425)*cj1);
IkReal x1550=((0.392)*x1548);
evalcond[0]=(((r11*x1535))+x1533+(((-1.0)*r12*x1534))+(((-1.0)*r10*x1536)));
evalcond[1]=(((r01*x1535))+(((-1.0)*r00*x1536))+(((-1.0)*x1538))+(((-1.0)*r02*x1534)));
evalcond[2]=((((-1.0)*x1541*x1542))+(((-1.0)*x1542*x1543))+x1540+x1539);
evalcond[3]=((((-1.0)*x1538*x1541))+x1545+x1544+(((-1.0)*x1538*x1543)));
evalcond[4]=(((r02*sj4))+(((-1.0)*x1542*x1548))+((r01*x1546))+(((-1.0)*r00*x1547)));
evalcond[5]=(((r12*sj4))+((r11*x1546))+(((-1.0)*r10*x1547))+(((-1.0)*x1538*x1548)));
evalcond[6]=((((-0.134)*x1537))+(((-1.0)*(1.0)*px))+((x1533*x1550))+(((-0.1)*x1539))+(((-0.1)*x1540))+((x1533*x1549)));
evalcond[7]=((((-1.0)*(1.0)*py))+((x1537*x1550))+((x1537*x1549))+(((0.134)*x1533))+(((-0.1)*x1545))+(((-0.1)*x1544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1551=((1.0)*cj5);
IkReal x1552=((1.0)*sj5);
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1551))+(((-1.0)*r10*x1552)))),IkReal(((((-1.0)*r00*x1552))+(((-1.0)*r01*x1551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1553.value)))+(x1554.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1555=(cj5*r01);
IkReal x1556=(r00*sj5);
IkReal x1557=IKcos(j0);
IkReal x1558=((1.0)*cj1*sj2);
IkReal x1559=((1.0)*cj2*sj1);
IkReal x1560=(cj5*r11);
IkReal x1561=(r10*sj5);
IkReal x1562=IKsin(j0);
IkReal x1563=((0.425)*cj1);
IkReal x1564=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1557*x1559))+x1555+x1556+(((-1.0)*x1557*x1558)));
evalcond[1]=(x1561+x1560+(((-1.0)*x1558*x1562))+(((-1.0)*x1559*x1562)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x1557*x1564))+(((-0.134)*x1562))+(((-0.1)*x1556))+((x1557*x1563))+(((-0.1)*x1555)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1)*x1561))+((x1562*x1564))+(((0.134)*x1557))+((x1562*x1563))+(((-0.1)*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1565=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1565;
j4eval[1]=IKsign(x1565);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1566=((1.0)*cj5);
IkReal x1567=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1566)));
j4eval[0]=x1567;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1566))))));
j4eval[2]=IKsign(x1567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1568=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1569=((1.0)*cj0);
IkReal x1570=((1.0)*sj0);
j4eval[0]=x1568;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1569))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1570)))))+(IKabs(((((-1.0)*r02*x1569))+(((-1.0)*r12*x1570))))));
j4eval[2]=IKsign(x1568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1571=((1.0)*cj0);
IkReal x1572=((1.0)*sj0);
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1573.valid){
continue;
}
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1571))+(((-1.0)*r12*x1572)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1571))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1573.value)))+(x1574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1575=IKcos(j4);
IkReal x1576=((1.0)*x1575);
IkReal x1577=IKsin(j4);
IkReal x1578=(r21*sj5);
IkReal x1579=(cj5*r20);
IkReal x1580=((1.0)*x1577);
IkReal x1581=(r11*sj5);
IkReal x1582=(cj5*r10);
IkReal x1583=((1.0)*sj0);
IkReal x1584=(r01*sj5);
IkReal x1585=(cj5*r00);
IkReal x1586=IKcos((j1+j2));
evalcond[0]=(((x1577*x1578))+(((-1.0)*x1579*x1580))+(((-1.0)*r22*x1576)));
evalcond[1]=((((-1.0)*r12*x1576))+cj0+(((-1.0)*x1580*x1582))+((x1577*x1581)));
evalcond[2]=(((x1577*x1584))+(((-1.0)*r02*x1576))+(((-1.0)*x1583))+(((-1.0)*x1580*x1585)));
evalcond[3]=(((x1575*x1578))+((cj1*sj2))+(((-1.0)*x1576*x1579))+((cj2*sj1))+((r22*x1577)));
evalcond[4]=(((r02*x1577))+(((-1.0)*x1576*x1585))+((x1575*x1584))+(((-1.0)*cj0*x1586)));
evalcond[5]=(((r12*x1577))+((x1575*x1581))+(((-1.0)*x1576*x1582))+(((-1.0)*x1583*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1587=((1.0)*cj5);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1587))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1590=IKcos(j4);
IkReal x1591=((1.0)*x1590);
IkReal x1592=IKsin(j4);
IkReal x1593=(r21*sj5);
IkReal x1594=(cj5*r20);
IkReal x1595=((1.0)*x1592);
IkReal x1596=(r11*sj5);
IkReal x1597=(cj5*r10);
IkReal x1598=((1.0)*sj0);
IkReal x1599=(r01*sj5);
IkReal x1600=(cj5*r00);
IkReal x1601=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1594*x1595))+((x1592*x1593))+(((-1.0)*r22*x1591)));
evalcond[1]=(((x1592*x1596))+(((-1.0)*r12*x1591))+(((-1.0)*x1595*x1597))+cj0);
evalcond[2]=((((-1.0)*x1598))+(((-1.0)*x1595*x1600))+(((-1.0)*r02*x1591))+((x1592*x1599)));
evalcond[3]=((((-1.0)*x1591*x1594))+((cj1*sj2))+((x1590*x1593))+((cj2*sj1))+((r22*x1592)));
evalcond[4]=((((-1.0)*cj0*x1601))+((r02*x1592))+(((-1.0)*x1591*x1600))+((x1590*x1599)));
evalcond[5]=((((-1.0)*x1591*x1597))+((x1590*x1596))+((r12*x1592))+(((-1.0)*x1598*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=((1.0)*sj0);
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1602)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1603.value)+(((1.5707963267949)*(x1604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1605=IKcos(j4);
IkReal x1606=((1.0)*x1605);
IkReal x1607=IKsin(j4);
IkReal x1608=(r21*sj5);
IkReal x1609=(cj5*r20);
IkReal x1610=((1.0)*x1607);
IkReal x1611=(r11*sj5);
IkReal x1612=(cj5*r10);
IkReal x1613=((1.0)*sj0);
IkReal x1614=(r01*sj5);
IkReal x1615=(cj5*r00);
IkReal x1616=IKcos((j1+j2));
evalcond[0]=(((x1607*x1608))+(((-1.0)*x1609*x1610))+(((-1.0)*r22*x1606)));
evalcond[1]=((((-1.0)*x1610*x1612))+((x1607*x1611))+(((-1.0)*r12*x1606))+cj0);
evalcond[2]=(((x1607*x1614))+(((-1.0)*x1613))+(((-1.0)*x1610*x1615))+(((-1.0)*r02*x1606)));
evalcond[3]=((((-1.0)*x1606*x1609))+((cj1*sj2))+((r22*x1607))+((x1605*x1608))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1606*x1615))+(((-1.0)*cj0*x1616))+((r02*x1607))+((x1605*x1614)));
evalcond[5]=(((x1605*x1611))+(((-1.0)*x1606*x1612))+(((-1.0)*x1613*x1616))+((r12*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1617=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
j0eval[0]=x1617;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1617);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1618=r21*r21;
IkReal x1619=(r21*sj5);
IkReal x1620=cj5*cj5;
IkReal x1621=((((-1.0)*x1618*x1620))+(r22*r22)+(((-2.0)*cj5*r20*x1619))+x1618+((x1620*(r20*r20))));
IkReal x1622=(cj1*sj2);
IkReal x1623=(cj2*sj1);
IkReal x1624=((1.0)*cj5*r20);
j4eval[0]=x1621;
j4eval[1]=IKsign(x1621);
j4eval[2]=((IKabs((((r22*x1622))+((r22*x1623)))))+(IKabs(((((-1.0)*x1623*x1624))+(((-1.0)*x1622*x1624))+((x1619*x1623))+((x1619*x1622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1625=(cj1*sj2);
IkReal x1626=(cj2*sj1);
IkReal x1627=((212.5)*cj1);
IkReal x1628=(cj5*r01);
IkReal x1629=((500.0)*px);
IkReal x1630=(r00*sj5);
IkReal x1631=((50.0)*cj1*sj2);
IkReal x1632=((50.0)*cj2*sj1);
IkReal x1633=((196.0)*(IKcos((j1+j2))));
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(((((-67.0)*x1625))+(((-67.0)*x1626))),-1);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(((((-1.0)*x1625))+(((-1.0)*x1626))),-1);
if(!x1635.valid){
continue;
}
if( IKabs(((x1634.value)*((((x1627*x1630))+((x1628*x1632))+((x1630*x1632))+((x1630*x1631))+((x1628*x1633))+((x1630*x1633))+((x1628*x1631))+((x1627*x1628))+((x1626*x1629))+((x1625*x1629)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1635.value)*((x1628+x1630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1634.value)*((((x1627*x1630))+((x1628*x1632))+((x1630*x1632))+((x1630*x1631))+((x1628*x1633))+((x1630*x1633))+((x1628*x1631))+((x1627*x1628))+((x1626*x1629))+((x1625*x1629))))))+IKsqr(((x1635.value)*((x1628+x1630))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1634.value)*((((x1627*x1630))+((x1628*x1632))+((x1630*x1632))+((x1630*x1631))+((x1628*x1633))+((x1630*x1633))+((x1628*x1631))+((x1627*x1628))+((x1626*x1629))+((x1625*x1629))))), ((x1635.value)*((x1628+x1630))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1636=(cj5*r01);
IkReal x1637=(r00*sj5);
IkReal x1638=IKcos(j0);
IkReal x1639=((1.0)*cj1*sj2);
IkReal x1640=((1.0)*cj2*sj1);
IkReal x1641=(cj5*r11);
IkReal x1642=(r10*sj5);
IkReal x1643=IKsin(j0);
IkReal x1644=((0.425)*cj1);
IkReal x1645=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1636))+(((-1.0)*x1637))+(((-1.0)*x1638*x1639))+(((-1.0)*x1638*x1640)));
evalcond[1]=((((-1.0)*x1639*x1643))+(((-1.0)*x1640*x1643))+(((-1.0)*x1641))+(((-1.0)*x1642)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.134)*x1643))+(((-0.1)*x1636))+(((-0.1)*x1637))+((x1638*x1644))+((x1638*x1645)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.1)*x1641))+((x1643*x1644))+((x1643*x1645))+(((0.134)*x1638))+(((-0.1)*x1642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1646=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1646;
j4eval[1]=IKsign(x1646);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1647=((1.0)*cj5);
IkReal x1648=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1647)));
j4eval[0]=x1648;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1647))))));
j4eval[2]=IKsign(x1648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1649=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1650=((1.0)*cj0);
IkReal x1651=((1.0)*sj0);
j4eval[0]=x1649;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x1650))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1651)))))+(IKabs(((((-1.0)*r12*x1651))+(((-1.0)*r02*x1650))))));
j4eval[2]=IKsign(x1649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1652=((1.0)*cj0);
IkReal x1653=((1.0)*sj0);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1652))+(((-1.0)*r12*x1653)))),IkReal(((((-1.0)*r01*sj5*x1652))+(((-1.0)*r11*sj5*x1653))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1654.value)))+(x1655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1656=IKcos(j4);
IkReal x1657=((1.0)*r22);
IkReal x1658=IKsin(j4);
IkReal x1659=(sj5*x1658);
IkReal x1660=((1.0)*cj5*x1658);
IkReal x1661=((1.0)*r12);
IkReal x1662=((1.0)*sj0);
IkReal x1663=((1.0)*r02);
IkReal x1664=(cj5*x1656);
IkReal x1665=((1.0)*sj5*x1656);
IkReal x1666=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1656*x1657))+((r21*x1659))+(((-1.0)*r20*x1660)));
evalcond[1]=((((-1.0)*x1656*x1661))+cj0+(((-1.0)*r10*x1660))+((r11*x1659)));
evalcond[2]=(((r01*x1659))+(((-1.0)*r00*x1660))+(((-1.0)*x1662))+(((-1.0)*x1656*x1663)));
evalcond[3]=(((r20*x1664))+(((-1.0)*x1657*x1658))+((cj1*sj2))+(((-1.0)*r21*x1665))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1658*x1663))+((r00*x1664))+(((-1.0)*cj0*x1666))+(((-1.0)*r01*x1665)));
evalcond[5]=((((-1.0)*x1658*x1661))+((r10*x1664))+(((-1.0)*r11*x1665))+(((-1.0)*x1662*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1667=((1.0)*cj5);
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1667))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1667))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1668.value)))+(x1669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1670=IKcos(j4);
IkReal x1671=((1.0)*r22);
IkReal x1672=IKsin(j4);
IkReal x1673=(sj5*x1672);
IkReal x1674=((1.0)*cj5*x1672);
IkReal x1675=((1.0)*r12);
IkReal x1676=((1.0)*sj0);
IkReal x1677=((1.0)*r02);
IkReal x1678=(cj5*x1670);
IkReal x1679=((1.0)*sj5*x1670);
IkReal x1680=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1670*x1671))+((r21*x1673))+(((-1.0)*r20*x1674)));
evalcond[1]=((((-1.0)*r10*x1674))+cj0+(((-1.0)*x1670*x1675))+((r11*x1673)));
evalcond[2]=((((-1.0)*r00*x1674))+((r01*x1673))+(((-1.0)*x1676))+(((-1.0)*x1670*x1677)));
evalcond[3]=(((r20*x1678))+(((-1.0)*r21*x1679))+((cj1*sj2))+(((-1.0)*x1671*x1672))+((cj2*sj1)));
evalcond[4]=(((r00*x1678))+(((-1.0)*r01*x1679))+(((-1.0)*x1672*x1677))+(((-1.0)*cj0*x1680)));
evalcond[5]=((((-1.0)*x1676*x1680))+((r10*x1678))+(((-1.0)*r11*x1679))+(((-1.0)*x1672*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1681=((1.0)*sj0);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1681)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1682.value)+(((1.5707963267949)*(x1683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1684=IKcos(j4);
IkReal x1685=((1.0)*r22);
IkReal x1686=IKsin(j4);
IkReal x1687=(sj5*x1686);
IkReal x1688=((1.0)*cj5*x1686);
IkReal x1689=((1.0)*r12);
IkReal x1690=((1.0)*sj0);
IkReal x1691=((1.0)*r02);
IkReal x1692=(cj5*x1684);
IkReal x1693=((1.0)*sj5*x1684);
IkReal x1694=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1684*x1685))+((r21*x1687))+(((-1.0)*r20*x1688)));
evalcond[1]=((((-1.0)*x1684*x1689))+((r11*x1687))+(((-1.0)*r10*x1688))+cj0);
evalcond[2]=((((-1.0)*x1684*x1691))+((r01*x1687))+(((-1.0)*x1690))+(((-1.0)*r00*x1688)));
evalcond[3]=((((-1.0)*r21*x1693))+((cj1*sj2))+((r20*x1692))+(((-1.0)*x1685*x1686))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1686*x1691))+(((-1.0)*cj0*x1694))+((r00*x1692))+(((-1.0)*r01*x1693)));
evalcond[5]=((((-1.0)*r11*x1693))+(((-1.0)*x1686*x1689))+((r10*x1692))+(((-1.0)*x1690*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1695=(cj1*sj2);
IkReal x1696=(cj2*sj1);
IkReal x1697=(r21*sj5);
IkReal x1698=((1.0)*cj5*r20);
IkReal x1699=r21*r21;
IkReal x1700=cj5*cj5;
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(IKsign((x1699+((x1700*(r20*r20)))+(((-1.0)*x1699*x1700))+(((-2.0)*cj5*r20*x1697))+(r22*r22))),-1);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal((((r22*x1696))+((r22*x1695)))),IkReal((((x1696*x1697))+(((-1.0)*x1695*x1698))+(((-1.0)*x1696*x1698))+((x1695*x1697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1701.value)))+(x1702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1703=IKcos(j4);
IkReal x1704=((1.0)*r22);
IkReal x1705=IKsin(j4);
IkReal x1706=(r21*sj5);
IkReal x1707=(cj5*r20);
evalcond[0]=((((-1.0)*x1705*x1707))+(((-1.0)*x1703*x1704))+((x1705*x1706)));
evalcond[1]=((((-1.0)*x1704*x1705))+((x1703*x1707))+((cj1*sj2))+(((-1.0)*x1703*x1706))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1708=(sj4*sj5);
IkReal x1709=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+((r01*x1708))+(((-1.0)*r00*x1709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1708))+((cj4*r12))+((r10*x1709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+((r01*x1708))+(((-1.0)*r00*x1709))))+IKsqr(((((-1.0)*r11*x1708))+((cj4*r12))+((r10*x1709))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+((r01*x1708))+(((-1.0)*r00*x1709))), ((((-1.0)*r11*x1708))+((cj4*r12))+((r10*x1709))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1710=IKcos(j0);
IkReal x1711=((1.0)*cj4);
IkReal x1712=(sj4*sj5);
IkReal x1713=((1.0)*cj5*sj4);
IkReal x1714=IKsin(j0);
IkReal x1715=((1.0)*x1714);
IkReal x1716=(cj5*r01);
IkReal x1717=(r00*sj5);
IkReal x1718=(cj1*sj2);
IkReal x1719=((1.0)*x1710);
IkReal x1720=(cj2*sj1);
IkReal x1721=(cj5*r11);
IkReal x1722=(r10*sj5);
IkReal x1723=((1.0)*sj4);
IkReal x1724=(cj4*cj5);
IkReal x1725=((1.0)*cj4*sj5);
IkReal x1726=IKcos((j1+j2));
IkReal x1727=((0.425)*cj1);
IkReal x1728=((0.392)*x1726);
evalcond[0]=((((-1.0)*r12*x1711))+(((-1.0)*r10*x1713))+((r11*x1712))+x1710);
evalcond[1]=(((r01*x1712))+(((-1.0)*r00*x1713))+(((-1.0)*x1715))+(((-1.0)*r02*x1711)));
evalcond[2]=((((-1.0)*x1718*x1719))+(((-1.0)*x1716))+(((-1.0)*x1717))+(((-1.0)*x1719*x1720)));
evalcond[3]=((((-1.0)*x1715*x1720))+(((-1.0)*x1722))+(((-1.0)*x1721))+(((-1.0)*x1715*x1718)));
evalcond[4]=(((r00*x1724))+(((-1.0)*x1719*x1726))+(((-1.0)*r02*x1723))+(((-1.0)*r01*x1725)));
evalcond[5]=((((-1.0)*r12*x1723))+(((-1.0)*r11*x1725))+((r10*x1724))+(((-1.0)*x1715*x1726)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.1)*x1716))+((x1710*x1728))+(((-0.134)*x1714))+((x1710*x1727))+(((-0.1)*x1717)));
evalcond[7]=((((-0.1)*x1721))+((x1714*x1727))+(((-1.0)*(1.0)*py))+((x1714*x1728))+(((-0.1)*x1722))+(((0.134)*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)))),-1);
if(!x1729.valid){
continue;
}
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1729.value)))+(x1730.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1731=(cj5*r01);
IkReal x1732=(r00*sj5);
IkReal x1733=IKcos(j0);
IkReal x1734=((1.0)*cj1*sj2);
IkReal x1735=((1.0)*cj2*sj1);
IkReal x1736=(cj5*r11);
IkReal x1737=(r10*sj5);
IkReal x1738=IKsin(j0);
IkReal x1739=((0.425)*cj1);
IkReal x1740=((0.392)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1733*x1735))+(((-1.0)*x1731))+(((-1.0)*x1732))+(((-1.0)*x1733*x1734)));
evalcond[1]=((((-1.0)*x1736))+(((-1.0)*x1737))+(((-1.0)*x1735*x1738))+(((-1.0)*x1734*x1738)));
evalcond[2]=((((-0.1)*x1731))+(((-1.0)*(1.0)*px))+((x1733*x1739))+(((-0.1)*x1732))+(((-0.134)*x1738))+((x1733*x1740)));
evalcond[3]=((((-0.1)*x1737))+(((-1.0)*(1.0)*py))+((x1738*x1740))+(((-0.1)*x1736))+((x1738*x1739))+(((0.134)*x1733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1741=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1741;
j4eval[1]=IKsign(x1741);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1742=((1.0)*cj5);
IkReal x1743=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1742)));
j4eval[0]=x1743;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1742))))));
j4eval[2]=IKsign(x1743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1744=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1745=((1.0)*cj0);
IkReal x1746=((1.0)*sj0);
j4eval[0]=x1744;
j4eval[1]=((IKabs(((((-1.0)*r12*x1746))+(((-1.0)*r02*x1745)))))+(IKabs(((((-1.0)*r11*sj5*x1746))+(((-1.0)*r01*sj5*x1745))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x1744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1747=((1.0)*cj0);
IkReal x1748=((1.0)*sj0);
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1747))+(((-1.0)*r12*x1748)))),IkReal(((((-1.0)*r01*sj5*x1747))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1748))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x1750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1749.value)+(((1.5707963267949)*(x1750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1751=IKcos(j4);
IkReal x1752=((1.0)*r22);
IkReal x1753=IKsin(j4);
IkReal x1754=(sj5*x1753);
IkReal x1755=((1.0)*cj5*x1753);
IkReal x1756=((1.0)*r12);
IkReal x1757=((1.0)*sj0);
IkReal x1758=((1.0)*r02);
IkReal x1759=(cj5*x1751);
IkReal x1760=((1.0)*sj5*x1751);
IkReal x1761=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1755))+(((-1.0)*x1751*x1752))+((r21*x1754)));
evalcond[1]=((((-1.0)*x1751*x1756))+cj0+(((-1.0)*r10*x1755))+((r11*x1754)));
evalcond[2]=((((-1.0)*r00*x1755))+((r01*x1754))+(((-1.0)*x1757))+(((-1.0)*x1751*x1758)));
evalcond[3]=((((-1.0)*x1752*x1753))+((cj1*sj2))+((r20*x1759))+(((-1.0)*r21*x1760))+((cj2*sj1)));
evalcond[4]=((((-1.0)*r01*x1760))+(((-1.0)*x1753*x1758))+(((-1.0)*cj0*x1761))+((r00*x1759)));
evalcond[5]=((((-1.0)*r11*x1760))+(((-1.0)*x1753*x1756))+((r10*x1759))+(((-1.0)*x1757*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1762=((1.0)*cj5);
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1762)))),-1);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1763.value)))+(x1764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1765=IKcos(j4);
IkReal x1766=((1.0)*r22);
IkReal x1767=IKsin(j4);
IkReal x1768=(sj5*x1767);
IkReal x1769=((1.0)*cj5*x1767);
IkReal x1770=((1.0)*r12);
IkReal x1771=((1.0)*sj0);
IkReal x1772=((1.0)*r02);
IkReal x1773=(cj5*x1765);
IkReal x1774=((1.0)*sj5*x1765);
IkReal x1775=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1765*x1766))+((r21*x1768))+(((-1.0)*r20*x1769)));
evalcond[1]=((((-1.0)*x1765*x1770))+((r11*x1768))+cj0+(((-1.0)*r10*x1769)));
evalcond[2]=((((-1.0)*x1765*x1772))+(((-1.0)*x1771))+((r01*x1768))+(((-1.0)*r00*x1769)));
evalcond[3]=(((r20*x1773))+((cj1*sj2))+(((-1.0)*x1766*x1767))+(((-1.0)*r21*x1774))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1767*x1772))+(((-1.0)*cj0*x1775))+((r00*x1773))+(((-1.0)*r01*x1774)));
evalcond[5]=((((-1.0)*x1771*x1775))+(((-1.0)*x1767*x1770))+(((-1.0)*r11*x1774))+((r10*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=((1.0)*sj0);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1776)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x1776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1777.value)))+(x1778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1779=IKcos(j4);
IkReal x1780=((1.0)*r22);
IkReal x1781=IKsin(j4);
IkReal x1782=(sj5*x1781);
IkReal x1783=((1.0)*cj5*x1781);
IkReal x1784=((1.0)*r12);
IkReal x1785=((1.0)*sj0);
IkReal x1786=((1.0)*r02);
IkReal x1787=(cj5*x1779);
IkReal x1788=((1.0)*sj5*x1779);
IkReal x1789=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1783))+((r21*x1782))+(((-1.0)*x1779*x1780)));
evalcond[1]=(((r11*x1782))+(((-1.0)*r10*x1783))+cj0+(((-1.0)*x1779*x1784)));
evalcond[2]=((((-1.0)*x1785))+(((-1.0)*r00*x1783))+(((-1.0)*x1779*x1786))+((r01*x1782)));
evalcond[3]=((((-1.0)*r21*x1788))+((cj1*sj2))+(((-1.0)*x1780*x1781))+((r20*x1787))+((cj2*sj1)));
evalcond[4]=((((-1.0)*r01*x1788))+(((-1.0)*x1781*x1786))+(((-1.0)*cj0*x1789))+((r00*x1787)));
evalcond[5]=((((-1.0)*x1785*x1789))+(((-1.0)*r11*x1788))+((r10*x1787))+(((-1.0)*x1781*x1784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1790=cj1*cj1;
IkReal x1791=cj2*cj2;
IkReal x1792=(cj1*sj1*sj2);
IkReal x1793=((106250.0)*cj1);
IkReal x1794=((3350.0)*cj5);
IkReal x1795=((3350.0)*sj5);
IkReal x1796=((98000.0)*cj1*cj2);
IkReal x1797=((10625.0)*cj1*cj5);
IkReal x1798=((10625.0)*cj1*sj5);
IkReal x1799=((98000.0)*sj1*sj2);
IkReal x1800=((9800.0)*cj1*cj2*cj5);
IkReal x1801=((9800.0)*cj1*cj2*sj5);
IkReal x1802=((9800.0)*cj5*sj1*sj2);
IkReal x1803=((9800.0)*sj1*sj2*sj5);
CheckValue<IkReal> x1804=IKPowWithIntegerCheck(IKsign(((42905.0)+(((76832.0)*x1790*x1791))+(((-76832.0)*cj2*x1792))+(((6740.25)*x1790))+(((83300.0)*cj2*x1790))+(((-83300.0)*x1792))+(((-38416.0)*x1791)))),-1);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1799))+((py*x1796))+(((-1.0)*r11*x1802))+((r11*x1797))+((py*x1793))+((r11*x1800))+((r10*x1798))+(((-1.0)*(33500.0)*px))+(((-1.0)*r00*x1795))+((r10*x1801))+(((-1.0)*r01*x1794))+(((-1.0)*r10*x1803)))),IkReal((((px*x1796))+(((33500.0)*py))+((r00*x1801))+((r10*x1795))+((r00*x1798))+(((-1.0)*r01*x1802))+((r01*x1797))+((px*x1793))+((r01*x1800))+(((-1.0)*r00*x1803))+(((-1.0)*px*x1799))+((r11*x1794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1804.value)))+(x1805.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1806=((0.1)*cj5);
IkReal x1807=((0.1)*sj5);
IkReal x1808=IKsin(j0);
IkReal x1809=IKcos(j0);
IkReal x1810=((0.425)*cj1);
IkReal x1811=((0.392)*cj1*cj2);
IkReal x1812=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x1809*x1812))+((x1809*x1811))+(((-1.0)*r01*x1806))+((x1809*x1810))+(((-1.0)*r00*x1807))+(((-0.134)*x1808)));
evalcond[1]=(((x1808*x1810))+(((-1.0)*(1.0)*py))+(((0.134)*x1809))+(((-1.0)*x1808*x1812))+(((-1.0)*r11*x1806))+(((-1.0)*r10*x1807))+((x1808*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1813=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1813;
j4eval[1]=IKsign(x1813);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*(1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1814=((1.0)*cj5);
IkReal x1815=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x1814)));
j4eval[0]=x1815;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1814))))));
j4eval[2]=IKsign(x1815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1816=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)));
IkReal x1817=((1.0)*cj0);
IkReal x1818=((1.0)*sj0);
j4eval[0]=x1816;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1818))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1817))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x1818))+(((-1.0)*r02*x1817))))));
j4eval[2]=IKsign(x1816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1819=((1.0)*r20);
IkReal x1821 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1821)==0){
continue;
}
IkReal x1820=pow(x1821,-0.5);
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1819)),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1822.value));
IkReal gconst1=(r21*x1820);
IkReal gconst2=((-1.0)*x1819*x1820);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1823.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1824=((1.0)*r20);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1824)),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
IkReal x1825=((-1.0)*(x1827.value));
IkReal x1826=x1820;
sj5=gconst1;
cj5=gconst2;
j5=x1825;
IkReal gconst0=x1825;
IkReal gconst1=(r21*x1826);
IkReal gconst2=((-1.0)*x1824*x1826);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1828=((1.0)*r20);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1828)),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal x1829=((-1.0)*(x1831.value));
IkReal x1830=x1820;
sj5=gconst1;
cj5=gconst2;
j5=x1829;
IkReal gconst0=x1829;
IkReal gconst1=(r21*x1830);
IkReal gconst2=((-1.0)*x1828*x1830);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1832=((1.0)*r20);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1832)),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
IkReal x1833=((-1.0)*(x1835.value));
IkReal x1834=x1820;
sj5=gconst1;
cj5=gconst2;
j5=x1833;
IkReal gconst0=x1833;
IkReal gconst1=(r21*x1834);
IkReal gconst2=((-1.0)*x1832*x1834);
IkReal x1836=r22*r22;
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1836))),-1);
if(!x1839.valid){
continue;
}
IkReal x1837=(sj3*(x1839.value));
IkReal x1838=((((2.0)*x1837*(r20*r20)*(r21*r21)))+((x1837*(r21*r21*r21*r21)))+((sj3*x1836))+((x1837*(r20*r20*r20*r20))));
j4eval[0]=x1838;
j4eval[1]=IKsign(x1838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1840=(gconst1*r21);
IkReal x1841=gconst1*gconst1;
IkReal x1842=r21*r21;
IkReal x1843=gconst2*gconst2;
IkReal x1844=r20*r20;
IkReal x1845=(sj1*sj2);
IkReal x1846=((1.0)*cj1*cj2);
IkReal x1847=(cj3*r22);
IkReal x1848=(gconst2*r20);
IkReal x1849=(cj3*gconst1*gconst2);
IkReal x1850=(cj3*r20*r21);
CheckValue<IkReal> x1851=IKPowWithIntegerCheck(IKsign((((sj3*x1843*x1844))+((sj3*(r22*r22)))+(((-2.0)*gconst2*r20*sj3*x1840))+((sj3*x1841*x1842)))),-1);
if(!x1851.valid){
continue;
}
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1846))+((gconst2*r21*x1847))+((gconst1*r20*x1847))+((r22*x1845)))),IkReal(((((-1.0)*x1844*x1849))+(((-1.0)*x1840*x1846))+((x1840*x1845))+((x1842*x1849))+(((-1.0)*x1843*x1850))+(((-1.0)*sj1*sj2*x1848))+((cj1*cj2*x1848))+((x1841*x1850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1851.value)))+(x1852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1853=IKcos(j4);
IkReal x1854=((1.0)*x1853);
IkReal x1855=IKsin(j4);
IkReal x1856=(gconst1*x1855);
IkReal x1857=((1.0)*gconst2*x1855);
IkReal x1858=((1.0)*sj0);
IkReal x1859=(cj1*sj2);
IkReal x1860=(cj2*sj1);
IkReal x1861=(gconst1*sj3);
IkReal x1862=(gconst2*sj3);
IkReal x1863=(cj3*x1855);
IkReal x1864=(cj3*gconst1*x1853);
IkReal x1865=((1.0)*cj3*gconst2*x1853);
IkReal x1866=(sj1*sj2);
IkReal x1867=((1.0)*cj1*cj2);
IkReal x1868=(cj3*gconst1);
IkReal x1869=(cj3*gconst2);
IkReal x1870=((1.0)*sj3*x1855);
IkReal x1871=(gconst2*sj3*x1853);
IkReal x1872=((1.0)*gconst1*sj3*x1853);
IkReal x1873=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1854))+((r21*x1856))+(((-1.0)*r20*x1857)));
evalcond[1]=((((-1.0)*r12*x1854))+((r11*x1856))+cj0+(((-1.0)*r10*x1857)));
evalcond[2]=(((r01*x1856))+(((-1.0)*r00*x1857))+(((-1.0)*r02*x1854))+(((-1.0)*x1858)));
evalcond[3]=(x1860+((r22*x1863))+x1859+((r20*x1861))+((r21*x1864))+((r21*x1862))+(((-1.0)*r20*x1865)));
evalcond[4]=((((-1.0)*x1867))+x1866+((r21*x1869))+((r20*x1868))+((r20*x1871))+(((-1.0)*r22*x1870))+(((-1.0)*r21*x1872)));
evalcond[5]=(((r00*x1861))+(((-1.0)*r00*x1865))+(((-1.0)*cj0*x1867))+((r01*x1864))+((r02*x1863))+((r01*x1862))+((cj0*x1866)));
evalcond[6]=(((r10*x1861))+(((-1.0)*cj1*cj2*x1858))+(((-1.0)*r10*x1865))+((r11*x1862))+((r12*x1863))+((r11*x1864))+((sj0*x1866)));
evalcond[7]=((((-1.0)*r02*x1870))+((r00*x1868))+(((-1.0)*x1860*x1873))+(((-1.0)*x1859*x1873))+((r01*x1869))+((r00*x1871))+(((-1.0)*r01*x1872)));
evalcond[8]=((((-1.0)*r11*x1872))+(((-1.0)*x1858*x1860))+((r10*x1871))+(((-1.0)*r12*x1870))+((r11*x1869))+((r10*x1868))+(((-1.0)*x1858*x1859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1874=((1.0)*gconst2);
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst1*r00))+(((-1.0)*r01*x1874)))),-1);
if(!x1875.valid){
continue;
}
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x1874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1875.value)))+(x1876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1877=IKcos(j4);
IkReal x1878=((1.0)*x1877);
IkReal x1879=IKsin(j4);
IkReal x1880=(gconst1*x1879);
IkReal x1881=((1.0)*gconst2*x1879);
IkReal x1882=((1.0)*sj0);
IkReal x1883=(cj1*sj2);
IkReal x1884=(cj2*sj1);
IkReal x1885=(gconst1*sj3);
IkReal x1886=(gconst2*sj3);
IkReal x1887=(cj3*x1879);
IkReal x1888=(cj3*gconst1*x1877);
IkReal x1889=((1.0)*cj3*gconst2*x1877);
IkReal x1890=(sj1*sj2);
IkReal x1891=((1.0)*cj1*cj2);
IkReal x1892=(cj3*gconst1);
IkReal x1893=(cj3*gconst2);
IkReal x1894=((1.0)*sj3*x1879);
IkReal x1895=(gconst2*sj3*x1877);
IkReal x1896=((1.0)*gconst1*sj3*x1877);
IkReal x1897=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1881))+(((-1.0)*r22*x1878))+((r21*x1880)));
evalcond[1]=((((-1.0)*r10*x1881))+((r11*x1880))+cj0+(((-1.0)*r12*x1878)));
evalcond[2]=(((r01*x1880))+(((-1.0)*r00*x1881))+(((-1.0)*r02*x1878))+(((-1.0)*x1882)));
evalcond[3]=((((-1.0)*r20*x1889))+x1884+x1883+((r20*x1885))+((r21*x1886))+((r21*x1888))+((r22*x1887)));
evalcond[4]=(((r20*x1892))+(((-1.0)*x1891))+(((-1.0)*r21*x1896))+((r20*x1895))+x1890+(((-1.0)*r22*x1894))+((r21*x1893)));
evalcond[5]=(((r00*x1885))+((r01*x1886))+(((-1.0)*r00*x1889))+((r01*x1888))+((cj0*x1890))+((r02*x1887))+(((-1.0)*cj0*x1891)));
evalcond[6]=(((r12*x1887))+((r11*x1888))+((r11*x1886))+(((-1.0)*cj1*cj2*x1882))+((sj0*x1890))+(((-1.0)*r10*x1889))+((r10*x1885)));
evalcond[7]=((((-1.0)*r02*x1894))+((r00*x1895))+((r00*x1892))+(((-1.0)*x1884*x1897))+(((-1.0)*r01*x1896))+(((-1.0)*x1883*x1897))+((r01*x1893)));
evalcond[8]=(((r10*x1895))+((r10*x1892))+((r11*x1893))+(((-1.0)*x1882*x1883))+(((-1.0)*x1882*x1884))+(((-1.0)*r12*x1894))+(((-1.0)*r11*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1898=((1.0)*sj0);
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1898)),IkReal(((((-1.0)*gconst1*r21*x1898))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1899.value)))+(x1900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1901=IKcos(j4);
IkReal x1902=((1.0)*x1901);
IkReal x1903=IKsin(j4);
IkReal x1904=(gconst1*x1903);
IkReal x1905=((1.0)*gconst2*x1903);
IkReal x1906=((1.0)*sj0);
IkReal x1907=(cj1*sj2);
IkReal x1908=(cj2*sj1);
IkReal x1909=(gconst1*sj3);
IkReal x1910=(gconst2*sj3);
IkReal x1911=(cj3*x1903);
IkReal x1912=(cj3*gconst1*x1901);
IkReal x1913=((1.0)*cj3*gconst2*x1901);
IkReal x1914=(sj1*sj2);
IkReal x1915=((1.0)*cj1*cj2);
IkReal x1916=(cj3*gconst1);
IkReal x1917=(cj3*gconst2);
IkReal x1918=((1.0)*sj3*x1903);
IkReal x1919=(gconst2*sj3*x1901);
IkReal x1920=((1.0)*gconst1*sj3*x1901);
IkReal x1921=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1902))+(((-1.0)*r20*x1905))+((r21*x1904)));
evalcond[1]=((((-1.0)*r12*x1902))+(((-1.0)*r10*x1905))+cj0+((r11*x1904)));
evalcond[2]=((((-1.0)*r00*x1905))+((r01*x1904))+(((-1.0)*r02*x1902))+(((-1.0)*x1906)));
evalcond[3]=(((r21*x1912))+((r20*x1909))+((r22*x1911))+(((-1.0)*r20*x1913))+x1908+x1907+((r21*x1910)));
evalcond[4]=(((r20*x1916))+(((-1.0)*x1915))+x1914+(((-1.0)*r21*x1920))+((r21*x1917))+((r20*x1919))+(((-1.0)*r22*x1918)));
evalcond[5]=(((r01*x1910))+(((-1.0)*r00*x1913))+((cj0*x1914))+((r01*x1912))+((r02*x1911))+((r00*x1909))+(((-1.0)*cj0*x1915)));
evalcond[6]=(((r12*x1911))+(((-1.0)*r10*x1913))+(((-1.0)*cj1*cj2*x1906))+((r11*x1912))+((r10*x1909))+((sj0*x1914))+((r11*x1910)));
evalcond[7]=(((r00*x1916))+(((-1.0)*r02*x1918))+((r00*x1919))+((r01*x1917))+(((-1.0)*x1908*x1921))+(((-1.0)*r01*x1920))+(((-1.0)*x1907*x1921)));
evalcond[8]=(((r10*x1916))+(((-1.0)*r11*x1920))+(((-1.0)*x1906*x1907))+(((-1.0)*x1906*x1908))+((r11*x1917))+((r10*x1919))+(((-1.0)*r12*x1918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1922=((1.0)*r21);
IkReal x1923=((1.0)*r20);
IkReal x1925 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1925)==0){
continue;
}
IkReal x1924=pow(x1925,-0.5);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((-1.0)*x1922)),IkReal(((-1.0)*x1923)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1926.value))));
IkReal gconst4=((-1.0)*x1922*x1924);
IkReal gconst5=(x1923*x1924);
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1927.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1928=((1.0)*r21);
IkReal x1929=((1.0)*r20);
CheckValue<IkReal> x1932 = IKatan2WithCheck(IkReal(((-1.0)*x1928)),IkReal(((-1.0)*x1929)),IKFAST_ATAN2_MAGTHRESH);
if(!x1932.valid){
continue;
}
IkReal x1930=((-1.0)*(x1932.value));
IkReal x1931=x1924;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1930);
IkReal gconst3=((3.14159265358979)+x1930);
IkReal gconst4=((-1.0)*x1928*x1931);
IkReal gconst5=(x1929*x1931);
j4eval[0]=1.0;
j4eval[1]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1933=((1.0)*r21);
IkReal x1934=((1.0)*r20);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(((-1.0)*x1933)),IkReal(((-1.0)*x1934)),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
IkReal x1935=((-1.0)*(x1937.value));
IkReal x1936=x1924;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1935);
IkReal gconst3=((3.14159265358979)+x1935);
IkReal gconst4=((-1.0)*x1933*x1936);
IkReal gconst5=(x1934*x1936);
j4eval[0]=1.0;
j4eval[1]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1938=((1.0)*r21);
IkReal x1939=((1.0)*r20);
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(((-1.0)*x1938)),IkReal(((-1.0)*x1939)),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
IkReal x1940=((-1.0)*(x1942.value));
IkReal x1941=x1924;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1940);
IkReal gconst3=((3.14159265358979)+x1940);
IkReal gconst4=((-1.0)*x1938*x1941);
IkReal gconst5=(x1939*x1941);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=((-1.0)+(r22*r22));
j4eval[4]=((((r12*r12)*(sj0*sj0)))+(((cj0*cj0)*(r02*r02)))+(((2.0)*cj0*r02*r12*sj0)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1943=((1.0)*gconst4);
IkReal x1944=((1.0)*cj0);
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x1944)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*gconst4*r01*x1944))+(((-1.0)*r11*sj0*x1943))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1943))+(((-1.0)*(1.0)*gconst5*r21)))),-1);
if(!x1946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1945.value)+(((1.5707963267949)*(x1946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1947=IKcos(j4);
IkReal x1948=((1.0)*x1947);
IkReal x1949=IKsin(j4);
IkReal x1950=(gconst4*x1949);
IkReal x1951=((1.0)*gconst5*x1949);
IkReal x1952=((1.0)*sj0);
IkReal x1953=(cj1*sj2);
IkReal x1954=(cj2*sj1);
IkReal x1955=(gconst4*sj3);
IkReal x1956=(gconst5*sj3);
IkReal x1957=(cj3*x1949);
IkReal x1958=(cj3*gconst4*x1947);
IkReal x1959=((1.0)*cj3*gconst5*x1947);
IkReal x1960=(sj1*sj2);
IkReal x1961=((1.0)*cj1*cj2);
IkReal x1962=(cj3*gconst4);
IkReal x1963=(cj3*gconst5);
IkReal x1964=((1.0)*sj3*x1949);
IkReal x1965=(gconst5*sj3*x1947);
IkReal x1966=((1.0)*gconst4*sj3*x1947);
IkReal x1967=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1948))+((r21*x1950))+(((-1.0)*r20*x1951)));
evalcond[1]=((((-1.0)*r10*x1951))+((r11*x1950))+cj0+(((-1.0)*r12*x1948)));
evalcond[2]=((((-1.0)*r00*x1951))+(((-1.0)*x1952))+((r01*x1950))+(((-1.0)*r02*x1948)));
evalcond[3]=((((-1.0)*r20*x1959))+((r21*x1956))+((r21*x1958))+((r20*x1955))+x1954+x1953+((r22*x1957)));
evalcond[4]=(x1960+(((-1.0)*r22*x1964))+(((-1.0)*r21*x1966))+((r20*x1965))+(((-1.0)*x1961))+((r21*x1963))+((r20*x1962)));
evalcond[5]=(((r00*x1955))+((cj0*x1960))+((r01*x1956))+((r01*x1958))+(((-1.0)*cj0*x1961))+((r02*x1957))+(((-1.0)*r00*x1959)));
evalcond[6]=(((r12*x1957))+((r10*x1955))+(((-1.0)*r10*x1959))+((sj0*x1960))+((r11*x1956))+(((-1.0)*cj1*cj2*x1952))+((r11*x1958)));
evalcond[7]=(((r00*x1962))+(((-1.0)*x1953*x1967))+(((-1.0)*r02*x1964))+((r01*x1963))+(((-1.0)*r01*x1966))+(((-1.0)*x1954*x1967))+((r00*x1965)));
evalcond[8]=(((r11*x1963))+((r10*x1965))+(((-1.0)*x1952*x1953))+((r10*x1962))+(((-1.0)*x1952*x1954))+(((-1.0)*r12*x1964))+(((-1.0)*r11*x1966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1968=((1.0)*gconst5);
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst4*r00))+(((-1.0)*r01*x1968)))),-1);
if(!x1969.valid){
continue;
}
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1968))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1969.value)))+(x1970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1971=IKcos(j4);
IkReal x1972=((1.0)*x1971);
IkReal x1973=IKsin(j4);
IkReal x1974=(gconst4*x1973);
IkReal x1975=((1.0)*gconst5*x1973);
IkReal x1976=((1.0)*sj0);
IkReal x1977=(cj1*sj2);
IkReal x1978=(cj2*sj1);
IkReal x1979=(gconst4*sj3);
IkReal x1980=(gconst5*sj3);
IkReal x1981=(cj3*x1973);
IkReal x1982=(cj3*gconst4*x1971);
IkReal x1983=((1.0)*cj3*gconst5*x1971);
IkReal x1984=(sj1*sj2);
IkReal x1985=((1.0)*cj1*cj2);
IkReal x1986=(cj3*gconst4);
IkReal x1987=(cj3*gconst5);
IkReal x1988=((1.0)*sj3*x1973);
IkReal x1989=(gconst5*sj3*x1971);
IkReal x1990=((1.0)*gconst4*sj3*x1971);
IkReal x1991=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x1972))+(((-1.0)*r20*x1975))+((r21*x1974)));
evalcond[1]=((((-1.0)*r12*x1972))+((r11*x1974))+cj0+(((-1.0)*r10*x1975)));
evalcond[2]=((((-1.0)*r00*x1975))+(((-1.0)*r02*x1972))+(((-1.0)*x1976))+((r01*x1974)));
evalcond[3]=(((r21*x1980))+((r22*x1981))+((r20*x1979))+(((-1.0)*r20*x1983))+((r21*x1982))+x1977+x1978);
evalcond[4]=(((r21*x1987))+(((-1.0)*x1985))+x1984+(((-1.0)*r22*x1988))+((r20*x1986))+((r20*x1989))+(((-1.0)*r21*x1990)));
evalcond[5]=((((-1.0)*cj0*x1985))+(((-1.0)*r00*x1983))+((r01*x1982))+((r02*x1981))+((cj0*x1984))+((r01*x1980))+((r00*x1979)));
evalcond[6]=(((r10*x1979))+(((-1.0)*r10*x1983))+((r12*x1981))+(((-1.0)*cj1*cj2*x1976))+((r11*x1982))+((sj0*x1984))+((r11*x1980)));
evalcond[7]=(((r00*x1989))+((r00*x1986))+((r01*x1987))+(((-1.0)*x1977*x1991))+(((-1.0)*r02*x1988))+(((-1.0)*x1978*x1991))+(((-1.0)*r01*x1990)));
evalcond[8]=(((r11*x1987))+(((-1.0)*x1976*x1977))+(((-1.0)*r12*x1988))+((r10*x1986))+(((-1.0)*r11*x1990))+((r10*x1989))+(((-1.0)*x1976*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1992=((1.0)*sj0);
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign((((gconst4*r10))+((gconst5*r11)))),-1);
if(!x1993.valid){
continue;
}
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1992)),IkReal(((((-1.0)*gconst4*r21*x1992))+((gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1993.value)))+(x1994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1995=IKcos(j4);
IkReal x1996=((1.0)*x1995);
IkReal x1997=IKsin(j4);
IkReal x1998=(gconst4*x1997);
IkReal x1999=((1.0)*gconst5*x1997);
IkReal x2000=((1.0)*sj0);
IkReal x2001=(cj1*sj2);
IkReal x2002=(cj2*sj1);
IkReal x2003=(gconst4*sj3);
IkReal x2004=(gconst5*sj3);
IkReal x2005=(cj3*x1997);
IkReal x2006=(cj3*gconst4*x1995);
IkReal x2007=((1.0)*cj3*gconst5*x1995);
IkReal x2008=(sj1*sj2);
IkReal x2009=((1.0)*cj1*cj2);
IkReal x2010=(cj3*gconst4);
IkReal x2011=(cj3*gconst5);
IkReal x2012=((1.0)*sj3*x1997);
IkReal x2013=(gconst5*sj3*x1995);
IkReal x2014=((1.0)*gconst4*sj3*x1995);
IkReal x2015=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x1999))+(((-1.0)*r22*x1996))+((r21*x1998)));
evalcond[1]=((((-1.0)*r10*x1999))+cj0+((r11*x1998))+(((-1.0)*r12*x1996)));
evalcond[2]=((((-1.0)*x2000))+(((-1.0)*r02*x1996))+(((-1.0)*r00*x1999))+((r01*x1998)));
evalcond[3]=(x2002+x2001+((r21*x2004))+((r20*x2003))+(((-1.0)*r20*x2007))+((r21*x2006))+((r22*x2005)));
evalcond[4]=(x2008+((r20*x2010))+(((-1.0)*x2009))+((r20*x2013))+(((-1.0)*r21*x2014))+((r21*x2011))+(((-1.0)*r22*x2012)));
evalcond[5]=(((r00*x2003))+((r01*x2006))+(((-1.0)*r00*x2007))+((r01*x2004))+((r02*x2005))+((cj0*x2008))+(((-1.0)*cj0*x2009)));
evalcond[6]=((((-1.0)*r10*x2007))+((r11*x2004))+((r10*x2003))+(((-1.0)*cj1*cj2*x2000))+((sj0*x2008))+((r11*x2006))+((r12*x2005)));
evalcond[7]=((((-1.0)*x2001*x2015))+((r00*x2013))+(((-1.0)*r02*x2012))+((r01*x2011))+(((-1.0)*r01*x2014))+(((-1.0)*x2002*x2015))+((r00*x2010)));
evalcond[8]=((((-1.0)*x2000*x2001))+(((-1.0)*r12*x2012))+(((-1.0)*r11*x2014))+((r10*x2013))+((r10*x2010))+(((-1.0)*x2000*x2002))+((r11*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2016=((1.0)*r00);
IkReal x2018 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2018)==0){
continue;
}
IkReal x2017=pow(x2018,-0.5);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2016)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2019.value));
IkReal gconst7=(r01*x2017);
IkReal gconst8=((-1.0)*x2016*x2017);
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2020.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2021=((1.0)*r00);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2021)),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
IkReal x2022=((-1.0)*(x2024.value));
IkReal x2023=x2017;
sj5=gconst7;
cj5=gconst8;
j5=x2022;
IkReal gconst6=x2022;
IkReal gconst7=(r01*x2023);
IkReal gconst8=((-1.0)*x2021*x2023);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2025=((1.0)*r00);
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2025)),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
IkReal x2026=((-1.0)*(x2028.value));
IkReal x2027=x2017;
sj5=gconst7;
cj5=gconst8;
j5=x2026;
IkReal gconst6=x2026;
IkReal gconst7=(r01*x2027);
IkReal gconst8=((-1.0)*x2025*x2027);
IkReal x2029=(r12*sj0);
IkReal x2030=((1.0)*(r02*r02));
IkReal x2033 = ((1.0)+(((-1.0)*x2030)));
if(IKabs(x2033)==0){
continue;
}
IkReal x2031=pow(x2033,-0.5);
IkReal x2032=(cj0*x2031);
j4eval[0]=((IKabs(((((-1.0)*x2029))+(((-1.0)*cj0*r02)))))+(IKabs(((((-1.0)*r02*x2029*x2031))+(((-1.0)*x2030*x2032))+x2032))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2034=((1.0)*r00);
CheckValue<IkReal> x2037 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x2034)),IKFAST_ATAN2_MAGTHRESH);
if(!x2037.valid){
continue;
}
IkReal x2035=((-1.0)*(x2037.value));
IkReal x2036=x2017;
sj5=gconst7;
cj5=gconst8;
j5=x2035;
IkReal gconst6=x2035;
IkReal gconst7=(r01*x2036);
IkReal gconst8=((-1.0)*x2034*x2036);
CheckValue<IkReal> x2040=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r02*r02)))),-1);
if(!x2040.valid){
continue;
}
IkReal x2038=(cj3*(x2040.value));
IkReal x2039=(((x2038*(r00*r00)*(r20*r20)))+(((2.0)*r00*r01*r20*r21*x2038))+((x2038*(r01*r01)*(r21*r21)))+((cj3*(r22*r22))));
j4eval[0]=x2039;
j4eval[1]=IKsign(x2039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2041=(gconst8*r20);
IkReal x2042=gconst7*gconst7;
IkReal x2043=r21*r21;
IkReal x2044=gconst8*gconst8;
IkReal x2045=r20*r20;
IkReal x2046=((1.0)*r22);
IkReal x2047=(cj1*sj2);
IkReal x2048=(cj2*sj1);
IkReal x2049=((1.0)*r22*sj3);
IkReal x2050=((1.0)*gconst7*r21);
IkReal x2051=(gconst7*gconst8*sj3);
IkReal x2052=(r20*r21*sj3);
CheckValue<IkReal> x2053 = IKatan2WithCheck(IkReal(((((-1.0)*gconst7*r20*x2049))+(((-1.0)*gconst8*r21*x2049))+(((-1.0)*x2046*x2047))+(((-1.0)*x2046*x2048)))),IkReal((((x2041*x2047))+(((-1.0)*x2043*x2051))+((x2041*x2048))+(((-1.0)*x2047*x2050))+((x2045*x2051))+(((-1.0)*x2042*x2052))+((x2044*x2052))+(((-1.0)*x2048*x2050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2053.valid){
continue;
}
CheckValue<IkReal> x2054=IKPowWithIntegerCheck(IKsign((((cj3*x2044*x2045))+(((-2.0)*cj3*gconst7*r21*x2041))+((cj3*(r22*r22)))+((cj3*x2042*x2043)))),-1);
if(!x2054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2053.value)+(((1.5707963267949)*(x2054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2055=IKcos(j4);
IkReal x2056=((1.0)*x2055);
IkReal x2057=IKsin(j4);
IkReal x2058=(gconst7*x2057);
IkReal x2059=((1.0)*gconst8*x2057);
IkReal x2060=((1.0)*sj0);
IkReal x2061=(cj1*sj2);
IkReal x2062=(cj2*sj1);
IkReal x2063=(gconst7*sj3);
IkReal x2064=(gconst8*sj3);
IkReal x2065=(cj3*x2057);
IkReal x2066=(cj3*gconst7*x2055);
IkReal x2067=((1.0)*cj3*gconst8*x2055);
IkReal x2068=(sj1*sj2);
IkReal x2069=((1.0)*cj1*cj2);
IkReal x2070=(cj3*gconst7);
IkReal x2071=(cj3*gconst8);
IkReal x2072=((1.0)*sj3*x2057);
IkReal x2073=(gconst8*sj3*x2055);
IkReal x2074=((1.0)*gconst7*sj3*x2055);
IkReal x2075=((1.0)*cj0);
evalcond[0]=(((r21*x2058))+(((-1.0)*r20*x2059))+(((-1.0)*r22*x2056)));
evalcond[1]=((((-1.0)*r10*x2059))+((r11*x2058))+cj0+(((-1.0)*r12*x2056)));
evalcond[2]=(((r01*x2058))+(((-1.0)*x2060))+(((-1.0)*r02*x2056))+(((-1.0)*r00*x2059)));
evalcond[3]=(((r20*x2063))+(((-1.0)*r20*x2067))+x2062+x2061+((r21*x2066))+((r21*x2064))+((r22*x2065)));
evalcond[4]=(x2068+(((-1.0)*r21*x2074))+(((-1.0)*r22*x2072))+(((-1.0)*x2069))+((r21*x2071))+((r20*x2070))+((r20*x2073)));
evalcond[5]=((((-1.0)*r00*x2067))+((cj0*x2068))+((r02*x2065))+((r01*x2066))+(((-1.0)*cj0*x2069))+((r01*x2064))+((r00*x2063)));
evalcond[6]=(((sj0*x2068))+(((-1.0)*r10*x2067))+((r11*x2066))+(((-1.0)*cj1*cj2*x2060))+((r12*x2065))+((r10*x2063))+((r11*x2064)));
evalcond[7]=((((-1.0)*r02*x2072))+(((-1.0)*x2061*x2075))+((r01*x2071))+((r00*x2073))+(((-1.0)*x2062*x2075))+(((-1.0)*r01*x2074))+((r00*x2070)));
evalcond[8]=((((-1.0)*r11*x2074))+((r10*x2070))+(((-1.0)*r12*x2072))+(((-1.0)*x2060*x2061))+((r10*x2073))+((r11*x2071))+(((-1.0)*x2060*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=((1.0)*gconst7);
IkReal x2077=((1.0)*cj0);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2077)))),IkReal(((((-1.0)*gconst7*r01*x2077))+((gconst8*r10*sj0))+(((-1.0)*r11*sj0*x2076))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2076))+(((-1.0)*(1.0)*gconst8*r21)))),-1);
if(!x2079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2078.value)+(((1.5707963267949)*(x2079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2080=IKcos(j4);
IkReal x2081=((1.0)*x2080);
IkReal x2082=IKsin(j4);
IkReal x2083=(gconst7*x2082);
IkReal x2084=((1.0)*gconst8*x2082);
IkReal x2085=((1.0)*sj0);
IkReal x2086=(cj1*sj2);
IkReal x2087=(cj2*sj1);
IkReal x2088=(gconst7*sj3);
IkReal x2089=(gconst8*sj3);
IkReal x2090=(cj3*x2082);
IkReal x2091=(cj3*gconst7*x2080);
IkReal x2092=((1.0)*cj3*gconst8*x2080);
IkReal x2093=(sj1*sj2);
IkReal x2094=((1.0)*cj1*cj2);
IkReal x2095=(cj3*gconst7);
IkReal x2096=(cj3*gconst8);
IkReal x2097=((1.0)*sj3*x2082);
IkReal x2098=(gconst8*sj3*x2080);
IkReal x2099=((1.0)*gconst7*sj3*x2080);
IkReal x2100=((1.0)*cj0);
evalcond[0]=(((r21*x2083))+(((-1.0)*r20*x2084))+(((-1.0)*r22*x2081)));
evalcond[1]=((((-1.0)*r12*x2081))+cj0+((r11*x2083))+(((-1.0)*r10*x2084)));
evalcond[2]=((((-1.0)*r00*x2084))+(((-1.0)*r02*x2081))+((r01*x2083))+(((-1.0)*x2085)));
evalcond[3]=((((-1.0)*r20*x2092))+((r20*x2088))+((r21*x2089))+((r22*x2090))+((r21*x2091))+x2086+x2087);
evalcond[4]=(x2093+((r21*x2096))+(((-1.0)*r22*x2097))+((r20*x2095))+(((-1.0)*r21*x2099))+((r20*x2098))+(((-1.0)*x2094)));
evalcond[5]=(((cj0*x2093))+((r01*x2091))+((r00*x2088))+((r01*x2089))+((r02*x2090))+(((-1.0)*cj0*x2094))+(((-1.0)*r00*x2092)));
evalcond[6]=(((r11*x2091))+((r12*x2090))+((r10*x2088))+((sj0*x2093))+(((-1.0)*cj1*cj2*x2085))+((r11*x2089))+(((-1.0)*r10*x2092)));
evalcond[7]=((((-1.0)*x2086*x2100))+((r00*x2098))+(((-1.0)*r01*x2099))+(((-1.0)*r02*x2097))+((r01*x2096))+(((-1.0)*x2087*x2100))+((r00*x2095)));
evalcond[8]=(((r10*x2098))+(((-1.0)*r12*x2097))+((r10*x2095))+(((-1.0)*r11*x2099))+(((-1.0)*x2085*x2087))+((r11*x2096))+(((-1.0)*x2085*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2101=((1.0)*sj0);
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign((((gconst8*r11))+((gconst7*r10)))),-1);
if(!x2102.valid){
continue;
}
CheckValue<IkReal> x2103 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2101)),IkReal(((((-1.0)*gconst7*r21*x2101))+((gconst8*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2102.value)))+(x2103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2104=IKcos(j4);
IkReal x2105=((1.0)*x2104);
IkReal x2106=IKsin(j4);
IkReal x2107=(gconst7*x2106);
IkReal x2108=((1.0)*gconst8*x2106);
IkReal x2109=((1.0)*sj0);
IkReal x2110=(cj1*sj2);
IkReal x2111=(cj2*sj1);
IkReal x2112=(gconst7*sj3);
IkReal x2113=(gconst8*sj3);
IkReal x2114=(cj3*x2106);
IkReal x2115=(cj3*gconst7*x2104);
IkReal x2116=((1.0)*cj3*gconst8*x2104);
IkReal x2117=(sj1*sj2);
IkReal x2118=((1.0)*cj1*cj2);
IkReal x2119=(cj3*gconst7);
IkReal x2120=(cj3*gconst8);
IkReal x2121=((1.0)*sj3*x2106);
IkReal x2122=(gconst8*sj3*x2104);
IkReal x2123=((1.0)*gconst7*sj3*x2104);
IkReal x2124=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2105))+(((-1.0)*r20*x2108))+((r21*x2107)));
evalcond[1]=((((-1.0)*r12*x2105))+((r11*x2107))+cj0+(((-1.0)*r10*x2108)));
evalcond[2]=((((-1.0)*r02*x2105))+(((-1.0)*x2109))+(((-1.0)*r00*x2108))+((r01*x2107)));
evalcond[3]=((((-1.0)*r20*x2116))+x2111+x2110+((r21*x2115))+((r22*x2114))+((r20*x2112))+((r21*x2113)));
evalcond[4]=(x2117+((r20*x2119))+((r21*x2120))+(((-1.0)*x2118))+(((-1.0)*r21*x2123))+(((-1.0)*r22*x2121))+((r20*x2122)));
evalcond[5]=(((cj0*x2117))+((r01*x2113))+(((-1.0)*cj0*x2118))+((r02*x2114))+((r01*x2115))+((r00*x2112))+(((-1.0)*r00*x2116)));
evalcond[6]=((((-1.0)*cj1*cj2*x2109))+((r11*x2115))+((r10*x2112))+((r12*x2114))+(((-1.0)*r10*x2116))+((sj0*x2117))+((r11*x2113)));
evalcond[7]=(((r00*x2119))+((r00*x2122))+(((-1.0)*r01*x2123))+(((-1.0)*r02*x2121))+((r01*x2120))+(((-1.0)*x2110*x2124))+(((-1.0)*x2111*x2124)));
evalcond[8]=((((-1.0)*x2109*x2110))+(((-1.0)*r12*x2121))+(((-1.0)*x2109*x2111))+(((-1.0)*r11*x2123))+((r11*x2120))+((r10*x2119))+((r10*x2122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2125=((1.0)*r01);
IkReal x2126=((1.0)*r00);
IkReal x2128 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2128)==0){
continue;
}
IkReal x2127=pow(x2128,-0.5);
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal(((-1.0)*x2125)),IkReal(((-1.0)*x2126)),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2129.value))));
IkReal gconst10=((-1.0)*x2125*x2127);
IkReal gconst11=(x2126*x2127);
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2130.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2131=((1.0)*r01);
IkReal x2132=((1.0)*r00);
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(((-1.0)*x2131)),IkReal(((-1.0)*x2132)),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
IkReal x2133=((-1.0)*(x2135.value));
IkReal x2134=x2127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2133);
IkReal gconst9=((3.14159265358979)+x2133);
IkReal gconst10=((-1.0)*x2131*x2134);
IkReal gconst11=(x2132*x2134);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[6];
IkReal x2136=((1.0)*r01);
IkReal x2137=((1.0)*r00);
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((-1.0)*x2136)),IkReal(((-1.0)*x2137)),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
IkReal x2138=((-1.0)*(x2140.value));
IkReal x2139=x2127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2138);
IkReal gconst9=((3.14159265358979)+x2138);
IkReal gconst10=((-1.0)*x2136*x2139);
IkReal gconst11=(x2137*x2139);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=cj0;
j4eval[4]=r22;
j4eval[5]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  || IKabs(j4eval[5]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2141=((1.0)*r01);
IkReal x2142=((1.0)*r00);
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(((-1.0)*x2141)),IkReal(((-1.0)*x2142)),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
IkReal x2143=((-1.0)*(x2145.value));
IkReal x2144=x2127;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2143);
IkReal gconst9=((3.14159265358979)+x2143);
IkReal gconst10=((-1.0)*x2141*x2144);
IkReal gconst11=(x2142*x2144);
IkReal x2146=(r12*sj0);
IkReal x2147=((1.0)*(r02*r02));
IkReal x2150 = ((1.0)+(((-1.0)*x2147)));
if(IKabs(x2150)==0){
continue;
}
IkReal x2148=pow(x2150,-0.5);
IkReal x2149=(cj0*x2148);
j4eval[0]=((((1.0)*(IKabs((x2149+(((-1.0)*r02*x2146*x2148))+(((-1.0)*x2147*x2149)))))))+(((1.0)*(IKabs(((((-1.0)*cj0*r02))+(((-1.0)*x2146))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2151=((1.0)*gconst10);
IkReal x2152=((1.0)*cj0);
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst11*r21))+(((-1.0)*r20*x2151)))),-1);
if(!x2153.valid){
continue;
}
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2152))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((cj0*gconst11*r00))+(((-1.0)*gconst10*r01*x2152))+(((-1.0)*r11*sj0*x2151))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2153.value)))+(x2154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2155=IKcos(j4);
IkReal x2156=((1.0)*x2155);
IkReal x2157=IKsin(j4);
IkReal x2158=(gconst10*x2157);
IkReal x2159=((1.0)*gconst11*x2157);
IkReal x2160=((1.0)*sj0);
IkReal x2161=(cj1*sj2);
IkReal x2162=(cj2*sj1);
IkReal x2163=(gconst10*sj3);
IkReal x2164=(gconst11*sj3);
IkReal x2165=(cj3*x2157);
IkReal x2166=(cj3*gconst10*x2155);
IkReal x2167=((1.0)*cj3*gconst11*x2155);
IkReal x2168=(sj1*sj2);
IkReal x2169=((1.0)*cj1*cj2);
IkReal x2170=(cj3*gconst10);
IkReal x2171=(cj3*gconst11);
IkReal x2172=((1.0)*sj3*x2157);
IkReal x2173=(gconst11*sj3*x2155);
IkReal x2174=((1.0)*gconst10*sj3*x2155);
IkReal x2175=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2156))+(((-1.0)*r20*x2159))+((r21*x2158)));
evalcond[1]=((((-1.0)*r12*x2156))+((r11*x2158))+cj0+(((-1.0)*r10*x2159)));
evalcond[2]=((((-1.0)*x2160))+(((-1.0)*r02*x2156))+((r01*x2158))+(((-1.0)*r00*x2159)));
evalcond[3]=(((r21*x2166))+((r22*x2165))+x2161+x2162+((r21*x2164))+(((-1.0)*r20*x2167))+((r20*x2163)));
evalcond[4]=(x2168+((r21*x2171))+((r20*x2173))+(((-1.0)*x2169))+(((-1.0)*r22*x2172))+(((-1.0)*r21*x2174))+((r20*x2170)));
evalcond[5]=(((r01*x2164))+(((-1.0)*r00*x2167))+((r02*x2165))+((r00*x2163))+((r01*x2166))+(((-1.0)*cj0*x2169))+((cj0*x2168)));
evalcond[6]=(((r10*x2163))+((r12*x2165))+((r11*x2164))+(((-1.0)*cj1*cj2*x2160))+((sj0*x2168))+((r11*x2166))+(((-1.0)*r10*x2167)));
evalcond[7]=((((-1.0)*r01*x2174))+((r00*x2173))+((r00*x2170))+((r01*x2171))+(((-1.0)*x2161*x2175))+(((-1.0)*r02*x2172))+(((-1.0)*x2162*x2175)));
evalcond[8]=((((-1.0)*r11*x2174))+(((-1.0)*r12*x2172))+((r10*x2173))+((r11*x2171))+((r10*x2170))+(((-1.0)*x2160*x2162))+(((-1.0)*x2160*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2176=((1.0)*gconst11);
CheckValue<IkReal> x2177 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x2176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst10*r00))+(((-1.0)*r01*x2176)))),-1);
if(!x2178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2177.value)+(((1.5707963267949)*(x2178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2179=IKcos(j4);
IkReal x2180=((1.0)*x2179);
IkReal x2181=IKsin(j4);
IkReal x2182=(gconst10*x2181);
IkReal x2183=((1.0)*gconst11*x2181);
IkReal x2184=((1.0)*sj0);
IkReal x2185=(cj1*sj2);
IkReal x2186=(cj2*sj1);
IkReal x2187=(gconst10*sj3);
IkReal x2188=(gconst11*sj3);
IkReal x2189=(cj3*x2181);
IkReal x2190=(cj3*gconst10*x2179);
IkReal x2191=((1.0)*cj3*gconst11*x2179);
IkReal x2192=(sj1*sj2);
IkReal x2193=((1.0)*cj1*cj2);
IkReal x2194=(cj3*gconst10);
IkReal x2195=(cj3*gconst11);
IkReal x2196=((1.0)*sj3*x2181);
IkReal x2197=(gconst11*sj3*x2179);
IkReal x2198=((1.0)*gconst10*sj3*x2179);
IkReal x2199=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2183))+((r21*x2182))+(((-1.0)*r22*x2180)));
evalcond[1]=((((-1.0)*r12*x2180))+(((-1.0)*r10*x2183))+((r11*x2182))+cj0);
evalcond[2]=((((-1.0)*r00*x2183))+((r01*x2182))+(((-1.0)*x2184))+(((-1.0)*r02*x2180)));
evalcond[3]=(((r21*x2190))+((r22*x2189))+x2186+x2185+((r20*x2187))+(((-1.0)*r20*x2191))+((r21*x2188)));
evalcond[4]=(((r21*x2195))+(((-1.0)*x2193))+x2192+(((-1.0)*r21*x2198))+(((-1.0)*r22*x2196))+((r20*x2194))+((r20*x2197)));
evalcond[5]=(((cj0*x2192))+((r02*x2189))+((r01*x2188))+(((-1.0)*cj0*x2193))+(((-1.0)*r00*x2191))+((r01*x2190))+((r00*x2187)));
evalcond[6]=((((-1.0)*cj1*cj2*x2184))+(((-1.0)*r10*x2191))+((r12*x2189))+((r11*x2190))+((sj0*x2192))+((r10*x2187))+((r11*x2188)));
evalcond[7]=(((r01*x2195))+(((-1.0)*r02*x2196))+((r00*x2197))+(((-1.0)*r01*x2198))+((r00*x2194))+(((-1.0)*x2186*x2199))+(((-1.0)*x2185*x2199)));
evalcond[8]=((((-1.0)*x2184*x2185))+((r10*x2197))+((r10*x2194))+(((-1.0)*r11*x2198))+((r11*x2195))+(((-1.0)*r12*x2196))+(((-1.0)*x2184*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2200=((1.0)*sj0);
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2200)),IkReal(((((-1.0)*gconst10*r21*x2200))+((gconst11*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
CheckValue<IkReal> x2202=IKPowWithIntegerCheck(IKsign((((gconst11*r11))+((gconst10*r10)))),-1);
if(!x2202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2201.value)+(((1.5707963267949)*(x2202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2203=IKcos(j4);
IkReal x2204=((1.0)*x2203);
IkReal x2205=IKsin(j4);
IkReal x2206=(gconst10*x2205);
IkReal x2207=((1.0)*gconst11*x2205);
IkReal x2208=((1.0)*sj0);
IkReal x2209=(cj1*sj2);
IkReal x2210=(cj2*sj1);
IkReal x2211=(gconst10*sj3);
IkReal x2212=(gconst11*sj3);
IkReal x2213=(cj3*x2205);
IkReal x2214=(cj3*gconst10*x2203);
IkReal x2215=((1.0)*cj3*gconst11*x2203);
IkReal x2216=(sj1*sj2);
IkReal x2217=((1.0)*cj1*cj2);
IkReal x2218=(cj3*gconst10);
IkReal x2219=(cj3*gconst11);
IkReal x2220=((1.0)*sj3*x2205);
IkReal x2221=(gconst11*sj3*x2203);
IkReal x2222=((1.0)*gconst10*sj3*x2203);
IkReal x2223=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2204))+(((-1.0)*r20*x2207))+((r21*x2206)));
evalcond[1]=((((-1.0)*r10*x2207))+(((-1.0)*r12*x2204))+cj0+((r11*x2206)));
evalcond[2]=((((-1.0)*r02*x2204))+(((-1.0)*r00*x2207))+(((-1.0)*x2208))+((r01*x2206)));
evalcond[3]=((((-1.0)*r20*x2215))+((r22*x2213))+x2210+((r21*x2212))+((r21*x2214))+x2209+((r20*x2211)));
evalcond[4]=((((-1.0)*x2217))+((r21*x2219))+(((-1.0)*r22*x2220))+((r20*x2221))+x2216+((r20*x2218))+(((-1.0)*r21*x2222)));
evalcond[5]=(((r01*x2212))+((cj0*x2216))+((r02*x2213))+((r00*x2211))+(((-1.0)*r00*x2215))+(((-1.0)*cj0*x2217))+((r01*x2214)));
evalcond[6]=(((sj0*x2216))+((r10*x2211))+((r11*x2214))+((r12*x2213))+(((-1.0)*cj1*cj2*x2208))+((r11*x2212))+(((-1.0)*r10*x2215)));
evalcond[7]=((((-1.0)*r01*x2222))+((r01*x2219))+(((-1.0)*r02*x2220))+(((-1.0)*x2209*x2223))+((r00*x2221))+(((-1.0)*x2210*x2223))+((r00*x2218)));
evalcond[8]=(((r11*x2219))+(((-1.0)*r11*x2222))+((r10*x2218))+((r10*x2221))+(((-1.0)*r12*x2220))+(((-1.0)*x2208*x2210))+(((-1.0)*x2208*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2224=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2224;
j4eval[1]=IKsign(x2224);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2225=((1.0)*sj5);
IkReal x2226=((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2225)));
j4eval[0]=x2226;
j4eval[1]=((IKabs(((((-1.0)*r11*x2225))+((cj5*r10)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2227=(r01*((cj3*r21)));
IkReal x2228=cj5*cj5;
IkReal x2229=((1.0)*cj5*sj5);
IkReal x2230=((((-1.0)*cj3*r01*r20*x2229))+((cj3*r02*r22))+x2227+((cj3*r00*r20*x2228))+(((-1.0)*cj3*r00*r21*x2229))+(((-1.0)*x2227*x2228)));
j4eval[0]=x2230;
j4eval[1]=IKsign(x2230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2231=(r01*((cj3*r21)));
IkReal x2232=cj5*cj5;
IkReal x2233=(cj5*sj5);
IkReal x2234=((1.0)*cj5*r01*sj3);
IkReal x2235=((1.0)*r00*sj3);
IkReal x2236=(sj3*x2232);
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2234))+(((-1.0)*r22*sj5*x2235)))),IkReal(((((-1.0)*r21*sj5*x2234))+(((-1.0)*r21*x2235))+((r00*r21*x2236))+((r00*r20*sj3*x2233))+((r01*r20*x2236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238=IKPowWithIntegerCheck(IKsign((((cj3*r02*r22))+(((-1.0)*x2231*x2232))+(((-1.0)*cj3*cj5*r01*r20*sj5))+((cj3*r00*r20*x2232))+x2231+(((-1.0)*cj3*r00*r21*x2233)))),-1);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2237.value)+(((1.5707963267949)*(x2238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2239=IKcos(j4);
IkReal x2240=((1.0)*x2239);
IkReal x2241=IKsin(j4);
IkReal x2242=(sj5*x2241);
IkReal x2243=((1.0)*cj5*x2241);
IkReal x2244=(cj5*sj3);
IkReal x2245=(sj3*sj5);
IkReal x2246=(cj3*x2241);
IkReal x2247=(cj3*sj5*x2239);
IkReal x2248=((1.0)*cj3*cj5*x2239);
IkReal x2249=(cj3*cj5);
IkReal x2250=(cj3*sj5);
IkReal x2251=((1.0)*sj3*x2241);
IkReal x2252=(cj5*sj3*x2239);
IkReal x2253=((1.0)*sj3*sj5*x2239);
IkReal x2254=(cj1*sj2);
IkReal x2255=(cj2*sj1);
IkReal x2256=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2242))+(((-1.0)*r20*x2243))+(((-1.0)*r22*x2240)));
evalcond[1]=(((r11*x2242))+(((-1.0)*r10*x2243))+(((-1.0)*r12*x2240)));
evalcond[2]=((-1.0)+((r01*x2242))+(((-1.0)*r02*x2240))+(((-1.0)*r00*x2243)));
evalcond[3]=(((r02*x2246))+(((-1.0)*r00*x2248))+((r01*x2244))+((r00*x2245))+((r01*x2247)));
evalcond[4]=(((r01*x2249))+((r00*x2250))+(((-1.0)*r01*x2253))+((r00*x2252))+(((-1.0)*r02*x2251)));
evalcond[5]=((((-1.0)*r20*x2248))+((r20*x2245))+((r21*x2244))+x2254+x2255+((r22*x2246))+((r21*x2247)));
evalcond[6]=(((r12*x2246))+(((-1.0)*r10*x2248))+((r10*x2245))+((r11*x2244))+((r11*x2247))+x2256);
evalcond[7]=(((r20*x2250))+(((-1.0)*r21*x2253))+(((-1.0)*r22*x2251))+x2256+((r21*x2249))+((r20*x2252)));
evalcond[8]=((((-1.0)*x2254))+((r10*x2250))+(((-1.0)*x2255))+(((-1.0)*r11*x2253))+(((-1.0)*r12*x2251))+((r11*x2249))+((r10*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2257=((1.0)*sj5);
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2257)))),-1);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r12)))),IkReal(((((-1.0)*r11*x2257))+((cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2258.value)))+(x2259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2260=IKcos(j4);
IkReal x2261=((1.0)*x2260);
IkReal x2262=IKsin(j4);
IkReal x2263=(sj5*x2262);
IkReal x2264=((1.0)*cj5*x2262);
IkReal x2265=(cj5*sj3);
IkReal x2266=(sj3*sj5);
IkReal x2267=(cj3*x2262);
IkReal x2268=(cj3*sj5*x2260);
IkReal x2269=((1.0)*cj3*cj5*x2260);
IkReal x2270=(cj3*cj5);
IkReal x2271=(cj3*sj5);
IkReal x2272=((1.0)*sj3*x2262);
IkReal x2273=(cj5*sj3*x2260);
IkReal x2274=((1.0)*sj3*sj5*x2260);
IkReal x2275=(cj1*sj2);
IkReal x2276=(cj2*sj1);
IkReal x2277=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2263))+(((-1.0)*r22*x2261))+(((-1.0)*r20*x2264)));
evalcond[1]=((((-1.0)*r10*x2264))+((r11*x2263))+(((-1.0)*r12*x2261)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2261))+((r01*x2263))+(((-1.0)*r00*x2264)));
evalcond[3]=(((r01*x2268))+((r01*x2265))+((r00*x2266))+(((-1.0)*r00*x2269))+((r02*x2267)));
evalcond[4]=((((-1.0)*r02*x2272))+((r00*x2273))+((r00*x2271))+(((-1.0)*r01*x2274))+((r01*x2270)));
evalcond[5]=((((-1.0)*r20*x2269))+((r21*x2265))+((r20*x2266))+x2276+x2275+((r22*x2267))+((r21*x2268)));
evalcond[6]=(((r10*x2266))+((r11*x2265))+(((-1.0)*r10*x2269))+((r12*x2267))+((r11*x2268))+x2277);
evalcond[7]=(((r20*x2273))+((r20*x2271))+(((-1.0)*r21*x2274))+(((-1.0)*r22*x2272))+x2277+((r21*x2270)));
evalcond[8]=(((r10*x2273))+(((-1.0)*r12*x2272))+(((-1.0)*r11*x2274))+((r10*x2271))+(((-1.0)*x2275))+(((-1.0)*x2276))+((r11*x2270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2278.valid){
continue;
}
CheckValue<IkReal> x2279 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2278.value)))+(x2279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2280=IKcos(j4);
IkReal x2281=((1.0)*x2280);
IkReal x2282=IKsin(j4);
IkReal x2283=(sj5*x2282);
IkReal x2284=((1.0)*cj5*x2282);
IkReal x2285=(cj5*sj3);
IkReal x2286=(sj3*sj5);
IkReal x2287=(cj3*x2282);
IkReal x2288=(cj3*sj5*x2280);
IkReal x2289=((1.0)*cj3*cj5*x2280);
IkReal x2290=(cj3*cj5);
IkReal x2291=(cj3*sj5);
IkReal x2292=((1.0)*sj3*x2282);
IkReal x2293=(cj5*sj3*x2280);
IkReal x2294=((1.0)*sj3*sj5*x2280);
IkReal x2295=(cj1*sj2);
IkReal x2296=(cj2*sj1);
IkReal x2297=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2284))+(((-1.0)*r22*x2281))+((r21*x2283)));
evalcond[1]=((((-1.0)*r12*x2281))+((r11*x2283))+(((-1.0)*r10*x2284)));
evalcond[2]=((-1.0)+((r01*x2283))+(((-1.0)*r02*x2281))+(((-1.0)*r00*x2284)));
evalcond[3]=(((r01*x2288))+((r01*x2285))+((r02*x2287))+(((-1.0)*r00*x2289))+((r00*x2286)));
evalcond[4]=((((-1.0)*r01*x2294))+((r01*x2290))+(((-1.0)*r02*x2292))+((r00*x2291))+((r00*x2293)));
evalcond[5]=(x2296+x2295+((r20*x2286))+((r21*x2288))+((r22*x2287))+(((-1.0)*r20*x2289))+((r21*x2285)));
evalcond[6]=((((-1.0)*r10*x2289))+((r11*x2288))+x2297+((r12*x2287))+((r10*x2286))+((r11*x2285)));
evalcond[7]=(((r20*x2293))+x2297+(((-1.0)*r22*x2292))+((r21*x2290))+((r20*x2291))+(((-1.0)*r21*x2294)));
evalcond[8]=((((-1.0)*r12*x2292))+((r11*x2290))+(((-1.0)*r11*x2294))+(((-1.0)*x2296))+(((-1.0)*x2295))+((r10*x2293))+((r10*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2298=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2298;
j4eval[1]=IKsign(x2298);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2299=((1.0)*cj5);
IkReal x2300=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2299)));
j4eval[0]=x2300;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2299))))));
j4eval[2]=IKsign(x2300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2301=(r01*((cj3*r21)));
IkReal x2302=cj5*cj5;
IkReal x2303=((1.0)*cj5*sj5);
IkReal x2304=(((cj3*r02*r22))+((cj3*r00*r20*x2302))+(((-1.0)*cj3*r00*r21*x2303))+(((-1.0)*cj3*r01*r20*x2303))+x2301+(((-1.0)*x2301*x2302)));
j4eval[0]=x2304;
j4eval[1]=IKsign(x2304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2305=(r01*((cj3*r21)));
IkReal x2306=cj5*cj5;
IkReal x2307=(cj5*sj5);
IkReal x2308=((1.0)*cj5*r01*sj3);
IkReal x2309=((1.0)*r00*sj3);
IkReal x2310=(sj3*x2306);
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign((((cj3*r02*r22))+(((-1.0)*cj3*cj5*r01*r20*sj5))+(((-1.0)*cj3*r00*r21*x2307))+((cj3*r00*r20*x2306))+(((-1.0)*x2305*x2306))+x2305)),-1);
if(!x2311.valid){
continue;
}
CheckValue<IkReal> x2312 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2309))+(((-1.0)*r22*x2308)))),IkReal((((r00*r20*sj3*x2307))+((r00*r21*x2310))+(((-1.0)*r21*sj5*x2308))+((r01*r20*x2310))+(((-1.0)*r21*x2309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2311.value)))+(x2312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2313=IKcos(j4);
IkReal x2314=((1.0)*x2313);
IkReal x2315=IKsin(j4);
IkReal x2316=(sj5*x2315);
IkReal x2317=((1.0)*cj5*x2315);
IkReal x2318=(cj5*sj3);
IkReal x2319=(sj3*sj5);
IkReal x2320=(cj3*x2315);
IkReal x2321=(cj3*sj5*x2313);
IkReal x2322=((1.0)*cj3*cj5*x2313);
IkReal x2323=(cj3*cj5);
IkReal x2324=(cj3*sj5);
IkReal x2325=((1.0)*sj3*x2315);
IkReal x2326=(cj5*sj3*x2313);
IkReal x2327=((1.0)*sj3*sj5*x2313);
IkReal x2328=(((cj1*sj2))+((cj2*sj1)));
IkReal x2329=(cj1*cj2);
IkReal x2330=(sj1*sj2);
evalcond[0]=(((r21*x2316))+(((-1.0)*r22*x2314))+(((-1.0)*r20*x2317)));
evalcond[1]=((((-1.0)*r12*x2314))+(((-1.0)*r10*x2317))+((r11*x2316)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2314))+(((-1.0)*r00*x2317))+((r01*x2316)));
evalcond[3]=(((r02*x2320))+((r01*x2321))+(((-1.0)*r00*x2322))+((r00*x2319))+((r01*x2318)));
evalcond[4]=(((r00*x2324))+(((-1.0)*r01*x2327))+(((-1.0)*r02*x2325))+((r01*x2323))+((r00*x2326)));
evalcond[5]=((((-1.0)*r20*x2322))+((r21*x2318))+((r20*x2319))+x2328+((r21*x2321))+((r22*x2320)));
evalcond[6]=(((r11*x2323))+((r10*x2324))+x2328+(((-1.0)*r12*x2325))+((r10*x2326))+(((-1.0)*r11*x2327)));
evalcond[7]=((((-1.0)*r10*x2322))+((r11*x2318))+((r11*x2321))+((r12*x2320))+((r10*x2319))+x2329+(((-1.0)*x2330)));
evalcond[8]=((((-1.0)*r21*x2327))+(((-1.0)*x2329))+((r21*x2323))+(((-1.0)*r22*x2325))+((r20*x2326))+x2330+((r20*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2331=((1.0)*cj5);
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2331))+(((-1.0)*(1.0)*r20*sj5)))),-1);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2332.value)+(((1.5707963267949)*(x2333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2334=IKcos(j4);
IkReal x2335=((1.0)*x2334);
IkReal x2336=IKsin(j4);
IkReal x2337=(sj5*x2336);
IkReal x2338=((1.0)*cj5*x2336);
IkReal x2339=(cj5*sj3);
IkReal x2340=(sj3*sj5);
IkReal x2341=(cj3*x2336);
IkReal x2342=(cj3*sj5*x2334);
IkReal x2343=((1.0)*cj3*cj5*x2334);
IkReal x2344=(cj3*cj5);
IkReal x2345=(cj3*sj5);
IkReal x2346=((1.0)*sj3*x2336);
IkReal x2347=(cj5*sj3*x2334);
IkReal x2348=((1.0)*sj3*sj5*x2334);
IkReal x2349=(((cj1*sj2))+((cj2*sj1)));
IkReal x2350=(cj1*cj2);
IkReal x2351=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2335))+((r21*x2337))+(((-1.0)*r20*x2338)));
evalcond[1]=((((-1.0)*r12*x2335))+(((-1.0)*r10*x2338))+((r11*x2337)));
evalcond[2]=((1.0)+(((-1.0)*r00*x2338))+(((-1.0)*r02*x2335))+((r01*x2337)));
evalcond[3]=((((-1.0)*r00*x2343))+((r01*x2339))+((r02*x2341))+((r01*x2342))+((r00*x2340)));
evalcond[4]=((((-1.0)*r02*x2346))+(((-1.0)*r01*x2348))+((r01*x2344))+((r00*x2347))+((r00*x2345)));
evalcond[5]=((((-1.0)*r20*x2343))+((r21*x2342))+((r21*x2339))+((r22*x2341))+x2349+((r20*x2340)));
evalcond[6]=((((-1.0)*r11*x2348))+((r10*x2347))+((r10*x2345))+x2349+((r11*x2344))+(((-1.0)*r12*x2346)));
evalcond[7]=(((r12*x2341))+(((-1.0)*x2351))+((r11*x2342))+x2350+((r10*x2340))+(((-1.0)*r10*x2343))+((r11*x2339)));
evalcond[8]=((((-1.0)*x2350))+((r21*x2344))+((r20*x2345))+x2351+(((-1.0)*r22*x2346))+(((-1.0)*r21*x2348))+((r20*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2352.value)+(((1.5707963267949)*(x2353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2354=IKcos(j4);
IkReal x2355=((1.0)*x2354);
IkReal x2356=IKsin(j4);
IkReal x2357=(sj5*x2356);
IkReal x2358=((1.0)*cj5*x2356);
IkReal x2359=(cj5*sj3);
IkReal x2360=(sj3*sj5);
IkReal x2361=(cj3*x2356);
IkReal x2362=(cj3*sj5*x2354);
IkReal x2363=((1.0)*cj3*cj5*x2354);
IkReal x2364=(cj3*cj5);
IkReal x2365=(cj3*sj5);
IkReal x2366=((1.0)*sj3*x2356);
IkReal x2367=(cj5*sj3*x2354);
IkReal x2368=((1.0)*sj3*sj5*x2354);
IkReal x2369=(((cj1*sj2))+((cj2*sj1)));
IkReal x2370=(cj1*cj2);
IkReal x2371=(sj1*sj2);
evalcond[0]=(((r21*x2357))+(((-1.0)*r20*x2358))+(((-1.0)*r22*x2355)));
evalcond[1]=((((-1.0)*r12*x2355))+(((-1.0)*r10*x2358))+((r11*x2357)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2355))+((r01*x2357))+(((-1.0)*r00*x2358)));
evalcond[3]=(((r02*x2361))+((r01*x2359))+((r00*x2360))+(((-1.0)*r00*x2363))+((r01*x2362)));
evalcond[4]=(((r01*x2364))+(((-1.0)*r02*x2366))+(((-1.0)*r01*x2368))+((r00*x2365))+((r00*x2367)));
evalcond[5]=((((-1.0)*r20*x2363))+((r21*x2359))+x2369+((r22*x2361))+((r21*x2362))+((r20*x2360)));
evalcond[6]=(x2369+(((-1.0)*r12*x2366))+((r10*x2367))+((r10*x2365))+(((-1.0)*r11*x2368))+((r11*x2364)));
evalcond[7]=((((-1.0)*x2371))+((r11*x2362))+(((-1.0)*r10*x2363))+x2370+((r10*x2360))+((r11*x2359))+((r12*x2361)));
evalcond[8]=((((-1.0)*r22*x2366))+(((-1.0)*x2370))+((r21*x2364))+((r20*x2365))+x2371+((r20*x2367))+(((-1.0)*r21*x2368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2373 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2373)==0){
continue;
}
IkReal x2372=pow(x2373,-0.5);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x2374.value))));
IkReal gconst13=((-1.0)*r11*x2372);
IkReal gconst14=(r10*x2372);
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2375.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal x2376=((-1.0)*(((1.0)*(x2378.value))));
IkReal x2377=x2372;
sj5=gconst13;
cj5=gconst14;
j5=x2376;
IkReal gconst12=x2376;
IkReal gconst13=((-1.0)*r11*x2377);
IkReal gconst14=(r10*x2377);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2381 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2381.valid){
continue;
}
IkReal x2379=((-1.0)*(((1.0)*(x2381.value))));
IkReal x2380=x2372;
sj5=gconst13;
cj5=gconst14;
j5=x2379;
IkReal gconst12=x2379;
IkReal gconst13=((-1.0)*r11*x2380);
IkReal gconst14=(r10*x2380);
IkReal x2382=((1.0)*cj0*r02);
IkReal x2383=((1.0)*sj0);
IkReal x2384=r12*r12;
IkReal x2386 = ((1.0)+(((-1.0)*x2384)));
if(IKabs(x2386)==0){
continue;
}
IkReal x2385=pow(x2386,-0.5);
j4eval[0]=((IKabs(((((-1.0)*r12*x2383))+(((-1.0)*x2382)))))+(IKabs((((sj0*x2385))+(((-1.0)*x2383*x2384*x2385))+(((-1.0)*r12*x2382*x2385))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2389 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2389.valid){
continue;
}
IkReal x2387=((-1.0)*(((1.0)*(x2389.value))));
IkReal x2388=x2372;
sj5=gconst13;
cj5=gconst14;
j5=x2387;
IkReal gconst12=x2387;
IkReal gconst13=((-1.0)*r11*x2388);
IkReal gconst14=(r10*x2388);
CheckValue<IkReal> x2392=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2392.valid){
continue;
}
IkReal x2390=(sj3*(x2392.value));
IkReal x2391=(((x2390*(r11*r11)*(r21*r21)))+(((2.0)*r10*r11*r20*r21*x2390))+((sj3*(r22*r22)))+((x2390*(r10*r10)*(r20*r20))));
j4eval[0]=x2391;
j4eval[1]=IKsign(x2391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2393=(gconst13*r21);
IkReal x2394=gconst13*gconst13;
IkReal x2395=r21*r21;
IkReal x2396=gconst14*gconst14;
IkReal x2397=r20*r20;
IkReal x2398=(sj1*sj2);
IkReal x2399=((1.0)*cj1*cj2);
IkReal x2400=(cj3*r22);
IkReal x2401=(gconst14*r20);
IkReal x2402=(cj3*gconst13*gconst14);
IkReal x2403=(cj3*r20*r21);
CheckValue<IkReal> x2404 = IKatan2WithCheck(IkReal((((gconst14*r21*x2400))+((gconst13*r20*x2400))+((r22*x2398))+(((-1.0)*r22*x2399)))),IkReal(((((-1.0)*x2393*x2399))+(((-1.0)*x2397*x2402))+((x2393*x2398))+((x2395*x2402))+((cj1*cj2*x2401))+(((-1.0)*sj1*sj2*x2401))+(((-1.0)*x2396*x2403))+((x2394*x2403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2404.valid){
continue;
}
CheckValue<IkReal> x2405=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*gconst14*r20*sj3*x2393))+((sj3*x2394*x2395))+((sj3*x2396*x2397)))),-1);
if(!x2405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2404.value)+(((1.5707963267949)*(x2405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2406=IKcos(j4);
IkReal x2407=((1.0)*x2406);
IkReal x2408=IKsin(j4);
IkReal x2409=(gconst13*x2408);
IkReal x2410=((1.0)*gconst14*x2408);
IkReal x2411=((1.0)*sj0);
IkReal x2412=(cj1*sj2);
IkReal x2413=(cj2*sj1);
IkReal x2414=(gconst13*sj3);
IkReal x2415=(gconst14*sj3);
IkReal x2416=(cj3*x2408);
IkReal x2417=(cj3*gconst13*x2406);
IkReal x2418=((1.0)*cj3*gconst14*x2406);
IkReal x2419=(sj1*sj2);
IkReal x2420=((1.0)*cj1*cj2);
IkReal x2421=(cj3*gconst13);
IkReal x2422=(cj3*gconst14);
IkReal x2423=((1.0)*sj3*x2408);
IkReal x2424=(gconst14*sj3*x2406);
IkReal x2425=((1.0)*gconst13*sj3*x2406);
IkReal x2426=((1.0)*cj0);
evalcond[0]=(((r21*x2409))+(((-1.0)*r20*x2410))+(((-1.0)*r22*x2407)));
evalcond[1]=((((-1.0)*r10*x2410))+cj0+((r11*x2409))+(((-1.0)*r12*x2407)));
evalcond[2]=((((-1.0)*x2411))+(((-1.0)*r00*x2410))+(((-1.0)*r02*x2407))+((r01*x2409)));
evalcond[3]=(((r21*x2415))+((r20*x2414))+(((-1.0)*r20*x2418))+((r22*x2416))+((r21*x2417))+x2413+x2412);
evalcond[4]=(((r21*x2422))+(((-1.0)*r21*x2425))+((r20*x2424))+(((-1.0)*r22*x2423))+x2419+((r20*x2421))+(((-1.0)*x2420)));
evalcond[5]=(((r02*x2416))+(((-1.0)*cj0*x2420))+((r01*x2415))+((r01*x2417))+((cj0*x2419))+((r00*x2414))+(((-1.0)*r00*x2418)));
evalcond[6]=((((-1.0)*r10*x2418))+((sj0*x2419))+((r11*x2417))+((r11*x2415))+(((-1.0)*cj1*cj2*x2411))+((r12*x2416))+((r10*x2414)));
evalcond[7]=(((r00*x2421))+(((-1.0)*r01*x2425))+((r00*x2424))+((r01*x2422))+(((-1.0)*x2413*x2426))+(((-1.0)*x2412*x2426))+(((-1.0)*r02*x2423)));
evalcond[8]=(((r11*x2422))+((r10*x2424))+(((-1.0)*r12*x2423))+(((-1.0)*x2411*x2412))+((r10*x2421))+(((-1.0)*r11*x2425))+(((-1.0)*x2411*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2427=((1.0)*gconst13);
IkReal x2428=((1.0)*cj0);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2428))+(((-1.0)*(1.0)*r12*sj0)))),IkReal((((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x2428))+(((-1.0)*r11*sj0*x2427))+((cj0*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2427))+(((-1.0)*(1.0)*gconst14*r21)))),-1);
if(!x2430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2431=IKcos(j4);
IkReal x2432=((1.0)*x2431);
IkReal x2433=IKsin(j4);
IkReal x2434=(gconst13*x2433);
IkReal x2435=((1.0)*gconst14*x2433);
IkReal x2436=((1.0)*sj0);
IkReal x2437=(cj1*sj2);
IkReal x2438=(cj2*sj1);
IkReal x2439=(gconst13*sj3);
IkReal x2440=(gconst14*sj3);
IkReal x2441=(cj3*x2433);
IkReal x2442=(cj3*gconst13*x2431);
IkReal x2443=((1.0)*cj3*gconst14*x2431);
IkReal x2444=(sj1*sj2);
IkReal x2445=((1.0)*cj1*cj2);
IkReal x2446=(cj3*gconst13);
IkReal x2447=(cj3*gconst14);
IkReal x2448=((1.0)*sj3*x2433);
IkReal x2449=(gconst14*sj3*x2431);
IkReal x2450=((1.0)*gconst13*sj3*x2431);
IkReal x2451=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2432))+(((-1.0)*r20*x2435))+((r21*x2434)));
evalcond[1]=(((r11*x2434))+(((-1.0)*r12*x2432))+(((-1.0)*r10*x2435))+cj0);
evalcond[2]=(((r01*x2434))+(((-1.0)*x2436))+(((-1.0)*r00*x2435))+(((-1.0)*r02*x2432)));
evalcond[3]=(((r20*x2439))+((r21*x2442))+((r22*x2441))+(((-1.0)*r20*x2443))+((r21*x2440))+x2437+x2438);
evalcond[4]=(((r21*x2447))+(((-1.0)*x2445))+(((-1.0)*r21*x2450))+x2444+((r20*x2449))+((r20*x2446))+(((-1.0)*r22*x2448)));
evalcond[5]=(((r00*x2439))+(((-1.0)*cj0*x2445))+(((-1.0)*r00*x2443))+((cj0*x2444))+((r01*x2442))+((r02*x2441))+((r01*x2440)));
evalcond[6]=(((r12*x2441))+((r11*x2442))+((r11*x2440))+(((-1.0)*cj1*cj2*x2436))+((r10*x2439))+(((-1.0)*r10*x2443))+((sj0*x2444)));
evalcond[7]=((((-1.0)*x2438*x2451))+((r00*x2446))+(((-1.0)*r01*x2450))+((r00*x2449))+(((-1.0)*x2437*x2451))+((r01*x2447))+(((-1.0)*r02*x2448)));
evalcond[8]=((((-1.0)*x2436*x2438))+(((-1.0)*r11*x2450))+((r10*x2449))+((r11*x2447))+(((-1.0)*r12*x2448))+(((-1.0)*x2436*x2437))+((r10*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2452=((1.0)*gconst14);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst13*r21))+(((-1.0)*cj0*r20*x2452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2452))+(((-1.0)*(1.0)*gconst13*r00)))),-1);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2453.value)+(((1.5707963267949)*(x2454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2455=IKcos(j4);
IkReal x2456=((1.0)*x2455);
IkReal x2457=IKsin(j4);
IkReal x2458=(gconst13*x2457);
IkReal x2459=((1.0)*gconst14*x2457);
IkReal x2460=((1.0)*sj0);
IkReal x2461=(cj1*sj2);
IkReal x2462=(cj2*sj1);
IkReal x2463=(gconst13*sj3);
IkReal x2464=(gconst14*sj3);
IkReal x2465=(cj3*x2457);
IkReal x2466=(cj3*gconst13*x2455);
IkReal x2467=((1.0)*cj3*gconst14*x2455);
IkReal x2468=(sj1*sj2);
IkReal x2469=((1.0)*cj1*cj2);
IkReal x2470=(cj3*gconst13);
IkReal x2471=(cj3*gconst14);
IkReal x2472=((1.0)*sj3*x2457);
IkReal x2473=(gconst14*sj3*x2455);
IkReal x2474=((1.0)*gconst13*sj3*x2455);
IkReal x2475=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2459))+(((-1.0)*r22*x2456))+((r21*x2458)));
evalcond[1]=((((-1.0)*r12*x2456))+(((-1.0)*r10*x2459))+cj0+((r11*x2458)));
evalcond[2]=((((-1.0)*x2460))+(((-1.0)*r02*x2456))+((r01*x2458))+(((-1.0)*r00*x2459)));
evalcond[3]=(((r21*x2466))+x2461+x2462+((r20*x2463))+(((-1.0)*r20*x2467))+((r22*x2465))+((r21*x2464)));
evalcond[4]=((((-1.0)*r22*x2472))+x2468+((r21*x2471))+(((-1.0)*r21*x2474))+((r20*x2470))+(((-1.0)*x2469))+((r20*x2473)));
evalcond[5]=(((r01*x2464))+((cj0*x2468))+((r01*x2466))+((r00*x2463))+(((-1.0)*r00*x2467))+((r02*x2465))+(((-1.0)*cj0*x2469)));
evalcond[6]=((((-1.0)*cj1*cj2*x2460))+((r12*x2465))+((r11*x2466))+((r11*x2464))+((r10*x2463))+((sj0*x2468))+(((-1.0)*r10*x2467)));
evalcond[7]=((((-1.0)*x2461*x2475))+(((-1.0)*r02*x2472))+(((-1.0)*r01*x2474))+((r01*x2471))+(((-1.0)*x2462*x2475))+((r00*x2473))+((r00*x2470)));
evalcond[8]=(((r11*x2471))+(((-1.0)*x2460*x2462))+((r10*x2473))+(((-1.0)*x2460*x2461))+(((-1.0)*r11*x2474))+((r10*x2470))+(((-1.0)*r12*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2477 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2477)==0){
continue;
}
IkReal x2476=((1.0)*(pow(x2477,-0.5)));
CheckValue<IkReal> x2478 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2478.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x2478.value))));
IkReal gconst16=(r11*x2476);
IkReal gconst17=((-1.0)*r10*x2476);
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2479.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2482 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2482.valid){
continue;
}
IkReal x2480=((-1.0)*(((1.0)*(x2482.value))));
IkReal x2481=x2476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2480);
IkReal gconst15=((3.14159265358979)+x2480);
IkReal gconst16=(r11*x2481);
IkReal gconst17=((-1.0)*r10*x2481);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
IkReal x2483=((-1.0)*(((1.0)*(x2485.value))));
IkReal x2484=x2476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2483);
IkReal gconst15=((3.14159265358979)+x2483);
IkReal gconst16=(r11*x2484);
IkReal gconst17=((-1.0)*r10*x2484);
IkReal x2486=((1.0)*cj0*r02);
IkReal x2487=((1.0)*sj0);
IkReal x2488=r12*r12;
IkReal x2491 = ((1.0)+(((-1.0)*x2488)));
if(IKabs(x2491)==0){
continue;
}
IkReal x2489=pow(x2491,-0.5);
IkReal x2490=(x2487*x2489);
j4eval[0]=((IKabs(((((-1.0)*r12*x2487))+(((-1.0)*x2486)))))+(IKabs((x2490+(((-1.0)*r12*x2486*x2489))+(((-1.0)*x2488*x2490))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
IkReal x2492=((-1.0)*(((1.0)*(x2494.value))));
IkReal x2493=x2476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2492);
IkReal gconst15=((3.14159265358979)+x2492);
IkReal gconst16=(r11*x2493);
IkReal gconst17=((-1.0)*r10*x2493);
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2497.valid){
continue;
}
IkReal x2495=x2497.value;
IkReal x2496=((1.0)*cj3*x2495);
j4eval[0]=IKsign(((((2.0)*cj3*r10*r11*r20*r21*x2495))+((x2496*(r10*r10)*(r20*r20)))+((cj3*(r22*r22)))+((x2496*(r11*r11)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2498=(gconst17*r20);
IkReal x2499=gconst16*gconst16;
IkReal x2500=r21*r21;
IkReal x2501=gconst17*gconst17;
IkReal x2502=r20*r20;
IkReal x2503=((1.0)*r22);
IkReal x2504=(cj1*sj2);
IkReal x2505=(cj2*sj1);
IkReal x2506=((1.0)*r22*sj3);
IkReal x2507=((1.0)*gconst16*r21);
IkReal x2508=(gconst16*gconst17*sj3);
IkReal x2509=(r20*r21*sj3);
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(IKsign((((cj3*x2501*x2502))+((cj3*x2499*x2500))+(((-2.0)*cj3*gconst16*r21*x2498))+((cj3*(r22*r22))))),-1);
if(!x2510.valid){
continue;
}
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((((-1.0)*x2503*x2504))+(((-1.0)*x2503*x2505))+(((-1.0)*gconst16*r20*x2506))+(((-1.0)*gconst17*r21*x2506)))),IkReal((((x2502*x2508))+((x2501*x2509))+(((-1.0)*x2499*x2509))+(((-1.0)*x2505*x2507))+(((-1.0)*x2504*x2507))+(((-1.0)*x2500*x2508))+((x2498*x2504))+((x2498*x2505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2510.value)))+(x2511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2512=IKcos(j4);
IkReal x2513=((1.0)*x2512);
IkReal x2514=IKsin(j4);
IkReal x2515=(gconst16*x2514);
IkReal x2516=((1.0)*gconst17*x2514);
IkReal x2517=((1.0)*sj0);
IkReal x2518=(cj1*sj2);
IkReal x2519=(cj2*sj1);
IkReal x2520=(gconst16*sj3);
IkReal x2521=(gconst17*sj3);
IkReal x2522=(cj3*x2514);
IkReal x2523=(cj3*gconst16*x2512);
IkReal x2524=((1.0)*cj3*gconst17*x2512);
IkReal x2525=(sj1*sj2);
IkReal x2526=((1.0)*cj1*cj2);
IkReal x2527=(cj3*gconst16);
IkReal x2528=(cj3*gconst17);
IkReal x2529=((1.0)*sj3*x2514);
IkReal x2530=(gconst17*sj3*x2512);
IkReal x2531=((1.0)*gconst16*sj3*x2512);
IkReal x2532=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2516))+((r21*x2515))+(((-1.0)*r22*x2513)));
evalcond[1]=((((-1.0)*r12*x2513))+((r11*x2515))+(((-1.0)*r10*x2516))+cj0);
evalcond[2]=((((-1.0)*r00*x2516))+(((-1.0)*r02*x2513))+(((-1.0)*x2517))+((r01*x2515)));
evalcond[3]=(((r20*x2520))+x2518+x2519+((r21*x2523))+(((-1.0)*r20*x2524))+((r21*x2521))+((r22*x2522)));
evalcond[4]=((((-1.0)*r21*x2531))+((r20*x2530))+x2525+(((-1.0)*x2526))+((r21*x2528))+((r20*x2527))+(((-1.0)*r22*x2529)));
evalcond[5]=((((-1.0)*cj0*x2526))+(((-1.0)*r00*x2524))+((cj0*x2525))+((r01*x2523))+((r02*x2522))+((r01*x2521))+((r00*x2520)));
evalcond[6]=(((r10*x2520))+((r11*x2523))+(((-1.0)*r10*x2524))+((r12*x2522))+((sj0*x2525))+((r11*x2521))+(((-1.0)*cj1*cj2*x2517)));
evalcond[7]=(((r00*x2527))+(((-1.0)*r01*x2531))+(((-1.0)*x2518*x2532))+((r01*x2528))+(((-1.0)*x2519*x2532))+(((-1.0)*r02*x2529))+((r00*x2530)));
evalcond[8]=((((-1.0)*x2517*x2518))+(((-1.0)*r11*x2531))+(((-1.0)*r12*x2529))+((r11*x2528))+((r10*x2527))+((r10*x2530))+(((-1.0)*x2517*x2519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2533=((1.0)*gconst16);
IkReal x2534=((1.0)*cj0);
CheckValue<IkReal> x2535=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst17*r21))+(((-1.0)*r20*x2533)))),-1);
if(!x2535.valid){
continue;
}
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r12*sj0))+(((-1.0)*r02*x2534)))),IkReal((((gconst17*r10*sj0))+(((-1.0)*r11*sj0*x2533))+((cj0*gconst17*r00))+(((-1.0)*gconst16*r01*x2534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2535.value)))+(x2536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2537=IKcos(j4);
IkReal x2538=((1.0)*x2537);
IkReal x2539=IKsin(j4);
IkReal x2540=(gconst16*x2539);
IkReal x2541=((1.0)*gconst17*x2539);
IkReal x2542=((1.0)*sj0);
IkReal x2543=(cj1*sj2);
IkReal x2544=(cj2*sj1);
IkReal x2545=(gconst16*sj3);
IkReal x2546=(gconst17*sj3);
IkReal x2547=(cj3*x2539);
IkReal x2548=(cj3*gconst16*x2537);
IkReal x2549=((1.0)*cj3*gconst17*x2537);
IkReal x2550=(sj1*sj2);
IkReal x2551=((1.0)*cj1*cj2);
IkReal x2552=(cj3*gconst16);
IkReal x2553=(cj3*gconst17);
IkReal x2554=((1.0)*sj3*x2539);
IkReal x2555=(gconst17*sj3*x2537);
IkReal x2556=((1.0)*gconst16*sj3*x2537);
IkReal x2557=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2538))+((r21*x2540))+(((-1.0)*r20*x2541)));
evalcond[1]=((((-1.0)*r12*x2538))+(((-1.0)*r10*x2541))+((r11*x2540))+cj0);
evalcond[2]=(((r01*x2540))+(((-1.0)*r00*x2541))+(((-1.0)*x2542))+(((-1.0)*r02*x2538)));
evalcond[3]=(((r20*x2545))+((r21*x2546))+(((-1.0)*r20*x2549))+((r22*x2547))+x2544+x2543+((r21*x2548)));
evalcond[4]=(x2550+(((-1.0)*x2551))+((r20*x2555))+(((-1.0)*r21*x2556))+((r20*x2552))+((r21*x2553))+(((-1.0)*r22*x2554)));
evalcond[5]=(((r01*x2546))+(((-1.0)*cj0*x2551))+(((-1.0)*r00*x2549))+((r00*x2545))+((cj0*x2550))+((r01*x2548))+((r02*x2547)));
evalcond[6]=(((r11*x2548))+((sj0*x2550))+((r10*x2545))+((r12*x2547))+(((-1.0)*cj1*cj2*x2542))+((r11*x2546))+(((-1.0)*r10*x2549)));
evalcond[7]=(((r00*x2552))+(((-1.0)*r01*x2556))+(((-1.0)*x2544*x2557))+(((-1.0)*x2543*x2557))+(((-1.0)*r02*x2554))+((r01*x2553))+((r00*x2555)));
evalcond[8]=((((-1.0)*x2542*x2543))+(((-1.0)*r11*x2556))+((r10*x2555))+((r10*x2552))+((r11*x2553))+(((-1.0)*x2542*x2544))+(((-1.0)*r12*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2558=((1.0)*gconst17);
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst16*r21))+(((-1.0)*cj0*r20*x2558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
CheckValue<IkReal> x2560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2558))+(((-1.0)*(1.0)*gconst16*r00)))),-1);
if(!x2560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2559.value)+(((1.5707963267949)*(x2560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2561=IKcos(j4);
IkReal x2562=((1.0)*x2561);
IkReal x2563=IKsin(j4);
IkReal x2564=(gconst16*x2563);
IkReal x2565=((1.0)*gconst17*x2563);
IkReal x2566=((1.0)*sj0);
IkReal x2567=(cj1*sj2);
IkReal x2568=(cj2*sj1);
IkReal x2569=(gconst16*sj3);
IkReal x2570=(gconst17*sj3);
IkReal x2571=(cj3*x2563);
IkReal x2572=(cj3*gconst16*x2561);
IkReal x2573=((1.0)*cj3*gconst17*x2561);
IkReal x2574=(sj1*sj2);
IkReal x2575=((1.0)*cj1*cj2);
IkReal x2576=(cj3*gconst16);
IkReal x2577=(cj3*gconst17);
IkReal x2578=((1.0)*sj3*x2563);
IkReal x2579=(gconst17*sj3*x2561);
IkReal x2580=((1.0)*gconst16*sj3*x2561);
IkReal x2581=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2565))+((r21*x2564))+(((-1.0)*r22*x2562)));
evalcond[1]=((((-1.0)*r10*x2565))+cj0+(((-1.0)*r12*x2562))+((r11*x2564)));
evalcond[2]=((((-1.0)*x2566))+(((-1.0)*r02*x2562))+((r01*x2564))+(((-1.0)*r00*x2565)));
evalcond[3]=(((r20*x2569))+x2567+x2568+((r22*x2571))+((r21*x2572))+(((-1.0)*r20*x2573))+((r21*x2570)));
evalcond[4]=(((r21*x2577))+(((-1.0)*r21*x2580))+((r20*x2579))+((r20*x2576))+x2574+(((-1.0)*r22*x2578))+(((-1.0)*x2575)));
evalcond[5]=(((r00*x2569))+(((-1.0)*cj0*x2575))+((r01*x2572))+((cj0*x2574))+((r01*x2570))+(((-1.0)*r00*x2573))+((r02*x2571)));
evalcond[6]=((((-1.0)*cj1*cj2*x2566))+((r10*x2569))+((r12*x2571))+((r11*x2570))+(((-1.0)*r10*x2573))+((sj0*x2574))+((r11*x2572)));
evalcond[7]=(((r01*x2577))+(((-1.0)*x2567*x2581))+((r00*x2579))+((r00*x2576))+(((-1.0)*r01*x2580))+(((-1.0)*r02*x2578))+(((-1.0)*x2568*x2581)));
evalcond[8]=((((-1.0)*x2566*x2567))+(((-1.0)*r11*x2580))+((r10*x2579))+((r10*x2576))+(((-1.0)*r12*x2578))+((r11*x2577))+(((-1.0)*x2566*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2582=(((r20*sj5))+((cj5*r21)));
j4eval[0]=x2582;
j4eval[1]=IKsign(x2582);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2583=((1.0)*cj5);
IkReal x2584=((((-1.0)*r01*x2583))+(((-1.0)*(1.0)*r00*sj5)));
j4eval[0]=x2584;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2583)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2585=(r11*((cj3*r21)));
IkReal x2586=cj5*cj5;
IkReal x2587=((1.0)*cj5*sj5);
IkReal x2588=((((-1.0)*cj3*r10*r21*x2587))+((cj3*r12*r22))+(((-1.0)*x2585*x2586))+x2585+(((-1.0)*cj3*r11*r20*x2587))+((cj3*r10*r20*x2586)));
j4eval[0]=x2588;
j4eval[1]=IKsign(x2588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2589=(r11*((cj3*r21)));
IkReal x2590=cj5*cj5;
IkReal x2591=(cj5*sj5);
IkReal x2592=((1.0)*cj5*r11*sj3);
IkReal x2593=((1.0)*r10*sj3);
IkReal x2594=(sj3*x2590);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2592))+(((-1.0)*r22*sj5*x2593)))),IkReal((((r11*r20*x2594))+(((-1.0)*r21*sj5*x2592))+((r10*r20*sj3*x2591))+(((-1.0)*r21*x2593))+((r10*r21*x2594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r10*r21*x2591))+((cj3*r12*r22))+((cj3*r10*r20*x2590))+x2589+(((-1.0)*cj3*cj5*r11*r20*sj5))+(((-1.0)*x2589*x2590)))),-1);
if(!x2596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2595.value)+(((1.5707963267949)*(x2596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2597=IKcos(j4);
IkReal x2598=((1.0)*x2597);
IkReal x2599=IKsin(j4);
IkReal x2600=(sj5*x2599);
IkReal x2601=((1.0)*cj5*x2599);
IkReal x2602=(cj5*sj3);
IkReal x2603=(sj3*sj5);
IkReal x2604=(cj3*x2599);
IkReal x2605=(cj3*sj5*x2597);
IkReal x2606=((1.0)*cj3*cj5*x2597);
IkReal x2607=(cj3*cj5);
IkReal x2608=(cj3*sj5);
IkReal x2609=((1.0)*sj3*x2599);
IkReal x2610=(cj5*sj3*x2597);
IkReal x2611=((1.0)*sj3*sj5*x2597);
IkReal x2612=(cj1*sj2);
IkReal x2613=(cj2*sj1);
IkReal x2614=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2601))+((r21*x2600))+(((-1.0)*r22*x2598)));
evalcond[1]=(((r01*x2600))+(((-1.0)*r00*x2601))+(((-1.0)*r02*x2598)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2601))+(((-1.0)*r12*x2598))+((r11*x2600)));
evalcond[3]=(((r11*x2605))+((r10*x2603))+(((-1.0)*r10*x2606))+((r12*x2604))+((r11*x2602)));
evalcond[4]=(((r10*x2610))+((r10*x2608))+(((-1.0)*r12*x2609))+(((-1.0)*r11*x2611))+((r11*x2607)));
evalcond[5]=(((r22*x2604))+x2613+x2612+((r21*x2605))+((r21*x2602))+(((-1.0)*r20*x2606))+((r20*x2603)));
evalcond[6]=((((-1.0)*r00*x2606))+((r02*x2604))+((r01*x2605))+x2614+((r01*x2602))+((r00*x2603)));
evalcond[7]=(((r20*x2610))+(((-1.0)*r21*x2611))+((r20*x2608))+x2614+((r21*x2607))+(((-1.0)*r22*x2609)));
evalcond[8]=((((-1.0)*x2613))+((r01*x2607))+((r00*x2610))+(((-1.0)*r02*x2609))+(((-1.0)*x2612))+(((-1.0)*r01*x2611))+((r00*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*cj5);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2615)))),-1);
if(!x2617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2618=IKcos(j4);
IkReal x2619=((1.0)*x2618);
IkReal x2620=IKsin(j4);
IkReal x2621=(sj5*x2620);
IkReal x2622=((1.0)*cj5*x2620);
IkReal x2623=(cj5*sj3);
IkReal x2624=(sj3*sj5);
IkReal x2625=(cj3*x2620);
IkReal x2626=(cj3*sj5*x2618);
IkReal x2627=((1.0)*cj3*cj5*x2618);
IkReal x2628=(cj3*cj5);
IkReal x2629=(cj3*sj5);
IkReal x2630=((1.0)*sj3*x2620);
IkReal x2631=(cj5*sj3*x2618);
IkReal x2632=((1.0)*sj3*sj5*x2618);
IkReal x2633=(cj1*sj2);
IkReal x2634=(cj2*sj1);
IkReal x2635=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2619))+(((-1.0)*r20*x2622))+((r21*x2621)));
evalcond[1]=((((-1.0)*r00*x2622))+((r01*x2621))+(((-1.0)*r02*x2619)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2619))+(((-1.0)*r10*x2622))+((r11*x2621)));
evalcond[3]=(((r11*x2623))+((r11*x2626))+((r12*x2625))+((r10*x2624))+(((-1.0)*r10*x2627)));
evalcond[4]=((((-1.0)*r12*x2630))+((r10*x2631))+((r10*x2629))+(((-1.0)*r11*x2632))+((r11*x2628)));
evalcond[5]=(((r22*x2625))+((r21*x2626))+((r21*x2623))+(((-1.0)*r20*x2627))+((r20*x2624))+x2633+x2634);
evalcond[6]=(((r01*x2623))+((r01*x2626))+((r02*x2625))+(((-1.0)*r00*x2627))+((r00*x2624))+x2635);
evalcond[7]=(((r20*x2629))+((r20*x2631))+(((-1.0)*r22*x2630))+(((-1.0)*r21*x2632))+((r21*x2628))+x2635);
evalcond[8]=((((-1.0)*x2634))+(((-1.0)*r02*x2630))+((r00*x2631))+(((-1.0)*x2633))+(((-1.0)*r01*x2632))+((r01*x2628))+((r00*x2629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(IKsign((((r20*sj5))+((cj5*r21)))),-1);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2636.value)))+(x2637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2638=IKcos(j4);
IkReal x2639=((1.0)*x2638);
IkReal x2640=IKsin(j4);
IkReal x2641=(sj5*x2640);
IkReal x2642=((1.0)*cj5*x2640);
IkReal x2643=(cj5*sj3);
IkReal x2644=(sj3*sj5);
IkReal x2645=(cj3*x2640);
IkReal x2646=(cj3*sj5*x2638);
IkReal x2647=((1.0)*cj3*cj5*x2638);
IkReal x2648=(cj3*cj5);
IkReal x2649=(cj3*sj5);
IkReal x2650=((1.0)*sj3*x2640);
IkReal x2651=(cj5*sj3*x2638);
IkReal x2652=((1.0)*sj3*sj5*x2638);
IkReal x2653=(cj1*sj2);
IkReal x2654=(cj2*sj1);
IkReal x2655=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r20*x2642))+((r21*x2641))+(((-1.0)*r22*x2639)));
evalcond[1]=(((r01*x2641))+(((-1.0)*r02*x2639))+(((-1.0)*r00*x2642)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2639))+(((-1.0)*r10*x2642))+((r11*x2641)));
evalcond[3]=(((r12*x2645))+(((-1.0)*r10*x2647))+((r10*x2644))+((r11*x2646))+((r11*x2643)));
evalcond[4]=(((r11*x2648))+(((-1.0)*r11*x2652))+(((-1.0)*r12*x2650))+((r10*x2651))+((r10*x2649)));
evalcond[5]=(((r22*x2645))+((r20*x2644))+((r21*x2643))+(((-1.0)*r20*x2647))+((r21*x2646))+x2654+x2653);
evalcond[6]=(((r01*x2643))+((r01*x2646))+(((-1.0)*r00*x2647))+((r02*x2645))+((r00*x2644))+x2655);
evalcond[7]=((((-1.0)*r22*x2650))+((r21*x2648))+((r20*x2649))+x2655+(((-1.0)*r21*x2652))+((r20*x2651)));
evalcond[8]=(((r01*x2648))+((r00*x2649))+(((-1.0)*x2653))+(((-1.0)*r01*x2652))+(((-1.0)*r02*x2650))+((r00*x2651))+(((-1.0)*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2656=((1.0)*cj5);
IkReal x2657=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2656)));
j4eval[0]=x2657;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2656))))));
j4eval[2]=IKsign(x2657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2658=((1.0)*sj5);
IkReal x2659=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2658)));
j4eval[0]=x2659;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2658)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2660=(r11*((cj3*r21)));
IkReal x2661=cj5*cj5;
IkReal x2662=((1.0)*cj5*sj5);
IkReal x2663=((((-1.0)*cj3*r11*r20*x2662))+x2660+(((-1.0)*cj3*r10*r21*x2662))+((cj3*r12*r22))+(((-1.0)*x2660*x2661))+((cj3*r10*r20*x2661)));
j4eval[0]=x2663;
j4eval[1]=IKsign(x2663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2664=(r11*((cj3*r21)));
IkReal x2665=cj5*cj5;
IkReal x2666=(cj5*sj5);
IkReal x2667=((1.0)*cj5*r11*sj3);
IkReal x2668=((1.0)*r10*sj3);
IkReal x2669=(sj3*x2665);
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2668))+(((-1.0)*r22*x2667)))),IkReal(((((-1.0)*r21*x2668))+(((-1.0)*r21*sj5*x2667))+((r10*r20*sj3*x2666))+((r11*r20*x2669))+((r10*r21*x2669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign((x2664+((cj3*r12*r22))+(((-1.0)*x2664*x2665))+((cj3*r10*r20*x2665))+(((-1.0)*cj3*r10*r21*x2666))+(((-1.0)*cj3*cj5*r11*r20*sj5)))),-1);
if(!x2671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2670.value)+(((1.5707963267949)*(x2671.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2672=IKcos(j4);
IkReal x2673=((1.0)*x2672);
IkReal x2674=IKsin(j4);
IkReal x2675=(sj5*x2674);
IkReal x2676=((1.0)*cj5*x2674);
IkReal x2677=(cj5*sj3);
IkReal x2678=(sj3*sj5);
IkReal x2679=(cj3*x2674);
IkReal x2680=(cj3*sj5*x2672);
IkReal x2681=((1.0)*cj3*cj5*x2672);
IkReal x2682=(cj3*cj5);
IkReal x2683=(cj3*sj5);
IkReal x2684=((1.0)*sj3*x2674);
IkReal x2685=(cj5*sj3*x2672);
IkReal x2686=((1.0)*sj3*sj5*x2672);
IkReal x2687=(((cj1*sj2))+((cj2*sj1)));
IkReal x2688=(cj1*cj2);
IkReal x2689=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2673))+((r21*x2675))+(((-1.0)*r20*x2676)));
evalcond[1]=((((-1.0)*r02*x2673))+(((-1.0)*r00*x2676))+((r01*x2675)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2673))+((r11*x2675))+(((-1.0)*r10*x2676)));
evalcond[3]=(((r10*x2678))+((r12*x2679))+((r11*x2677))+(((-1.0)*r10*x2681))+((r11*x2680)));
evalcond[4]=((((-1.0)*r12*x2684))+(((-1.0)*r11*x2686))+((r11*x2682))+((r10*x2685))+((r10*x2683)));
evalcond[5]=((((-1.0)*r20*x2681))+((r22*x2679))+x2687+((r21*x2680))+((r21*x2677))+((r20*x2678)));
evalcond[6]=(x2687+((r00*x2685))+((r01*x2682))+((r00*x2683))+(((-1.0)*r01*x2686))+(((-1.0)*r02*x2684)));
evalcond[7]=(x2688+(((-1.0)*r00*x2681))+(((-1.0)*x2689))+((r02*x2679))+((r01*x2677))+((r00*x2678))+((r01*x2680)));
evalcond[8]=(((r20*x2685))+(((-1.0)*x2688))+x2689+((r20*x2683))+(((-1.0)*r22*x2684))+((r21*x2682))+(((-1.0)*r21*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2690=((1.0)*sj5);
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*r21*x2690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2690)))),-1);
if(!x2692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2691.value)+(((1.5707963267949)*(x2692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2693=IKcos(j4);
IkReal x2694=((1.0)*x2693);
IkReal x2695=IKsin(j4);
IkReal x2696=(sj5*x2695);
IkReal x2697=((1.0)*cj5*x2695);
IkReal x2698=(cj5*sj3);
IkReal x2699=(sj3*sj5);
IkReal x2700=(cj3*x2695);
IkReal x2701=(cj3*sj5*x2693);
IkReal x2702=((1.0)*cj3*cj5*x2693);
IkReal x2703=(cj3*cj5);
IkReal x2704=(cj3*sj5);
IkReal x2705=((1.0)*sj3*x2695);
IkReal x2706=(cj5*sj3*x2693);
IkReal x2707=((1.0)*sj3*sj5*x2693);
IkReal x2708=(((cj1*sj2))+((cj2*sj1)));
IkReal x2709=(cj1*cj2);
IkReal x2710=(sj1*sj2);
evalcond[0]=(((r21*x2696))+(((-1.0)*r20*x2697))+(((-1.0)*r22*x2694)));
evalcond[1]=(((r01*x2696))+(((-1.0)*r02*x2694))+(((-1.0)*r00*x2697)));
evalcond[2]=((-1.0)+((r11*x2696))+(((-1.0)*r12*x2694))+(((-1.0)*r10*x2697)));
evalcond[3]=(((r11*x2701))+(((-1.0)*r10*x2702))+((r11*x2698))+((r12*x2700))+((r10*x2699)));
evalcond[4]=((((-1.0)*r11*x2707))+(((-1.0)*r12*x2705))+((r11*x2703))+((r10*x2704))+((r10*x2706)));
evalcond[5]=(x2708+(((-1.0)*r20*x2702))+((r21*x2698))+((r21*x2701))+((r22*x2700))+((r20*x2699)));
evalcond[6]=(x2708+((r00*x2704))+(((-1.0)*r02*x2705))+((r00*x2706))+((r01*x2703))+(((-1.0)*r01*x2707)));
evalcond[7]=(x2709+((r02*x2700))+((r01*x2698))+((r01*x2701))+((r00*x2699))+(((-1.0)*x2710))+(((-1.0)*r00*x2702)));
evalcond[8]=((((-1.0)*r21*x2707))+((r21*x2703))+(((-1.0)*x2709))+((r20*x2706))+(((-1.0)*r22*x2705))+((r20*x2704))+x2710);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2711=((1.0)*cj5);
CheckValue<IkReal> x2712 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2711)))),-1);
if(!x2713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2712.value)+(((1.5707963267949)*(x2713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2714=IKcos(j4);
IkReal x2715=((1.0)*x2714);
IkReal x2716=IKsin(j4);
IkReal x2717=(sj5*x2716);
IkReal x2718=((1.0)*cj5*x2716);
IkReal x2719=(cj5*sj3);
IkReal x2720=(sj3*sj5);
IkReal x2721=(cj3*x2716);
IkReal x2722=(cj3*sj5*x2714);
IkReal x2723=((1.0)*cj3*cj5*x2714);
IkReal x2724=(cj3*cj5);
IkReal x2725=(cj3*sj5);
IkReal x2726=((1.0)*sj3*x2716);
IkReal x2727=(cj5*sj3*x2714);
IkReal x2728=((1.0)*sj3*sj5*x2714);
IkReal x2729=(((cj1*sj2))+((cj2*sj1)));
IkReal x2730=(cj1*cj2);
IkReal x2731=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2715))+(((-1.0)*r20*x2718))+((r21*x2717)));
evalcond[1]=(((r01*x2717))+(((-1.0)*r00*x2718))+(((-1.0)*r02*x2715)));
evalcond[2]=((-1.0)+((r11*x2717))+(((-1.0)*r10*x2718))+(((-1.0)*r12*x2715)));
evalcond[3]=((((-1.0)*r10*x2723))+((r10*x2720))+((r11*x2722))+((r12*x2721))+((r11*x2719)));
evalcond[4]=(((r11*x2724))+((r10*x2727))+(((-1.0)*r11*x2728))+((r10*x2725))+(((-1.0)*r12*x2726)));
evalcond[5]=(((r21*x2719))+((r20*x2720))+x2729+((r21*x2722))+(((-1.0)*r20*x2723))+((r22*x2721)));
evalcond[6]=(((r00*x2727))+x2729+(((-1.0)*r02*x2726))+((r01*x2724))+(((-1.0)*r01*x2728))+((r00*x2725)));
evalcond[7]=(x2730+(((-1.0)*r00*x2723))+((r01*x2722))+((r00*x2720))+(((-1.0)*x2731))+((r02*x2721))+((r01*x2719)));
evalcond[8]=(x2731+(((-1.0)*x2730))+((r20*x2727))+(((-1.0)*r22*x2726))+((r20*x2725))+((r21*x2724))+(((-1.0)*r21*x2728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r11))+(IKabs(r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2732=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2732);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2732);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=(((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2733=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2733);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2733);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
IkReal x2734=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x2734))+((r01*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2734)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2735=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2735);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2735);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2737=IKPowWithIntegerCheck(r12,-1);
if(!x2737.valid){
continue;
}
IkReal x2736=x2737.value;
CheckValue<IkReal> x2738=IKPowWithIntegerCheck(cj3,-1);
if(!x2738.valid){
continue;
}
if( IKabs((x2736*(x2738.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*x2736)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2736*(x2738.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))))+IKsqr((cj0*x2736))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2736*(x2738.value)*((((cj1*cj2*sj0))+(((-1.0)*(1.0)*sj0*sj1*sj2))))), (cj0*x2736));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2739=IKcos(j4);
IkReal x2740=((1.0)*r12);
IkReal x2741=IKsin(j4);
IkReal x2742=(sj5*x2741);
IkReal x2743=((1.0)*cj5*x2741);
IkReal x2744=(sj1*sj2);
IkReal x2745=((1.0)*sj0);
IkReal x2746=(cj1*sj2);
IkReal x2747=(cj2*sj1);
IkReal x2748=(cj5*sj3);
IkReal x2749=(sj3*sj5);
IkReal x2750=(cj3*sj5*x2739);
IkReal x2751=((1.0)*cj3*cj5*x2739);
IkReal x2752=((1.0)*cj1*cj2);
IkReal x2753=(cj3*cj5);
IkReal x2754=(cj3*sj5);
IkReal x2755=(cj5*sj3*x2739);
IkReal x2756=((1.0)*sj3*sj5*x2739);
IkReal x2757=((1.0)*cj0);
evalcond[0]=(cj0+(((-1.0)*x2739*x2740)));
evalcond[1]=((((-1.0)*r20*x2743))+((r21*x2742)));
evalcond[2]=((((-1.0)*cj1*cj2*x2745))+((cj3*r12*x2741))+((sj0*x2744)));
evalcond[3]=((((-1.0)*x2745))+((r01*x2742))+(((-1.0)*r00*x2743)));
evalcond[4]=((((-1.0)*x2745*x2746))+(((-1.0)*x2745*x2747))+(((-1.0)*sj3*x2740*x2741)));
evalcond[5]=(((r20*x2749))+(((-1.0)*r20*x2751))+x2746+x2747+((r21*x2748))+((r21*x2750)));
evalcond[6]=(((r20*x2754))+(((-1.0)*r21*x2756))+(((-1.0)*x2752))+x2744+((r20*x2755))+((r21*x2753)));
evalcond[7]=(((r01*x2750))+((cj0*x2744))+((r01*x2748))+((r00*x2749))+(((-1.0)*r00*x2751))+(((-1.0)*cj0*x2752)));
evalcond[8]=(((r00*x2754))+(((-1.0)*x2747*x2757))+(((-1.0)*x2746*x2757))+(((-1.0)*r01*x2756))+((r00*x2755))+((r01*x2753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2758=((1.0)*cj5);
CheckValue<IkReal> x2759=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2758))),-1);
if(!x2759.valid){
continue;
}
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x2758))+((cj3*r21*sj5))),-1);
if(!x2760.valid){
continue;
}
if( IKabs((sj0*(x2759.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2760.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2758))+(((-1.0)*(1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2759.value)))+IKsqr(((x2760.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2758))+(((-1.0)*(1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2759.value)), ((x2760.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2758))+(((-1.0)*(1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2761=IKcos(j4);
IkReal x2762=((1.0)*r12);
IkReal x2763=IKsin(j4);
IkReal x2764=(sj5*x2763);
IkReal x2765=((1.0)*cj5*x2763);
IkReal x2766=(sj1*sj2);
IkReal x2767=((1.0)*sj0);
IkReal x2768=(cj1*sj2);
IkReal x2769=(cj2*sj1);
IkReal x2770=(cj5*sj3);
IkReal x2771=(sj3*sj5);
IkReal x2772=(cj3*sj5*x2761);
IkReal x2773=((1.0)*cj3*cj5*x2761);
IkReal x2774=((1.0)*cj1*cj2);
IkReal x2775=(cj3*cj5);
IkReal x2776=(cj3*sj5);
IkReal x2777=(cj5*sj3*x2761);
IkReal x2778=((1.0)*sj3*sj5*x2761);
IkReal x2779=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2761*x2762))+cj0);
evalcond[1]=(((r21*x2764))+(((-1.0)*r20*x2765)));
evalcond[2]=(((sj0*x2766))+((cj3*r12*x2763))+(((-1.0)*cj1*cj2*x2767)));
evalcond[3]=((((-1.0)*r00*x2765))+(((-1.0)*x2767))+((r01*x2764)));
evalcond[4]=((((-1.0)*x2767*x2769))+(((-1.0)*sj3*x2762*x2763))+(((-1.0)*x2767*x2768)));
evalcond[5]=(((r21*x2770))+((r21*x2772))+(((-1.0)*r20*x2773))+x2769+x2768+((r20*x2771)));
evalcond[6]=((((-1.0)*r21*x2778))+(((-1.0)*x2774))+((r20*x2776))+((r21*x2775))+((r20*x2777))+x2766);
evalcond[7]=(((cj0*x2766))+((r00*x2771))+((r01*x2772))+(((-1.0)*r00*x2773))+((r01*x2770))+(((-1.0)*cj0*x2774)));
evalcond[8]=(((r00*x2777))+(((-1.0)*x2768*x2779))+((r01*x2775))+(((-1.0)*x2769*x2779))+(((-1.0)*r01*x2778))+((r00*x2776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2780=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))),-1);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(r12,-1);
if(!x2781.valid){
continue;
}
if( IKabs((sj0*(x2780.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*(x2781.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x2780.value)))+IKsqr((cj0*(x2781.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x2780.value)), (cj0*(x2781.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2782=IKcos(j4);
IkReal x2783=((1.0)*r12);
IkReal x2784=IKsin(j4);
IkReal x2785=(sj5*x2784);
IkReal x2786=((1.0)*cj5*x2784);
IkReal x2787=(sj1*sj2);
IkReal x2788=((1.0)*sj0);
IkReal x2789=(cj1*sj2);
IkReal x2790=(cj2*sj1);
IkReal x2791=(cj5*sj3);
IkReal x2792=(sj3*sj5);
IkReal x2793=(cj3*sj5*x2782);
IkReal x2794=((1.0)*cj3*cj5*x2782);
IkReal x2795=((1.0)*cj1*cj2);
IkReal x2796=(cj3*cj5);
IkReal x2797=(cj3*sj5);
IkReal x2798=(cj5*sj3*x2782);
IkReal x2799=((1.0)*sj3*sj5*x2782);
IkReal x2800=((1.0)*cj0);
evalcond[0]=((((-1.0)*x2782*x2783))+cj0);
evalcond[1]=(((r21*x2785))+(((-1.0)*r20*x2786)));
evalcond[2]=((((-1.0)*cj1*cj2*x2788))+((cj3*r12*x2784))+((sj0*x2787)));
evalcond[3]=(((r01*x2785))+(((-1.0)*r00*x2786))+(((-1.0)*x2788)));
evalcond[4]=((((-1.0)*x2788*x2789))+(((-1.0)*sj3*x2783*x2784))+(((-1.0)*x2788*x2790)));
evalcond[5]=(x2790+(((-1.0)*r20*x2794))+x2789+((r21*x2791))+((r21*x2793))+((r20*x2792)));
evalcond[6]=((((-1.0)*x2795))+((r20*x2797))+x2787+((r21*x2796))+((r20*x2798))+(((-1.0)*r21*x2799)));
evalcond[7]=(((r00*x2792))+((r01*x2791))+(((-1.0)*r00*x2794))+((r01*x2793))+(((-1.0)*cj0*x2795))+((cj0*x2787)));
evalcond[8]=(((r01*x2796))+(((-1.0)*r01*x2799))+((r00*x2797))+(((-1.0)*x2789*x2800))+((r00*x2798))+(((-1.0)*x2790*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2801=((1.0)*cj0);
IkReal x2802=((1.0)*sj0);
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*(1.0)*cj5*r21)))),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2801))+(((-1.0)*r12*x2802)))),IkReal(((((-1.0)*r01*sj5*x2801))+(((-1.0)*r11*sj5*x2802))+((cj0*cj5*r00))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2803.value)))+(x2804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2805=IKcos(j4);
IkReal x2806=((1.0)*x2805);
IkReal x2807=IKsin(j4);
IkReal x2808=(sj5*x2807);
IkReal x2809=((1.0)*cj5*x2807);
IkReal x2810=((1.0)*sj0);
IkReal x2811=(cj1*sj2);
IkReal x2812=(cj2*sj1);
IkReal x2813=(cj5*sj3);
IkReal x2814=(sj3*sj5);
IkReal x2815=(cj3*x2807);
IkReal x2816=(cj3*sj5*x2805);
IkReal x2817=((1.0)*cj3*cj5*x2805);
IkReal x2818=(sj1*sj2);
IkReal x2819=((1.0)*cj1*cj2);
IkReal x2820=(cj3*cj5);
IkReal x2821=(cj3*sj5);
IkReal x2822=((1.0)*sj3*x2807);
IkReal x2823=(cj5*sj3*x2805);
IkReal x2824=((1.0)*sj3*sj5*x2805);
IkReal x2825=((1.0)*cj0);
evalcond[0]=((((-1.0)*r20*x2809))+((r21*x2808))+(((-1.0)*r22*x2806)));
evalcond[1]=(((r11*x2808))+cj0+(((-1.0)*r10*x2809))+(((-1.0)*r12*x2806)));
evalcond[2]=(((r01*x2808))+(((-1.0)*r00*x2809))+(((-1.0)*r02*x2806))+(((-1.0)*x2810)));
evalcond[3]=(((r21*x2813))+((r20*x2814))+x2811+x2812+(((-1.0)*r20*x2817))+((r22*x2815))+((r21*x2816)));
evalcond[4]=((((-1.0)*x2819))+(((-1.0)*r21*x2824))+x2818+((r20*x2823))+((r20*x2821))+((r21*x2820))+(((-1.0)*r22*x2822)));
evalcond[5]=((((-1.0)*x2812*x2825))+(((-1.0)*r01*x2824))+((r01*x2820))+(((-1.0)*r02*x2822))+((r00*x2821))+(((-1.0)*x2811*x2825))+((r00*x2823)));
evalcond[6]=((((-1.0)*r00*x2817))+((cj0*x2818))+((r01*x2813))+(((-1.0)*cj0*x2819))+((r02*x2815))+((r00*x2814))+((r01*x2816)));
evalcond[7]=((((-1.0)*x2810*x2811))+(((-1.0)*r11*x2824))+(((-1.0)*r12*x2822))+((r10*x2821))+((r10*x2823))+((r11*x2820))+(((-1.0)*x2810*x2812)));
evalcond[8]=(((sj0*x2818))+((r10*x2814))+(((-1.0)*r10*x2817))+((r12*x2815))+((r11*x2816))+(((-1.0)*cj1*cj2*x2810))+((r11*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2826=((1.0)*cj5);
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2826))+(((-1.0)*(1.0)*r00*sj5)))),-1);
if(!x2827.valid){
continue;
}
CheckValue<IkReal> x2828 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2826))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2827.value)))+(x2828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2829=IKcos(j4);
IkReal x2830=((1.0)*x2829);
IkReal x2831=IKsin(j4);
IkReal x2832=(sj5*x2831);
IkReal x2833=((1.0)*cj5*x2831);
IkReal x2834=((1.0)*sj0);
IkReal x2835=(cj1*sj2);
IkReal x2836=(cj2*sj1);
IkReal x2837=(cj5*sj3);
IkReal x2838=(sj3*sj5);
IkReal x2839=(cj3*x2831);
IkReal x2840=(cj3*sj5*x2829);
IkReal x2841=((1.0)*cj3*cj5*x2829);
IkReal x2842=(sj1*sj2);
IkReal x2843=((1.0)*cj1*cj2);
IkReal x2844=(cj3*cj5);
IkReal x2845=(cj3*sj5);
IkReal x2846=((1.0)*sj3*x2831);
IkReal x2847=(cj5*sj3*x2829);
IkReal x2848=((1.0)*sj3*sj5*x2829);
IkReal x2849=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2830))+(((-1.0)*r20*x2833))+((r21*x2832)));
evalcond[1]=(((r11*x2832))+(((-1.0)*r12*x2830))+(((-1.0)*r10*x2833))+cj0);
evalcond[2]=((((-1.0)*r02*x2830))+(((-1.0)*x2834))+((r01*x2832))+(((-1.0)*r00*x2833)));
evalcond[3]=(((r22*x2839))+(((-1.0)*r20*x2841))+((r20*x2838))+x2836+x2835+((r21*x2837))+((r21*x2840)));
evalcond[4]=(((r21*x2844))+((r20*x2845))+(((-1.0)*x2843))+(((-1.0)*r22*x2846))+(((-1.0)*r21*x2848))+x2842+((r20*x2847)));
evalcond[5]=(((r00*x2845))+(((-1.0)*x2835*x2849))+((r00*x2847))+((r01*x2844))+(((-1.0)*r01*x2848))+(((-1.0)*r02*x2846))+(((-1.0)*x2836*x2849)));
evalcond[6]=(((r01*x2837))+((r02*x2839))+((r00*x2838))+((cj0*x2842))+((r01*x2840))+(((-1.0)*r00*x2841))+(((-1.0)*cj0*x2843)));
evalcond[7]=(((r10*x2847))+(((-1.0)*x2834*x2836))+(((-1.0)*r12*x2846))+(((-1.0)*x2834*x2835))+((r11*x2844))+(((-1.0)*r11*x2848))+((r10*x2845)));
evalcond[8]=(((r12*x2839))+((sj0*x2842))+((r11*x2840))+((r10*x2838))+(((-1.0)*r10*x2841))+(((-1.0)*cj1*cj2*x2834))+((r11*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=((1.0)*sj0);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2850)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj5*x2850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2853=IKcos(j4);
IkReal x2854=((1.0)*x2853);
IkReal x2855=IKsin(j4);
IkReal x2856=(sj5*x2855);
IkReal x2857=((1.0)*cj5*x2855);
IkReal x2858=((1.0)*sj0);
IkReal x2859=(cj1*sj2);
IkReal x2860=(cj2*sj1);
IkReal x2861=(cj5*sj3);
IkReal x2862=(sj3*sj5);
IkReal x2863=(cj3*x2855);
IkReal x2864=(cj3*sj5*x2853);
IkReal x2865=((1.0)*cj3*cj5*x2853);
IkReal x2866=(sj1*sj2);
IkReal x2867=((1.0)*cj1*cj2);
IkReal x2868=(cj3*cj5);
IkReal x2869=(cj3*sj5);
IkReal x2870=((1.0)*sj3*x2855);
IkReal x2871=(cj5*sj3*x2853);
IkReal x2872=((1.0)*sj3*sj5*x2853);
IkReal x2873=((1.0)*cj0);
evalcond[0]=((((-1.0)*r22*x2854))+(((-1.0)*r20*x2857))+((r21*x2856)));
evalcond[1]=(((r11*x2856))+(((-1.0)*r10*x2857))+(((-1.0)*r12*x2854))+cj0);
evalcond[2]=((((-1.0)*x2858))+((r01*x2856))+(((-1.0)*r00*x2857))+(((-1.0)*r02*x2854)));
evalcond[3]=(x2860+(((-1.0)*r20*x2865))+((r22*x2863))+((r20*x2862))+((r21*x2864))+x2859+((r21*x2861)));
evalcond[4]=(x2866+(((-1.0)*r21*x2872))+((r20*x2871))+((r21*x2868))+((r20*x2869))+(((-1.0)*x2867))+(((-1.0)*r22*x2870)));
evalcond[5]=((((-1.0)*x2860*x2873))+((r01*x2868))+((r00*x2871))+(((-1.0)*r02*x2870))+(((-1.0)*x2859*x2873))+((r00*x2869))+(((-1.0)*r01*x2872)));
evalcond[6]=(((r01*x2861))+((r00*x2862))+((r02*x2863))+(((-1.0)*cj0*x2867))+(((-1.0)*r00*x2865))+((r01*x2864))+((cj0*x2866)));
evalcond[7]=(((r10*x2871))+(((-1.0)*r12*x2870))+(((-1.0)*x2858*x2860))+((r11*x2868))+(((-1.0)*x2858*x2859))+(((-1.0)*r11*x2872))+((r10*x2869)));
evalcond[8]=(((r11*x2861))+((r12*x2863))+((r10*x2862))+(((-1.0)*r10*x2865))+(((-1.0)*cj1*cj2*x2858))+((sj0*x2866))+((r11*x2864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2874=r21*r21;
IkReal x2875=(cj3*x2874);
IkReal x2876=((2.0)*r21);
IkReal x2877=cj5*cj5;
IkReal x2878=r20*r20;
IkReal x2879=((1.0)*r22);
IkReal x2880=(cj1*sj2);
IkReal x2881=(cj2*sj1);
IkReal x2882=(r20*sj3);
IkReal x2883=(cj5*r20);
IkReal x2884=((1.0)*r21*sj5);
IkReal x2885=(cj5*sj3*sj5);
CheckValue<IkReal> x2886=IKPowWithIntegerCheck(IKsign((x2875+((cj3*x2877*x2878))+(((-1.0)*cj3*cj5*r20*sj5*x2876))+(((-1.0)*x2875*x2877))+((cj3*(r22*r22))))),-1);
if(!x2886.valid){
continue;
}
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((((-1.0)*x2879*x2881))+(((-1.0)*x2879*x2880))+(((-1.0)*r22*sj5*x2882))+(((-1.0)*cj5*r21*r22*sj3)))),IkReal((((x2881*x2883))+(((-1.0)*x2874*x2885))+((x2880*x2883))+(((-1.0)*x2881*x2884))+(((-1.0)*r21*x2882))+((r20*sj3*x2876*x2877))+((x2878*x2885))+(((-1.0)*x2880*x2884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2886.value)))+(x2887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2888=IKcos(j4);
IkReal x2889=((1.0)*r22);
IkReal x2890=IKsin(j4);
IkReal x2891=(r21*sj5);
IkReal x2892=((1.0)*cj5*r20);
IkReal x2893=(cj5*r21);
IkReal x2894=(r20*sj5);
IkReal x2895=(cj3*x2888);
IkReal x2896=(sj3*x2888);
evalcond[0]=((((-1.0)*x2888*x2889))+(((-1.0)*x2890*x2892))+((x2890*x2891)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x2892*x2895))+((sj3*x2893))+((cj3*r22*x2890))+((x2891*x2895))+((cj2*sj1))+((sj3*x2894)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+((cj3*x2893))+((cj5*r20*x2896))+((cj3*x2894))+((sj1*sj2))+(((-1.0)*sj3*x2889*x2890))+(((-1.0)*r21*sj5*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2897=(sj4*sj5);
IkReal x2898=(cj5*sj4);
if( IKabs((((r01*x2897))+(((-1.0)*r00*x2898))+(((-1.0)*(1.0)*cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2897))+((r10*x2898))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2897))+(((-1.0)*r00*x2898))+(((-1.0)*(1.0)*cj4*r02))))+IKsqr(((((-1.0)*r11*x2897))+((r10*x2898))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2897))+(((-1.0)*r00*x2898))+(((-1.0)*(1.0)*cj4*r02))), ((((-1.0)*r11*x2897))+((r10*x2898))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2899=IKcos(j0);
IkReal x2900=((1.0)*cj4);
IkReal x2901=(sj4*sj5);
IkReal x2902=((1.0)*cj5*sj4);
IkReal x2903=IKsin(j0);
IkReal x2904=((1.0)*x2903);
IkReal x2905=((0.1)*cj5);
IkReal x2906=((0.1)*sj5);
IkReal x2907=((0.425)*cj1);
IkReal x2908=((0.392)*cj1*cj2);
IkReal x2909=(sj1*sj2);
IkReal x2910=(x2899*x2909);
IkReal x2911=(x2903*x2909);
IkReal x2912=(cj3*cj5);
IkReal x2913=(cj3*sj5);
IkReal x2914=((1.0)*sj3*sj4);
IkReal x2915=(cj4*cj5*sj3);
IkReal x2916=(cj1*sj2);
IkReal x2917=((1.0)*x2899);
IkReal x2918=(cj2*sj1);
IkReal x2919=((1.0)*cj4*sj3*sj5);
IkReal x2920=(cj3*sj4);
IkReal x2921=(cj5*sj3);
IkReal x2922=(sj3*sj5);
IkReal x2923=(cj3*cj4*sj5);
IkReal x2924=(cj1*cj2);
IkReal x2925=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r10*x2902))+(((-1.0)*r12*x2900))+((r11*x2901))+x2899);
evalcond[1]=((((-1.0)*r02*x2900))+(((-1.0)*r00*x2902))+(((-1.0)*x2904))+((r01*x2901)));
evalcond[2]=((((-1.0)*(1.0)*px))+((x2899*x2907))+((x2899*x2908))+(((-0.392)*x2910))+(((-1.0)*r00*x2906))+(((-1.0)*r01*x2905))+(((-0.134)*x2903)));
evalcond[3]=(((x2903*x2907))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x2906))+(((-0.392)*x2911))+((x2903*x2908))+(((0.134)*x2899))+(((-1.0)*r11*x2905)));
evalcond[4]=(((r01*x2912))+((r00*x2913))+((r00*x2915))+(((-1.0)*r02*x2914))+(((-1.0)*r01*x2919))+(((-1.0)*x2916*x2917))+(((-1.0)*x2917*x2918)));
evalcond[5]=(((r00*x2922))+((r02*x2920))+(((-1.0)*x2917*x2924))+(((-1.0)*r00*x2925))+x2910+((r01*x2923))+((r01*x2921)));
evalcond[6]=((((-1.0)*x2904*x2916))+(((-1.0)*r12*x2914))+((r10*x2915))+(((-1.0)*r11*x2919))+((r10*x2913))+((r11*x2912))+(((-1.0)*x2904*x2918)));
evalcond[7]=((((-1.0)*x2904*x2924))+((r10*x2922))+(((-1.0)*r10*x2925))+((r12*x2920))+x2911+((r11*x2923))+((r11*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2926=r21*r21;
IkReal x2927=(sj3*x2926);
IkReal x2928=(r21*sj5);
IkReal x2929=cj5*cj5;
IkReal x2930=r20*r20;
IkReal x2931=(sj1*sj2);
IkReal x2932=((1.0)*cj1*cj2);
IkReal x2933=(cj3*r21);
IkReal x2934=(r20*x2933);
IkReal x2935=(cj5*r20);
IkReal x2936=(cj3*cj5*sj5);
CheckValue<IkReal> x2937 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2932))+((r22*x2931))+((((r20*r22))*((cj3*sj5))))+((cj5*r22*x2933)))),IkReal(((((-2.0)*x2929*x2934))+((cj1*cj2*x2935))+((x2928*x2931))+x2934+(((-1.0)*x2928*x2932))+(((-1.0)*x2930*x2936))+((x2926*x2936))+(((-1.0)*sj1*sj2*x2935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2937.valid){
continue;
}
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*sj3*x2928))+((sj3*x2929*x2930))+((sj3*(r22*r22)))+(((-1.0)*x2927*x2929))+x2927)),-1);
if(!x2938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2937.value)+(((1.5707963267949)*(x2938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2939=IKcos(j4);
IkReal x2940=((1.0)*r22);
IkReal x2941=IKsin(j4);
IkReal x2942=(r21*sj5);
IkReal x2943=((1.0)*cj5*r20);
IkReal x2944=(cj5*r21);
IkReal x2945=(r20*sj5);
IkReal x2946=(cj3*x2939);
IkReal x2947=(sj3*x2939);
evalcond[0]=((((-1.0)*x2939*x2940))+((x2941*x2942))+(((-1.0)*x2941*x2943)));
evalcond[1]=((((-1.0)*x2943*x2946))+((x2942*x2946))+((sj3*x2944))+((cj3*r22*x2941))+((sj3*x2945))+((cj1*sj2))+((cj2*sj1)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+((cj3*x2945))+((cj3*x2944))+(((-1.0)*r21*sj5*x2947))+((cj5*r20*x2947))+((sj1*sj2))+(((-1.0)*sj3*x2940*x2941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2948=(sj4*sj5);
IkReal x2949=(cj5*sj4);
if( IKabs(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2949))+((r01*x2948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2948))+((r10*x2949))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2949))+((r01*x2948))))+IKsqr(((((-1.0)*r11*x2948))+((r10*x2949))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*(1.0)*cj4*r02))+(((-1.0)*r00*x2949))+((r01*x2948))), ((((-1.0)*r11*x2948))+((r10*x2949))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2950=IKcos(j0);
IkReal x2951=((1.0)*cj4);
IkReal x2952=(sj4*sj5);
IkReal x2953=((1.0)*cj5*sj4);
IkReal x2954=IKsin(j0);
IkReal x2955=((1.0)*x2954);
IkReal x2956=((0.1)*cj5);
IkReal x2957=((0.1)*sj5);
IkReal x2958=((0.425)*cj1);
IkReal x2959=((0.392)*cj1*cj2);
IkReal x2960=(sj1*sj2);
IkReal x2961=(x2950*x2960);
IkReal x2962=(x2954*x2960);
IkReal x2963=(cj3*cj5);
IkReal x2964=(cj3*sj5);
IkReal x2965=((1.0)*sj3*sj4);
IkReal x2966=(cj4*cj5*sj3);
IkReal x2967=(cj1*sj2);
IkReal x2968=((1.0)*x2950);
IkReal x2969=(cj2*sj1);
IkReal x2970=((1.0)*cj4*sj3*sj5);
IkReal x2971=(cj3*sj4);
IkReal x2972=(cj5*sj3);
IkReal x2973=(sj3*sj5);
IkReal x2974=(cj3*cj4*sj5);
IkReal x2975=(cj1*cj2);
IkReal x2976=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r10*x2953))+(((-1.0)*r12*x2951))+x2950+((r11*x2952)));
evalcond[1]=((((-1.0)*x2955))+(((-1.0)*r02*x2951))+(((-1.0)*r00*x2953))+((r01*x2952)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x2956))+((x2950*x2959))+(((-1.0)*r00*x2957))+((x2950*x2958))+(((-0.392)*x2961))+(((-0.134)*x2954)));
evalcond[3]=((((0.134)*x2950))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x2956))+(((-1.0)*r10*x2957))+(((-0.392)*x2962))+((x2954*x2958))+((x2954*x2959)));
evalcond[4]=(((r00*x2966))+(((-1.0)*r02*x2965))+((r01*x2963))+((r00*x2964))+(((-1.0)*x2968*x2969))+(((-1.0)*x2967*x2968))+(((-1.0)*r01*x2970)));
evalcond[5]=((((-1.0)*x2968*x2975))+((r01*x2972))+x2961+((r01*x2974))+(((-1.0)*r00*x2976))+((r02*x2971))+((r00*x2973)));
evalcond[6]=((((-1.0)*r11*x2970))+(((-1.0)*x2955*x2967))+(((-1.0)*r12*x2965))+(((-1.0)*x2955*x2969))+((r10*x2966))+((r10*x2964))+((r11*x2963)));
evalcond[7]=(((r12*x2971))+x2962+((r10*x2973))+((r11*x2972))+(((-1.0)*x2955*x2975))+((r11*x2974))+(((-1.0)*r10*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (936ceb7e81bc59ce6a5cc09aa6bf68c4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
